using namespace std;

							class interface : public X3DChildNode, X3DBoundedObject, X3DUrlObject
							{
							...
							}
						;/** AcousticProperties defines a concrete node class that extends class X3DAppearanceChildNode. */

class AcousticProperties : public X3DAppearanceChildNode
{
  /** Provide float value [0,1) from inputOutput SFFloat field named "absorption". */
  float getAbsorption ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "absorption". */
  void setAbsorption (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "diffuse". */
  float getDiffuse ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "diffuse". */
  void setDiffuse (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "refraction". */
  float getRefraction ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "refraction". */
  void setRefraction (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "specular". */
  float getSpecular ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "specular". */
  void setSpecular (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Analyser defines a concrete node class that extends class X3DSoundProcessingNode. */

class Analyser : public X3DSoundProcessingNode
{
  /** Provide int value [0,inf) from inputOutput SFInt32 field named "fftSize". */
  int getFftSize ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "fftSize". */
  void setFftSize (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "frequencyBinCount". */
  int getFrequencyBinCount ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "frequencyBinCount". */
  void setFrequencyBinCount (int value) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "minDecibels". */
  float getMinDecibels ();

  /** Assign float value to inputOutput SFFloat field named "minDecibels". */
  void setMinDecibels (float value);

  /** Provide float value from inputOutput SFFloat field named "maxDecibels". */
  float getMaxDecibels ();

  /** Assign float value to inputOutput SFFloat field named "maxDecibels". */
  void setMaxDecibels (float value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "smoothingTimeConstant". */
  float getSmoothingTimeConstant ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "smoothingTimeConstant". */
  void setSmoothingTimeConstant (float value) throw (InvalidFieldValueException);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tailTime". */
  double getTailTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tailTime". */
  void setTailTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Anchor defines a concrete node class that extends classs X3DGroupingNode, X3DUrlObject. */

class Anchor : public X3DGroupingNode, X3DUrlObject
{
  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "parameter". */
  MFString* getParameter ();

  /** Provide number of primitive values in "parameter" array */
  int getNumParameter ();

  /** Assign MFString* value to inputOutput MFString field named "parameter". */
  void setParameter (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "parameter" */
  void setParameter (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Appearance defines a concrete node class that extends class X3DAppearanceNode. */

class Appearance : public X3DAppearanceNode
{
  /** Provide float value from inputOutput SFFloat field named "alphaCutoff". */
  float getAlphaCutoff ();

  /** Assign float value to inputOutput SFFloat field named "alphaCutoff". */
  void setAlphaCutoff (float value);

  /** Provide MFString value from inputOutput SFString field named "alphaMode". */
  MFString getAlphaMode ();

  /** Assign MFString value to inputOutput SFString field named "alphaMode". */
  void setAlphaMode (MFString value);

  /** Provide X3DShaderNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DShaderNode type field named "shaders". */
  X3DNode* getShaders ();

  /** Provide number of nodes in "shaders" array */
  int getNumShaders ();

  /** Assign X3DShaderNode* value (using a properly typed node array) to inputOutput X3DShaderNode type field named "shaders". */
  void setShaders (X3DShaderNode* nodes);

  /** Assign single X3DShaderNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "shaders" */
  void setShaders (X3DShaderNode node);

  /** Assign X3DShaderNode* value (using a properly typed protoInstance array) to inputOutput X3DShaderNode type field named "shaders". */
  void setShaders (X3DPrototypeInstance node);

  /** Assign X3DShaderNode* value (using a properly typed node array) to inputOutput X3DShaderNode type field named "shaders". */
  void setShaders (X3DNode nodes);

  /** Provide AcousticProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput AcousticProperties type field named "acousticProperties". */
  X3DNode* getAcousticProperties ();

  /** Assign AcousticProperties value (using a properly typed node) to inputOutput AcousticProperties type field named "acousticProperties". */
  void setAcousticProperties (AcousticProperties node);

  /** Assign AcousticProperties value (using a properly typed protoInstance) */
  void setAcousticProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FillProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput FillProperties type field named "fillProperties". */
  X3DNode* getFillProperties ();

  /** Assign FillProperties value (using a properly typed node) to inputOutput FillProperties type field named "fillProperties". */
  void setFillProperties (FillProperties node);

  /** Assign FillProperties value (using a properly typed protoInstance) */
  void setFillProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide LineProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput LineProperties type field named "lineProperties". */
  X3DNode* getLineProperties ();

  /** Assign LineProperties value (using a properly typed node) to inputOutput LineProperties type field named "lineProperties". */
  void setLineProperties (LineProperties node);

  /** Assign LineProperties value (using a properly typed protoInstance) */
  void setLineProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide PointProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput PointProperties type field named "pointProperties". */
  X3DNode* getPointProperties ();

  /** Assign PointProperties value (using a properly typed node) to inputOutput PointProperties type field named "pointProperties". */
  void setPointProperties (PointProperties node);

  /** Assign PointProperties value (using a properly typed protoInstance) */
  void setPointProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMaterialNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMaterialNode type field named "material". */
  X3DNode* getMaterial ();

  /** Assign X3DMaterialNode value (using a properly typed node) to inputOutput X3DMaterialNode type field named "material". */
  void setMaterial (X3DMaterialNode node);

  /** Assign X3DMaterialNode value (using a properly typed protoInstance) */
  void setMaterial (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTextureNode type field named "texture". */
  X3DNode* getTexture ();

  /** Assign X3DTextureNode value (using a properly typed node) to inputOutput X3DTextureNode type field named "texture". */
  void setTexture (X3DTextureNode node);

  /** Assign X3DTextureNode value (using a properly typed protoInstance) */
  void setTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTextureTransformNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTextureTransformNode type field named "textureTransform". */
  X3DNode* getTextureTransform ();

  /** Assign X3DTextureTransformNode value (using a properly typed node) to inputOutput X3DTextureTransformNode type field named "textureTransform". */
  void setTextureTransform (X3DTextureTransformNode node);

  /** Assign X3DTextureTransformNode value (using a properly typed protoInstance) */
  void setTextureTransform (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Arc2D defines a concrete node class that extends class X3DGeometryNode. */

class Arc2D : public X3DGeometryNode
{
  /** Provide float value (0,inf) from initializeOnly SFFloat field named "radius". */
  float getRadius ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "radius". */
  void setRadius (float value) throw (InvalidFieldValueException);

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "startAngle". */
  float getStartAngle ();

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "startAngle". */
  void setStartAngle (float angle) throw (InvalidFieldValueException);

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "endAngle". */
  float getEndAngle ();

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "endAngle". */
  void setEndAngle (float angle) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ArcClose2D defines a concrete node class that extends class X3DGeometryNode. */

class ArcClose2D : public X3DGeometryNode
{
  /** Provide float value (0,inf) from initializeOnly SFFloat field named "radius". */
  float getRadius ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "radius". */
  void setRadius (float value) throw (InvalidFieldValueException);

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "startAngle". */
  float getStartAngle ();

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "startAngle". */
  void setStartAngle (float angle) throw (InvalidFieldValueException);

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "endAngle". */
  float getEndAngle ();

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "endAngle". */
  void setEndAngle (float angle) throw (InvalidFieldValueException);

  /** Provide MFString value from initializeOnly SFString field named "closureType". */
  MFString getClosureType ();

  /** Assign MFString value to initializeOnly SFString field named "closureType". */
  void setClosureType (MFString value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** AudioClip defines a concrete node class that extends classs X3DSoundSourceNode, X3DUrlObject. */

class AudioClip : public X3DSoundSourceNode, X3DUrlObject
{
  /** Provide double value in seconds [-1,inf) from outputOnly SFTime field named "duration_changed". */
  double getDuration ();

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide bool value from inputOutput SFBool field named "loop". */
  bool getLoop ();

  /** Assign bool value to inputOutput SFBool field named "loop". */
  void setLoop (bool value);

  /** Provide float value (0,inf) from inputOutput SFFloat field named "pitch". */
  float getPitch ();

  /** Assign float value (0,inf) to inputOutput SFFloat field named "pitch". */
  void setPitch (float value) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** AudioDestination defines a concrete node class that extends class X3DSoundDestinationNode. */

class AudioDestination : public X3DSoundDestinationNode
{
  /** Provide int value [0,inf) from inputOutput SFInt32 field named "maxChannelCount". */
  int getMaxChannelCount ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "maxChannelCount". */
  void setMaxChannelCount (int value) throw (InvalidFieldValueException);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide MFString value from inputOutput SFString field named "mediaDeviceID". */
  MFString getMediaDeviceID ();

  /** Assign MFString value to inputOutput SFString field named "mediaDeviceID". */
  void setMediaDeviceID (MFString value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Background defines a concrete node class that extends class X3DBackgroundNode. */

class Background : public X3DBackgroundNode
{
  /** Provide MFString* value from inputOutput MFString field named "backUrl". */
  MFString* getBackUrl ();

  /** Provide number of primitive values in "backUrl" array */
  int getNumBackUrl ();

  /** Assign MFString* value to inputOutput MFString field named "backUrl". */
  void setBackUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "backUrl" */
  void setBackUrl (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "bottomUrl". */
  MFString* getBottomUrl ();

  /** Provide number of primitive values in "bottomUrl" array */
  int getNumBottomUrl ();

  /** Assign MFString* value to inputOutput MFString field named "bottomUrl". */
  void setBottomUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "bottomUrl" */
  void setBottomUrl (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "frontUrl". */
  MFString* getFrontUrl ();

  /** Provide number of primitive values in "frontUrl" array */
  int getNumFrontUrl ();

  /** Assign MFString* value to inputOutput MFString field named "frontUrl". */
  void setFrontUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "frontUrl" */
  void setFrontUrl (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "leftUrl". */
  MFString* getLeftUrl ();

  /** Provide number of primitive values in "leftUrl" array */
  int getNumLeftUrl ();

  /** Assign MFString* value to inputOutput MFString field named "leftUrl". */
  void setLeftUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "leftUrl" */
  void setLeftUrl (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "rightUrl". */
  MFString* getRightUrl ();

  /** Provide number of primitive values in "rightUrl" array */
  int getNumRightUrl ();

  /** Assign MFString* value to inputOutput MFString field named "rightUrl". */
  void setRightUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "rightUrl" */
  void setRightUrl (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "topUrl". */
  MFString* getTopUrl ();

  /** Provide number of primitive values in "topUrl" array */
  int getNumTopUrl ();

  /** Assign MFString* value to inputOutput MFString field named "topUrl". */
  void setTopUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "topUrl" */
  void setTopUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float* value in radians (-inf,inf) from inputOutput MFFloat field named "groundAngle". */
  float* getGroundAngle ();

  /** Provide number of primitive values in "groundAngle" array */
  int getNumGroundAngle ();

  /** Assign float* value in radians (-inf,inf) to inputOutput MFFloat field named "groundAngle". */
  void setGroundAngle (float* angles);

  /** Assign single float* value in radians (-inf,inf) as the MFFloat array for inputOutput field named "groundAngle" */
  void setGroundAngle (float angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "groundColor". */
  float* getGroundColor ();

  /** Provide number of 3-tuple primitive values in "groundColor" array */
  int getNumGroundColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "groundColor". */
  void setGroundColor (float* colors) throw (InvalidFieldValueException);

  /** Provide float* value in radians (-inf,inf) from inputOutput MFFloat field named "skyAngle". */
  float* getSkyAngle ();

  /** Provide number of primitive values in "skyAngle" array */
  int getNumSkyAngle ();

  /** Assign float* value in radians (-inf,inf) to inputOutput MFFloat field named "skyAngle". */
  void setSkyAngle (float* angles);

  /** Assign single float* value in radians (-inf,inf) as the MFFloat array for inputOutput field named "skyAngle" */
  void setSkyAngle (float angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "skyColor". */
  float* getSkyColor ();

  /** Provide number of 3-tuple primitive values in "skyColor" array */
  int getNumSkyColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "skyColor". */
  void setSkyColor (float* colors) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float getTransparency ();

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void setTransparency (float value);

  /** Assign bool value to inputOnly SFBool field named "set_bind". */
  void setBind (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double getBindTime ();

  /** Provide bool value from outputOnly SFBool field named "isBound". */
  bool getIsBound ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BallJoint defines a concrete node class that extends class X3DRigidJointNode.
  * BallJoint represents an unconstrained joint between two bodies that pivot about a common anchor point. */

class BallJoint : public X3DRigidJointNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  float* getBody1AnchorPoint ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  float* getBody2AnchorPoint ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  float* getAnchorPoint ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void setAnchorPoint (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "forceOutput" */
  void setForceOutput (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  X3DNode* getBody1 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void setBody1 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  X3DNode* getBody2 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void setBody2 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Billboard defines a concrete node class that extends class X3DGroupingNode. */

class Billboard : public X3DGroupingNode
{
  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "axisOfRotation". */
  float* getAxisOfRotation ();

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "axisOfRotation". */
  void setAxisOfRotation (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BiquadFilter defines a concrete node class that extends class X3DSoundProcessingNode. */

class BiquadFilter : public X3DSoundProcessingNode
{
  /** Provide float value [0,inf) from inputOutput SFFloat field named "detune". */
  float getDetune ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "detune". */
  void setDetune (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "frequency". */
  float getFrequency ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "frequency". */
  void setFrequency (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "qualityFactor". */
  float getQualityFactor ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "qualityFactor". */
  void setQualityFactor (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to inputOutput SFString field named "type". */
  void setType (MFString value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tailTime". */
  double getTailTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tailTime". */
  void setTailTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BlendedVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class BlendedVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide float value [0,1) from inputOutput SFFloat field named "weightConstant1". */
  float getWeightConstant1 ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "weightConstant1". */
  void setWeightConstant1 (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "weightConstant2". */
  float getWeightConstant2 ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "weightConstant2". */
  void setWeightConstant2 (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "weightFunction1". */
  MFString getWeightFunction1 ();

  /** Assign MFString value to inputOutput SFString field named "weightFunction1". */
  void setWeightFunction1 (MFString value);

  /** Provide MFString value from inputOutput SFString field named "weightFunction2". */
  MFString getWeightFunction2 ();

  /** Assign MFString value to inputOutput SFString field named "weightFunction2". */
  void setWeightFunction2 (MFString value);

  /** Provide X3DComposableVolumeRenderStyleNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  X3DNode* getRenderStyle ();

  /** Assign X3DComposableVolumeRenderStyleNode value (using a properly typed node) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DComposableVolumeRenderStyleNode node);

  /** Assign X3DComposableVolumeRenderStyleNode value (using a properly typed protoInstance) */
  void setRenderStyle (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  X3DNode* getVoxels ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void setVoxels (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setVoxels (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "weightTransferFunction1". */
  X3DNode* getWeightTransferFunction1 ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "weightTransferFunction1". */
  void setWeightTransferFunction1 (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setWeightTransferFunction1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "weightTransferFunction2". */
  X3DNode* getWeightTransferFunction2 ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "weightTransferFunction2". */
  void setWeightTransferFunction2 (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setWeightTransferFunction2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BooleanFilter defines a concrete node class that extends class X3DChildNode. */

class BooleanFilter : public X3DChildNode
{
  /** Assign bool value to inputOnly SFBool field named "set_boolean". */
  void setBoolean (bool value);

  /** Provide bool value from outputOnly SFBool field named "inputFalse". */
  bool getInputFalse ();

  /** Provide bool value from outputOnly SFBool field named "inputNegate". */
  bool getInputNegate ();

  /** Provide bool value from outputOnly SFBool field named "inputTrue". */
  bool getInputTrue ();

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BooleanSequencer defines a concrete node class that extends class X3DSequencerNode. */

class BooleanSequencer : public X3DSequencerNode
{
  /** Provide bool value from outputOnly SFBool field named "value_changed". */
  bool getValue ();

  /** Provide bool* value from inputOutput MFBool field named "keyValue". */
  bool* getKeyValue ();

  /** Provide number of primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign bool* value to inputOutput MFBool field named "keyValue". */
  void setKeyValue (bool* values);

  /** Assign single bool* value as the MFBool array for inputOutput field named "keyValue" */
  void setKeyValue (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign bool value to inputOnly SFBool field named "next". */
  void setNext (bool value);

  /** Assign bool value to inputOnly SFBool field named "previous". */
  void setPrevious (bool value);

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BooleanToggle defines a concrete node class that extends class X3DChildNode. */

class BooleanToggle : public X3DChildNode
{
  /** Assign bool value to inputOnly SFBool field named "set_boolean". */
  void setBoolean (bool value);

  /** Provide bool value from inputOutput SFBool field named "toggle". */
  bool getToggle ();

  /** Assign bool value to inputOutput SFBool field named "toggle". */
  void setToggle (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BooleanTrigger defines a concrete node class that extends class X3DTriggerNode. */

class BooleanTrigger : public X3DTriggerNode
{
  /** Assign double value in seconds to inputOnly SFTime field named "set_triggerTime". */
  void setTriggerTime (double timestamp);

  /** Provide bool value from outputOnly SFBool field named "triggerTrue". */
  bool getTriggerTrue ();

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BoundaryEnhancementVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class BoundaryEnhancementVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide float value [0,1) from inputOutput SFFloat field named "boundaryOpacity". */
  float getBoundaryOpacity ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "boundaryOpacity". */
  void setBoundaryOpacity (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "opacityFactor". */
  float getOpacityFactor ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "opacityFactor". */
  void setOpacityFactor (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "retainedOpacity". */
  float getRetainedOpacity ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "retainedOpacity". */
  void setRetainedOpacity (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BoundedPhysicsModel defines a concrete node class that extends class X3DParticlePhysicsModelNode. */

class BoundedPhysicsModel : public X3DParticlePhysicsModelNode
{
  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  X3DNode* getGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void setGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Box defines a concrete node class that extends class X3DGeometryNode. */

class Box : public X3DGeometryNode
{
  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "size". */
  float* getSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "size". */
  void setSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** BufferAudioSource defines a concrete node class that extends classs X3DSoundSourceNode, X3DUrlObject. */

class BufferAudioSource : public X3DSoundSourceNode, X3DUrlObject
{
  /** Provide float* value [-1,1) from inputOutput MFFloat field named "buffer". */
  float* getBuffer ();

  /** Provide number of primitive values in "buffer" array */
  int getNumBuffer ();

  /** Assign float* value [-1,1) to inputOutput MFFloat field named "buffer". */
  void setBuffer (float* values) throw (InvalidFieldValueException);

  /** Provide int value from outputOnly SFInt32 field named "bufferlength". */
  int getBufferlength ();

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide int value [0,inf) from outputOnly SFInt32 field named "length". */
  int getLength ();

  /** Provide float* value from inputOutput MFFloat field named "buffer". */
  float* getBuffer ();

  /** Provide number of primitive values in "buffer" array */
  int getNumBuffer ();

  /** Assign float* value to inputOutput MFFloat field named "buffer". */
  void setBuffer (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "buffer" */
  void setBuffer (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "bufferDuration". */
  double getBufferDuration ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "bufferDuration". */
  void setBufferDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "detune". */
  float getDetune ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "detune". */
  void setDetune (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide bool value from inputOutput SFBool field named "loop". */
  bool getLoop ();

  /** Assign bool value to inputOutput SFBool field named "loop". */
  void setLoop (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "loopEnd". */
  float getLoopEnd ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "loopEnd". */
  void setLoopEnd (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "loopStart". */
  float getLoopStart ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "loopStart". */
  void setLoopStart (float value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "numberOfChannels". */
  int getNumberOfChannels ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "numberOfChannels". */
  void setNumberOfChannels (int value) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "playbackRate". */
  float getPlaybackRate ();

  /** Assign float value to inputOutput SFFloat field named "playbackRate". */
  void setPlaybackRate (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "sampleRate". */
  float getSampleRate ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "sampleRate". */
  void setSampleRate (float value) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CADAssembly defines a concrete node class that extends classs X3DGroupingNode, X3DProductStructureChildNode. */

class CADAssembly : public X3DGroupingNode, X3DProductStructureChildNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CADFace defines a concrete node class that extends classs X3DProductStructureChildNode, X3DBoundedObject. */

class CADFace : public X3DProductStructureChildNode, X3DBoundedObject
{
  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide Shape|LOD|Transform value (using a properly typed node or X3DPrototypeInstance) from inputOutput Shape|LOD|Transform type field named "shape". */
  X3DNode* getShape ();

  /** Assign Shape|LOD|Transform value (using a properly typed node) to inputOutput Shape|LOD|Transform type field named "shape". */
  void setShape (X3DNode node);

  /** Assign Shape|LOD|Transform value (using a properly typed protoInstance) */
  void setShape (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CADLayer defines a concrete node class that extends class X3DGroupingNode. */

class CADLayer : public X3DGroupingNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CADPart defines a concrete node class that extends classs X3DProductStructureChildNode, X3DGroupingNode. */

class CADPart : public X3DProductStructureChildNode, X3DGroupingNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* getScaleOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void setScaleOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "addChildren". */
  void addChildren (CADFace* nodes);

  /** Assign single CADFace* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (CADFace node);

  /** Assign CADFace* value (using a properly typed protoInstance array) to inputOnly CADFace type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "removeChildren". */
  void removeChildren (CADFace* nodes);

  /** Assign single CADFace* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (CADFace node);

  /** Assign CADFace* value (using a properly typed protoInstance array) to inputOnly CADFace type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide CADFace* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput CADFace type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign CADFace* value (using a properly typed node array) to inputOutput CADFace type field named "children". */
  void setChildren (CADFace* nodes);

  /** Assign single CADFace* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (CADFace node);

  /** Assign CADFace* value (using a properly typed protoInstance array) to inputOutput CADFace type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign CADFace* value (using a properly typed node array) to inputOutput CADFace type field named "children". */
  void setChildren (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CartoonVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class CartoonVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide int value using RGB values [0..1] from inputOutput SFInt32 field named "colorSteps". */
  int getColorSteps ();

  /** Assign int value using RGB values [0..1] to inputOutput SFInt32 field named "colorSteps". */
  void setColorSteps (int color) throw (InvalidFieldValueException);

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "orthogonalColor". */
  float* getOrthogonalColor ();

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "orthogonalColor". */
  void setOrthogonalColor (float* color) throw (InvalidFieldValueException);

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "parallelColor". */
  float* getParallelColor ();

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "parallelColor". */
  void setParallelColor (float* color) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  X3DNode* getSurfaceNormals ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void setSurfaceNormals (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setSurfaceNormals (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ChannelMerger defines a concrete node class that extends class X3DSoundChannelNode. */

class ChannelMerger : public X3DSoundChannelNode
{
  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ChannelSelector defines a concrete node class that extends class X3DSoundChannelNode. */

class ChannelSelector : public X3DSoundChannelNode
{
  /** Provide int value [0,inf) from inputOutput SFInt32 field named "channelSelection". */
  int getChannelSelection ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "channelSelection". */
  void setChannelSelection (int value) throw (InvalidFieldValueException);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ChannelSplitter defines a concrete node class that extends class X3DSoundChannelNode. */

class ChannelSplitter : public X3DSoundChannelNode
{
  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Provide X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode type field named "outputs". */
  X3DNode* getOutputs ();

  /** Provide number of nodes in "outputs" array */
  int getNumOutputs ();

  /** Assign X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode* value (using a properly typed node array) to inputOutput X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode type field named "outputs". */
  void setOutputs (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "outputs" */
  void setOutputs (X3DNode node);

  /** Assign X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode* value (using a properly typed protoInstance array) to inputOutput X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode type field named "outputs". */
  void setOutputs (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Circle2D defines a concrete node class that extends class X3DGeometryNode. */

class Circle2D : public X3DGeometryNode
{
  /** Provide float value (0,inf) from initializeOnly SFFloat field named "radius". */
  float getRadius ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "radius". */
  void setRadius (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ClipPlane defines a concrete node class that extends class X3DChildNode. */

class ClipPlane : public X3DChildNode
{
  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide 4-tuple float* value (-inf,inf) from inputOutput SFVec4f field named "plane". */
  float* getPlane ();

  /** Assign 4-tuple float* value (-inf,inf) to inputOutput SFVec4f field named "plane". */
  void setPlane (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CollidableOffset defines a concrete node class that extends class X3DNBodyCollidableNode.
  * CollidableOffset repositions geometry relative to center of owning body. */

class CollidableOffset : public X3DNBodyCollidableNode
{
  /** Provide X3DNBodyCollidableNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DNBodyCollidableNode type field named "collidable". */
  X3DNode* getCollidable ();

  /** Assign X3DNBodyCollidableNode value (using a properly typed node) to initializeOnly X3DNBodyCollidableNode type field named "collidable". */
  void setCollidable (X3DNBodyCollidableNode node);

  /** Assign X3DNBodyCollidableNode value (using a properly typed protoInstance) */
  void setCollidable (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CollidableShape defines a concrete node class that extends class X3DNBodyCollidableNode.
  * CollidableShape connects the collision detection system, the rigid body model, and the renderable scene graph. */

class CollidableShape : public X3DNBodyCollidableNode
{
  /** Provide Shape value (using a properly typed node or X3DPrototypeInstance) from initializeOnly Shape type field named "shape". */
  X3DNode* getShape ();

  /** Assign Shape value (using a properly typed node) to initializeOnly Shape type field named "shape". */
  void setShape (Shape node);

  /** Assign Shape value (using a properly typed protoInstance) */
  void setShape (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Collision defines a concrete node class that extends classs X3DGroupingNode, X3DSensorNode. */

class Collision : public X3DGroupingNode, X3DSensorNode
{
  /** Provide double value in seconds from outputOnly SFTime field named "collideTime". */
  double getCollideTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide X3DChildNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DChildNode type field named "proxy". */
  X3DNode* getProxy ();

  /** Assign X3DChildNode value (using a properly typed node) to initializeOnly X3DChildNode type field named "proxy". */
  void setProxy (X3DChildNode node);

  /** Assign X3DChildNode value (using a properly typed protoInstance) */
  void setProxy (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CollisionCollection defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject.
  * CollisionCollection holds a collection of objects that can be managed as a single entity for resolution of inter-object collisions. */

class CollisionCollection : public X3DChildNode, X3DBoundedObject
{
  /** Provide MFString* value from inputOutput MFString field named "appliedParameters". */
  MFString* getAppliedParameters ();

  /** Provide number of primitive values in "appliedParameters" array */
  int getNumAppliedParameters ();

  /** Assign MFString* value to inputOutput MFString field named "appliedParameters". */
  void setAppliedParameters (MFString* values);

  /** Provide MFString* value Array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. from inputOutput MFString field named "appliedParameters". */
  MFString* getAppliedParameters ();

  /** Provide number of primitive values in "appliedParameters" array */
  int getNumAppliedParameters ();

  /** Assign MFString* value Array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. to inputOutput MFString field named "appliedParameters". */
  void setAppliedParameters (MFString* values);

  /** Assign single MFString* value Array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. as the MFString array for inputOutput field named "appliedParameters" */
  void setAppliedParameters (MFString value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "bounce". */
  float getBounce ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "bounce". */
  void setBounce (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide 2-tuple float* value (-inf,inf) from inputOutput SFVec2f field named "frictionCoefficients". */
  float* getFrictionCoefficients ();

  /** Assign 2-tuple float* value (-inf,inf) to inputOutput SFVec2f field named "frictionCoefficients". */
  void setFrictionCoefficients (float* value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "minBounceSpeed". */
  float getMinBounceSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "minBounceSpeed". */
  void setMinBounceSpeed (float value) throw (InvalidFieldValueException);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "slipFactors". */
  float* getSlipFactors ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "slipFactors". */
  void setSlipFactors (float* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessConstantForceMix". */
  float getSoftnessConstantForceMix ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessConstantForceMix". */
  void setSoftnessConstantForceMix (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessErrorCorrection". */
  float getSoftnessErrorCorrection ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessErrorCorrection". */
  void setSoftnessErrorCorrection (float value) throw (InvalidFieldValueException);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "surfaceSpeed". */
  float* getSurfaceSpeed ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "surfaceSpeed". */
  void setSurfaceSpeed (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  X3DNode* getCollidables ();

  /** Provide number of nodes in "collidables" array */
  int getNumCollidables ();

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void setCollidables (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "collidables" */
  void setCollidables (X3DNode node);

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed protoInstance array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void setCollidables (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CollisionSensor defines a concrete node class that extends class X3DSensorNode.
  * CollisionSensor generates collision-detection events. */

class CollisionSensor : public X3DSensorNode
{
  /** Provide X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DNBodyCollidableNode type field named "intersections". */
  X3DNode* getIntersections ();

  /** Provide number of nodes in "intersections" array */
  int getNumIntersections ();

  /** Provide Contact* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly Contact type field named "contacts". */
  X3DNode* getContacts ();

  /** Provide number of nodes in "contacts" array */
  int getNumContacts ();

  /** Provide CollisionCollection value (using a properly typed node or X3DPrototypeInstance) from inputOutput CollisionCollection type field named "collider". */
  X3DNode* getCollider ();

  /** Assign CollisionCollection value (using a properly typed node) to inputOutput CollisionCollection type field named "collider". */
  void setCollider (CollisionCollection node);

  /** Assign CollisionCollection value (using a properly typed protoInstance) */
  void setCollider (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CollisionSpace defines a concrete node class that extends class X3DNBodyCollisionSpaceNode.
  * CollisionSpace holds collection of objects considered together for resolution of inter-object collisions. */

class CollisionSpace : public X3DNBodyCollisionSpaceNode
{
  /** Provide bool value from inputOutput SFBool field named "useGeometry". */
  bool getUseGeometry ();

  /** Assign bool value to inputOutput SFBool field named "useGeometry". */
  void setUseGeometry (bool value);

  /** Provide X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  X3DNode* getCollidables ();

  /** Provide number of nodes in "collidables" array */
  int getNumCollidables ();

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void setCollidables (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "collidables" */
  void setCollidables (X3DNode node);

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed protoInstance array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void setCollidables (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Color defines a concrete node class that extends class X3DColorNode. */

class Color : public X3DColorNode
{
  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "color". */
  float* getColor ();

  /** Provide number of 3-tuple primitive values in "color" array */
  int getNumColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "color". */
  void setColor (float* colors) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ColorChaser defines a concrete node class that extends class X3DChaserNode. */

class ColorChaser : public X3DChaserNode
{
  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_destination". */
  void setDestination (float* value) throw (InvalidFieldValueException);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_value". */
  void setValue (float* value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from outputOnly SFColor field named "value_changed". */
  float* getValue ();

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialDestination". */
  void setInitialDestination (float* value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialValue". */
  float* getInitialValue ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialValue". */
  void setInitialValue (float* value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from initializeOnly SFTime field named "duration". */
  double getDuration ();

  /** Assign double value in seconds [0,inf) to initializeOnly SFTime field named "duration". */
  void setDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ColorDamper defines a concrete node class that extends class X3DDamperNode. */

class ColorDamper : public X3DDamperNode
{
  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_destination". */
  void setDestination (float* value) throw (InvalidFieldValueException);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_value". */
  void setValue (float* value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from outputOnly SFColor field named "value_changed". */
  float* getValue ();

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialDestination". */
  void setInitialDestination (float* value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialValue". */
  float* getInitialValue ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialValue". */
  void setInitialValue (float* value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tau". */
  double getTau ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tau". */
  void setTau (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float getTolerance ();

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void setTolerance (float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ColorInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class ColorInterpolator : public X3DInterpolatorNode
{
  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from outputOnly SFColor field named "value_changed". */
  float* getValue ();

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "keyValue". */
  void setKeyValue (float* values) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ColorRGBA defines a concrete node class that extends class X3DColorNode. */

class ColorRGBA : public X3DColorNode
{
  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput MFColorRGBA field named "color". */
  float* getColor ();

  /** Provide number of 4-tuple primitive values in "color" array */
  int getNumColor ();

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput MFColorRGBA field named "color". */
  void setColor (float* colors) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** component defines a concrete node class that extends class X3DStatement.
  * Functional summary: each added component statement indicates needed scene functionality support above the given X3D profile. */

class component : public X3DStatement
{
  /** Provide int value from inputOutput SFInt32 field named "level". */
  int getLevel ();

  /** Assign int value to inputOutput SFInt32 field named "level". */
  void setLevel (int value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide int value [1,5) from inputOutput SFInt32 field named "level". */
  int getLevel ();

  /** Assign int value [1,5) to inputOutput SFInt32 field named "level". */
  void setLevel (int value) throw (InvalidFieldValueException);
}
;/** ComposedCubeMapTexture defines a concrete node class that extends class X3DEnvironmentTextureNode. */

class ComposedCubeMapTexture : public X3DEnvironmentTextureNode
{
  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "backTexture". */
  X3DNode* getBackTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "backTexture". */
  void setBackTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setBackTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "bottomTexture". */
  X3DNode* getBottomTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "bottomTexture". */
  void setBottomTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setBottomTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "frontTexture". */
  X3DNode* getFrontTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "frontTexture". */
  void setFrontTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setFrontTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "leftTexture". */
  X3DNode* getLeftTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "leftTexture". */
  void setLeftTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setLeftTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "rightTexture". */
  X3DNode* getRightTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "rightTexture". */
  void setRightTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setRightTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "topTexture". */
  X3DNode* getTopTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "topTexture". */
  void setTopTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setTopTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ComposedShader defines a concrete node class that extends classs , X3DShaderNode, X3DProgrammableShaderObject.
  * ComposedShader can contain field declarations, but no CDATA section of plain-text source code, since programs are composed from child ShaderPart nodes. */

class ComposedShader : public X3DShaderNode, X3DProgrammableShaderObject
{
  /** Assign bool value to inputOnly SFBool field named "activate". */
  void setActivate (bool value);

  /** Provide bool value from outputOnly SFBool field named "isSelected". */
  bool getIsSelected ();

  /** Provide bool value from outputOnly SFBool field named "isValid". */
  bool getIsValid ();

  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  X3DNode* getField ();

  /** Provide number of nodes in "field" array */
  int getNumField ();

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (field* nodes);

  /** Assign single field* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "field" */
  void setField (field node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void setField (X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (X3DNode nodes);

  /** Provide ShaderPart* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput ShaderPart type field named "parts". */
  X3DNode* getParts ();

  /** Provide number of nodes in "parts" array */
  int getNumParts ();

  /** Assign ShaderPart* value (using a properly typed node array) to inputOutput ShaderPart type field named "parts". */
  void setParts (ShaderPart* nodes);

  /** Assign single ShaderPart* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "parts" */
  void setParts (ShaderPart node);

  /** Assign ShaderPart* value (using a properly typed protoInstance array) to inputOutput ShaderPart type field named "parts". */
  void setParts (X3DPrototypeInstance node);

  /** Assign ShaderPart* value (using a properly typed node array) to inputOutput ShaderPart type field named "parts". */
  void setParts (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ComposedTexture3D defines a concrete node class that extends class X3DTexture3DNode. */

class ComposedTexture3D : public X3DTexture3DNode
{
  /** Provide X3DTexture2DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DTexture2DNode type field named "texture". */
  X3DNode* getTexture ();

  /** Provide number of nodes in "texture" array */
  int getNumTexture ();

  /** Assign X3DTexture2DNode* value (using a properly typed node array) to inputOutput X3DTexture2DNode type field named "texture". */
  void setTexture (X3DTexture2DNode* nodes);

  /** Assign single X3DTexture2DNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "texture" */
  void setTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode* value (using a properly typed protoInstance array) to inputOutput X3DTexture2DNode type field named "texture". */
  void setTexture (X3DPrototypeInstance node);

  /** Assign X3DTexture2DNode* value (using a properly typed node array) to inputOutput X3DTexture2DNode type field named "texture". */
  void setTexture (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from initializeOnly SFBool field named "repeatS". */
  bool getRepeatS ();

  /** Assign bool value to initializeOnly SFBool field named "repeatS". */
  void setRepeatS (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatT". */
  bool getRepeatT ();

  /** Assign bool value to initializeOnly SFBool field named "repeatT". */
  void setRepeatT (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatR". */
  bool getRepeatR ();

  /** Assign bool value to initializeOnly SFBool field named "repeatR". */
  void setRepeatR (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ComposedVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class ComposedVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide X3DComposableVolumeRenderStyleNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  X3DNode* getRenderStyle ();

  /** Provide number of nodes in "renderStyle" array */
  int getNumRenderStyle ();

  /** Assign X3DComposableVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DComposableVolumeRenderStyleNode* nodes);

  /** Assign single X3DComposableVolumeRenderStyleNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "renderStyle" */
  void setRenderStyle (X3DComposableVolumeRenderStyleNode node);

  /** Assign X3DComposableVolumeRenderStyleNode* value (using a properly typed protoInstance array) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DPrototypeInstance node);

  /** Assign X3DComposableVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Cone defines a concrete node class that extends class X3DGeometryNode. */

class Cone : public X3DGeometryNode
{
  /** Provide bool value from inputOutput SFBool field named "bottom". */
  bool getBottom ();

  /** Assign bool value to inputOutput SFBool field named "bottom". */
  void setBottom (bool value);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "bottomRadius". */
  float getBottomRadius ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "bottomRadius". */
  void setBottomRadius (float value) throw (InvalidFieldValueException);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "height". */
  float getHeight ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "height". */
  void setHeight (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "side". */
  bool getSide ();

  /** Assign bool value to inputOutput SFBool field named "side". */
  void setSide (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ConeEmitter defines a concrete node class that extends class X3DParticleEmitterNode. */

class ConeEmitter : public X3DParticleEmitterNode
{
  /** Provide float value in radians [0,3.1416) from inputOutput SFFloat field named "angle". */
  float getAngle ();

  /** Assign float value in radians [0,3.1416) to inputOutput SFFloat field named "angle". */
  void setAngle (float angle) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "variation". */
  float getVariation ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "variation". */
  void setVariation (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "mass". */
  void setMass (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "surfaceArea". */
  float getSurfaceArea ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "surfaceArea". */
  void setSurfaceArea (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** connect defines a concrete node class that extends class X3DStatement.
  * Functional summary: connect statements define event-routing connections between node fields defined inside a ProtoBody declaration back to corresponding ProtoInterface fields. */

class connect : public X3DStatement
{
  /** Provide MFString value from inputOutput SFString field named "nodeField". */
  MFString getNodeField ();

  /** Assign MFString value to inputOutput SFString field named "nodeField". */
  void setNodeField (MFString value);

  /** Provide MFString value from inputOutput SFString field named "protoField". */
  MFString getProtoField ();

  /** Assign MFString value to inputOutput SFString field named "protoField". */
  void setProtoField (MFString value);
}
;/** Contact defines a concrete node class that extends class X3DNode.
  * Contact nodes are produced as output events when two collidable objects or spaces make contact. */

class Contact : public X3DNode
{
  /** Provide MFString* value from inputOutput MFString field named "appliedParameters". */
  MFString* getAppliedParameters ();

  /** Provide number of primitive values in "appliedParameters" array */
  int getNumAppliedParameters ();

  /** Assign MFString* value to inputOutput MFString field named "appliedParameters". */
  void setAppliedParameters (MFString* values);

  /** Provide MFString* value array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. from inputOutput MFString field named "appliedParameters". */
  MFString* getAppliedParameters ();

  /** Provide number of primitive values in "appliedParameters" array */
  int getNumAppliedParameters ();

  /** Assign MFString* value array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. to inputOutput MFString field named "appliedParameters". */
  void setAppliedParameters (MFString* values);

  /** Assign single MFString* value array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. as the MFString array for inputOutput field named "appliedParameters" */
  void setAppliedParameters (MFString value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "bounce". */
  float getBounce ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "bounce". */
  void setBounce (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "contactNormal". */
  float* getContactNormal ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "contactNormal". */
  void setContactNormal (float* value);

  /** Provide float value from inputOutput SFFloat field named "depth". */
  float getDepth ();

  /** Assign float value to inputOutput SFFloat field named "depth". */
  void setDepth (float value);

  /** Provide 2-tuple float* value (-inf,inf) from inputOutput SFVec2f field named "frictionCoefficients". */
  float* getFrictionCoefficients ();

  /** Assign 2-tuple float* value (-inf,inf) to inputOutput SFVec2f field named "frictionCoefficients". */
  void setFrictionCoefficients (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "frictionDirection". */
  float* getFrictionDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "frictionDirection". */
  void setFrictionDirection (float* value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "minBounceSpeed". */
  float getMinBounceSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "minBounceSpeed". */
  void setMinBounceSpeed (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "slipCoefficients". */
  float* getSlipCoefficients ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "slipCoefficients". */
  void setSlipCoefficients (float* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessConstantForceMix". */
  float getSoftnessConstantForceMix ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessConstantForceMix". */
  void setSoftnessConstantForceMix (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessErrorCorrection". */
  float getSoftnessErrorCorrection ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessErrorCorrection". */
  void setSoftnessErrorCorrection (float value) throw (InvalidFieldValueException);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "surfaceSpeed". */
  float* getSurfaceSpeed ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "surfaceSpeed". */
  void setSurfaceSpeed (float* value);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  X3DNode* getBody1 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void setBody1 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  X3DNode* getBody2 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void setBody2 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNBodyCollidableNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNBodyCollidableNode type field named "geometry1". */
  X3DNode* getGeometry1 ();

  /** Assign X3DNBodyCollidableNode value (using a properly typed node) to inputOutput X3DNBodyCollidableNode type field named "geometry1". */
  void setGeometry1 (X3DNBodyCollidableNode node);

  /** Assign X3DNBodyCollidableNode value (using a properly typed protoInstance) */
  void setGeometry1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNBodyCollidableNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNBodyCollidableNode type field named "geometry2". */
  X3DNode* getGeometry2 ();

  /** Assign X3DNBodyCollidableNode value (using a properly typed node) to inputOutput X3DNBodyCollidableNode type field named "geometry2". */
  void setGeometry2 (X3DNBodyCollidableNode node);

  /** Assign X3DNBodyCollidableNode value (using a properly typed protoInstance) */
  void setGeometry2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Contour2D defines a concrete node class that extends class X3DNode. */

class Contour2D : public X3DNode
{
  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DNode node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed protoInstance array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DNode node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed protoInstance array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Provide NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput NurbsCurve2D|ContourPolyline2D type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array) to inputOutput NurbsCurve2D|ContourPolyline2D type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed protoInstance array) to inputOutput NurbsCurve2D|ContourPolyline2D type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ContourPolyline2D defines a concrete node class that extends class X3DNurbsControlCurveNode. */

class ContourPolyline2D : public X3DNurbsControlCurveNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 2-tuple double* value from inputOutput MFVec2d field named "controlPoint". */
  double* getControlPoint ();

  /** Provide number of 2-tuple primitive values in "controlPoint" array */
  int getNumControlPoint ();

  /** Assign 2-tuple double* value to inputOutput MFVec2d field named "controlPoint". */
  void setControlPoint (double* values);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Convolver defines a concrete node class that extends class X3DSoundProcessingNode. */

class Convolver : public X3DSoundProcessingNode
{
  /** Provide float* value [-1,1) from inputOutput MFFloat field named "buffer". */
  float* getBuffer ();

  /** Provide number of primitive values in "buffer" array */
  int getNumBuffer ();

  /** Assign float* value [-1,1) to inputOutput MFFloat field named "buffer". */
  void setBuffer (float* values) throw (InvalidFieldValueException);

  /** Provide float* value from inputOutput MFFloat field named "buffer". */
  float* getBuffer ();

  /** Provide number of primitive values in "buffer" array */
  int getNumBuffer ();

  /** Assign float* value to inputOutput MFFloat field named "buffer". */
  void setBuffer (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "buffer" */
  void setBuffer (float value);

  /** Provide bool value from inputOutput SFBool field named "normalize". */
  bool getNormalize ();

  /** Assign bool value to inputOutput SFBool field named "normalize". */
  void setNormalize (bool value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tailTime". */
  double getTailTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tailTime". */
  void setTailTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Coordinate defines a concrete node class that extends class X3DCoordinateNode. */

class Coordinate : public X3DCoordinateNode
{
  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "point". */
  float* getPoint ();

  /** Provide number of 3-tuple primitive values in "point" array */
  int getNumPoint ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "point". */
  void setPoint (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CoordinateChaser defines a concrete node class that extends class X3DChaserNode. */

class CoordinateChaser : public X3DChaserNode
{
  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_destination". */
  void setDestination (float* values);

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_value". */
  void setValue (float* values);

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int getNumValue ();

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialDestination". */
  float* getInitialDestination ();

  /** Provide number of 3-tuple primitive values in "initialDestination" array */
  int getNumInitialDestination ();

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialDestination". */
  void setInitialDestination (float* values);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialValue". */
  float* getInitialValue ();

  /** Provide number of 3-tuple primitive values in "initialValue" array */
  int getNumInitialValue ();

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialValue". */
  void setInitialValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from initializeOnly SFTime field named "duration". */
  double getDuration ();

  /** Assign double value in seconds [0,inf) to initializeOnly SFTime field named "duration". */
  void setDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CoordinateDamper defines a concrete node class that extends class X3DDamperNode. */

class CoordinateDamper : public X3DDamperNode
{
  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_destination". */
  void setDestination (float* values);

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_value". */
  void setValue (float* values);

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int getNumValue ();

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialDestination". */
  float* getInitialDestination ();

  /** Provide number of 3-tuple primitive values in "initialDestination" array */
  int getNumInitialDestination ();

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialDestination". */
  void setInitialDestination (float* values);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialValue". */
  float* getInitialValue ();

  /** Provide number of 3-tuple primitive values in "initialValue" array */
  int getNumInitialValue ();

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialValue". */
  void setInitialValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tau". */
  double getTau ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tau". */
  void setTau (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float getTolerance ();

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void setTolerance (float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CoordinateDouble defines a concrete node class that extends class X3DCoordinateNode. */

class CoordinateDouble : public X3DCoordinateNode
{
  /** Provide 3-tuple double* value from inputOutput MFVec3d field named "point". */
  double* getPoint ();

  /** Provide number of 3-tuple primitive values in "point" array */
  int getNumPoint ();

  /** Assign 3-tuple double* value to inputOutput MFVec3d field named "point". */
  void setPoint (double* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CoordinateInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class CoordinateInterpolator : public X3DInterpolatorNode
{
  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int getNumValue ();

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void setKeyValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CoordinateInterpolator2D defines a concrete node class that extends class X3DInterpolatorNode. */

class CoordinateInterpolator2D : public X3DInterpolatorNode
{
  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "value_changed". */
  float* getValue ();

  /** Provide number of 2-tuple primitive values in "value_changed" array */
  int getNumValue ();

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 2-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyValue". */
  void setKeyValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Cylinder defines a concrete node class that extends class X3DGeometryNode. */

class Cylinder : public X3DGeometryNode
{
  /** Provide bool value from inputOutput SFBool field named "bottom". */
  bool getBottom ();

  /** Assign bool value to inputOutput SFBool field named "bottom". */
  void setBottom (bool value);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "height". */
  float getHeight ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "height". */
  void setHeight (float value) throw (InvalidFieldValueException);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "radius". */
  float getRadius ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "radius". */
  void setRadius (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "side". */
  bool getSide ();

  /** Assign bool value to inputOutput SFBool field named "side". */
  void setSide (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide bool value from inputOutput SFBool field named "top". */
  bool getTop ();

  /** Assign bool value to inputOutput SFBool field named "top". */
  void setTop (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** CylinderSensor defines a concrete node class that extends class X3DDragSensorNode. */

class CylinderSensor : public X3DDragSensorNode
{
  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "rotation_changed". */
  float* getRotation ();

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "axisRotation". */
  float* getAxisRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "axisRotation". */
  void setAxisRotation (float* value);

  /** Provide float value in radians [0,1.5708) from inputOutput SFFloat field named "diskAngle". */
  float getDiskAngle ();

  /** Assign float value in radians [0,1.5708) to inputOutput SFFloat field named "diskAngle". */
  void setDiskAngle (float angle) throw (InvalidFieldValueException);

  /** Provide float value in radians (-6.2832,6.2832) from inputOutput SFFloat field named "maxAngle". */
  float getMaxAngle ();

  /** Assign float value in radians (-6.2832,6.2832) to inputOutput SFFloat field named "maxAngle". */
  void setMaxAngle (float angle) throw (InvalidFieldValueException);

  /** Provide float value in radians (-6.2832,6.2832) from inputOutput SFFloat field named "minAngle". */
  float getMinAngle ();

  /** Assign float value in radians (-6.2832,6.2832) to inputOutput SFFloat field named "minAngle". */
  void setMinAngle (float angle) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "offset". */
  float getOffset ();

  /** Assign float value to inputOutput SFFloat field named "offset". */
  void setOffset (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "trackPoint_changed". */
  float* getTrackPoint ();

  /** Provide bool value from inputOutput SFBool field named "autoOffset". */
  bool getAutoOffset ();

  /** Assign bool value to inputOutput SFBool field named "autoOffset". */
  void setAutoOffset (bool value);

  /** Provide bool value from outputOnly SFBool field named "isOver". */
  bool getIsOver ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Delay defines a concrete node class that extends class X3DSoundProcessingNode. */

class Delay : public X3DSoundProcessingNode
{
  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "delayTime". */
  double getDelayTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "delayTime". */
  void setDelayTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "maxDelayTime". */
  double getMaxDelayTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "maxDelayTime". */
  void setMaxDelayTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tailTime". */
  double getTailTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tailTime". */
  void setTailTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** DirectionalLight defines a concrete node class that extends class X3DLightNode.
  * DirectionalLight might not be scoped by parent Group or Transform at levels 1 or 2. */

class DirectionalLight : public X3DLightNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide bool value from inputOutput SFBool field named "global". */
  bool getGlobal ();

  /** Assign bool value to inputOutput SFBool field named "global". */
  void setGlobal (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide bool value from inputOutput SFBool field named "shadows". */
  bool getShadows ();

  /** Assign bool value to inputOutput SFBool field named "shadows". */
  void setShadows (bool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float getShadowIntensity ();

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void setShadowIntensity (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** DISEntityManager defines a concrete node class that extends class X3DChildNode. */

class DISEntityManager : public X3DChildNode
{
  /** Provide MFString value from inputOutput SFString field named "address". */
  MFString getAddress ();

  /** Assign MFString value to inputOutput SFString field named "address". */
  void setAddress (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int getApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void setApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int getPort ();

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void setPort (int value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int getSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void setSiteID (int value);

  /** Provide EspduTransform* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly EspduTransform type field named "addedEntities". */
  X3DNode* getAddedEntities ();

  /** Provide number of nodes in "addedEntities" array */
  int getNumAddedEntities ();

  /** Provide EspduTransform* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly EspduTransform type field named "removedEntities". */
  X3DNode* getRemovedEntities ();

  /** Provide number of nodes in "removedEntities" array */
  int getNumRemovedEntities ();

  /** Provide DISEntityTypeMapping* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput DISEntityTypeMapping type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign DISEntityTypeMapping* value (using a properly typed node array) to inputOutput DISEntityTypeMapping type field named "children". */
  void setChildren (DISEntityTypeMapping* nodes);

  /** Assign single DISEntityTypeMapping* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (DISEntityTypeMapping node);

  /** Assign DISEntityTypeMapping* value (using a properly typed protoInstance array) to inputOutput DISEntityTypeMapping type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign DISEntityTypeMapping* value (using a properly typed node array) to inputOutput DISEntityTypeMapping type field named "children". */
  void setChildren (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** DISEntityTypeMapping defines a concrete node class that extends classs X3DInfoNode, X3DUrlObject. */

class DISEntityTypeMapping : public X3DInfoNode, X3DUrlObject
{
  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "category". */
  int getCategory ();

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "category". */
  void setCategory (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,65535) from initializeOnly SFInt32 field named "country". */
  int getCountry ();

  /** Assign int value [0,65535) to initializeOnly SFInt32 field named "country". */
  void setCountry (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "domain". */
  int getDomain ();

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "domain". */
  void setDomain (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "extra". */
  int getExtra ();

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "extra". */
  void setExtra (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "kind". */
  int getKind ();

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "kind". */
  void setKind (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "specific". */
  int getSpecific ();

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "specific". */
  void setSpecific (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "subcategory". */
  int getSubcategory ();

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "subcategory". */
  void setSubcategory (int value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Disk2D defines a concrete node class that extends class X3DGeometryNode. */

class Disk2D : public X3DGeometryNode
{
  /** Provide float value [0,inf) from initializeOnly SFFloat field named "innerRadius". */
  float getInnerRadius ();

  /** Assign float value [0,inf) to initializeOnly SFFloat field named "innerRadius". */
  void setInnerRadius (float value) throw (InvalidFieldValueException);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "outerRadius". */
  float getOuterRadius ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "outerRadius". */
  void setOuterRadius (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** DoubleAxisHingeJoint defines a concrete node class that extends class X3DRigidJointNode.
  * DoubleAxisHingeJoint has two independent axes located around a common anchor point. */

class DoubleAxisHingeJoint : public X3DRigidJointNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  float* getBody1AnchorPoint ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1Axis". */
  float* getBody1Axis ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  float* getBody2AnchorPoint ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2Axis". */
  float* getBody2Axis ();

  /** Provide float value in radians from outputOnly SFFloat field named "hinge1Angle". */
  float getHinge1Angle ();

  /** Provide float value in radians from outputOnly SFFloat field named "hinge1AngleRate". */
  float getHinge1AngleRate ();

  /** Provide float value in radians from outputOnly SFFloat field named "hinge2Angle". */
  float getHinge2Angle ();

  /** Provide float value in radians from outputOnly SFFloat field named "hinge2AngleRate". */
  float getHinge2AngleRate ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  float* getAnchorPoint ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void setAnchorPoint (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis1". */
  float* getAxis1 ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis1". */
  void setAxis1 (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis2". */
  float* getAxis2 ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis2". */
  void setAxis2 (float* value);

  /** Provide float value from inputOutput SFFloat field named "desiredAngularVelocity1". */
  float getDesiredAngularVelocity1 ();

  /** Assign float value to inputOutput SFFloat field named "desiredAngularVelocity1". */
  void setDesiredAngularVelocity1 (float value);

  /** Provide float value from inputOutput SFFloat field named "desiredAngularVelocity2". */
  float getDesiredAngularVelocity2 ();

  /** Assign float value to inputOutput SFFloat field named "desiredAngularVelocity2". */
  void setDesiredAngularVelocity2 (float value);

  /** Provide float value in radians from inputOutput SFFloat field named "maxAngle1". */
  float getMaxAngle1 ();

  /** Assign float value in radians to inputOutput SFFloat field named "maxAngle1". */
  void setMaxAngle1 (float angle);

  /** Provide float value from inputOutput SFFloat field named "maxTorque1". */
  float getMaxTorque1 ();

  /** Assign float value to inputOutput SFFloat field named "maxTorque1". */
  void setMaxTorque1 (float value);

  /** Provide float value from inputOutput SFFloat field named "maxTorque2". */
  float getMaxTorque2 ();

  /** Assign float value to inputOutput SFFloat field named "maxTorque2". */
  void setMaxTorque2 (float value);

  /** Provide float value in radians from inputOutput SFFloat field named "minAngle1". */
  float getMinAngle1 ();

  /** Assign float value in radians to inputOutput SFFloat field named "minAngle1". */
  void setMinAngle1 (float angle);

  /** Provide float value from inputOutput SFFloat field named "stop1Bounce". */
  float getStop1Bounce ();

  /** Assign float value to inputOutput SFFloat field named "stop1Bounce". */
  void setStop1Bounce (float value);

  /** Provide float value from inputOutput SFFloat field named "stop1ConstantForceMix". */
  float getStop1ConstantForceMix ();

  /** Assign float value to inputOutput SFFloat field named "stop1ConstantForceMix". */
  void setStop1ConstantForceMix (float value);

  /** Provide float value from inputOutput SFFloat field named "stop1ErrorCorrection". */
  float getStop1ErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "stop1ErrorCorrection". */
  void setStop1ErrorCorrection (float value);

  /** Provide float value from inputOutput SFFloat field named "suspensionErrorCorrection". */
  float getSuspensionErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "suspensionErrorCorrection". */
  void setSuspensionErrorCorrection (float value);

  /** Provide float value from inputOutput SFFloat field named "suspensionForce". */
  float getSuspensionForce ();

  /** Assign float value to inputOutput SFFloat field named "suspensionForce". */
  void setSuspensionForce (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "forceOutput" */
  void setForceOutput (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  X3DNode* getBody1 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void setBody1 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  X3DNode* getBody2 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void setBody2 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** DynamicsCompressor defines a concrete node class that extends class X3DSoundProcessingNode. */

class DynamicsCompressor : public X3DSoundProcessingNode
{
  /** Provide float value (-inf,0) from outputOnly SFFloat field named "reduction". */
  float getReduction ();

  /** Provide float value [0,inf) from inputOutput SFFloat field named "attack". */
  float getAttack ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "attack". */
  void setAttack (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "knee". */
  float getKnee ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "knee". */
  void setKnee (float value) throw (InvalidFieldValueException);

  /** Provide float value [1,20) from inputOutput SFFloat field named "ratio". */
  float getRatio ();

  /** Assign float value [1,20) to inputOutput SFFloat field named "ratio". */
  void setRatio (float value) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "release". */
  double getRelease ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "release". */
  void setRelease (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value [-100,0) from inputOutput SFFloat field named "threshold". */
  float getThreshold ();

  /** Assign float value [-100,0) to inputOutput SFFloat field named "threshold". */
  void setThreshold (float value) throw (InvalidFieldValueException);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tailTime". */
  double getTailTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tailTime". */
  void setTailTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** EaseInEaseOut defines a concrete node class that extends class X3DChildNode. */

class EaseInEaseOut : public X3DChildNode
{
  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float value from outputOnly SFFloat field named "modifiedFraction_changed". */
  float getModifiedFraction ();

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "easeInEaseOut". */
  float* getEaseInEaseOut ();

  /** Provide number of 2-tuple primitive values in "easeInEaseOut" array */
  int getNumEaseInEaseOut ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "easeInEaseOut". */
  void setEaseInEaseOut (float* values);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** EdgeEnhancementVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class EdgeEnhancementVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "edgeColor". */
  float* getEdgeColor ();

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "edgeColor". */
  void setEdgeColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value [0,3.1416) from inputOutput SFFloat field named "gradientThreshold". */
  float getGradientThreshold ();

  /** Assign float value [0,3.1416) to inputOutput SFFloat field named "gradientThreshold". */
  void setGradientThreshold (float value) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  X3DNode* getSurfaceNormals ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void setSurfaceNormals (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setSurfaceNormals (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ElevationGrid defines a concrete node class that extends class X3DGeometryNode. */

class ElevationGrid : public X3DGeometryNode
{
  /** Assign float* value to inputOnly MFFloat field named "set_height". */
  void setHeight (float* values);

  /** Assign single float* value as the MFFloat array for inputOnly field named "set_height" */
  void setHeight (float value);

  /** Provide float* value from initializeOnly MFFloat field named "height". */
  float* getHeight ();

  /** Provide number of primitive values in "height" array */
  int getNumHeight ();

  /** Assign float* value to initializeOnly MFFloat field named "height". */
  void setHeight (float* values);

  /** Assign single float* value as the MFFloat array for initializeOnly field named "height" */
  void setHeight (float value);

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide float value in radians [0,inf) from initializeOnly SFFloat field named "creaseAngle". */
  float getCreaseAngle ();

  /** Assign float value in radians [0,inf) to initializeOnly SFFloat field named "creaseAngle". */
  void setCreaseAngle (float angle) throw (InvalidFieldValueException);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "xDimension". */
  int getXDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "xDimension". */
  void setXDimension (int value) throw (InvalidFieldValueException);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "xSpacing". */
  float getXSpacing ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "xSpacing". */
  void setXSpacing (float value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "zDimension". */
  int getZDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "zDimension". */
  void setZDimension (int value) throw (InvalidFieldValueException);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "zSpacing". */
  float getZSpacing ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "zSpacing". */
  void setZSpacing (float value) throw (InvalidFieldValueException);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void setTexCoord (X3DSingleTextureCoordinateNode node);

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** EnvironmentLight defines a concrete node class that extends class X3DLightNode.
  * TODO add contained nodes. */

class EnvironmentLight : public X3DLightNode
{
  /** Provide float* value from inputOutput MFFloat field named "diffuseCoefficients". */
  float* getDiffuseCoefficients ();

  /** Provide number of primitive values in "diffuseCoefficients" array */
  int getNumDiffuseCoefficients ();

  /** Assign float* value to inputOutput MFFloat field named "diffuseCoefficients". */
  void setDiffuseCoefficients (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "diffuseCoefficients" */
  void setDiffuseCoefficients (float value);

  /** Provide bool value from inputOutput SFBool field named "global". */
  bool getGlobal ();

  /** Assign bool value to inputOutput SFBool field named "global". */
  void setGlobal (bool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "diffuse". */
  X3DNode* getDiffuse ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "diffuse". */
  void setDiffuse (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setDiffuse (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DEnvironmentTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DEnvironmentTextureNode type field named "diffuseTexture". */
  X3DNode* getDiffuseTexture ();

  /** Assign X3DEnvironmentTextureNode value (using a properly typed node) to inputOutput X3DEnvironmentTextureNode type field named "diffuseTexture". */
  void setDiffuseTexture (X3DEnvironmentTextureNode node);

  /** Assign X3DEnvironmentTextureNode value (using a properly typed protoInstance) */
  void setDiffuseTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DEnvironmentTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DEnvironmentTextureNode type field named "specularTexture". */
  X3DNode* getSpecularTexture ();

  /** Assign X3DEnvironmentTextureNode value (using a properly typed node) to inputOutput X3DEnvironmentTextureNode type field named "specularTexture". */
  void setSpecularTexture (X3DEnvironmentTextureNode node);

  /** Assign X3DEnvironmentTextureNode value (using a properly typed protoInstance) */
  void setSpecularTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide bool value from inputOutput SFBool field named "shadows". */
  bool getShadows ();

  /** Assign bool value to inputOutput SFBool field named "shadows". */
  void setShadows (bool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float getShadowIntensity ();

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void setShadowIntensity (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** EspduTransform defines a concrete node class that extends classs X3DGroupingNode, X3DNetworkSensorNode. */

class EspduTransform : public X3DGroupingNode, X3DNetworkSensorNode
{
  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue0". */
  void setArticulationParameterValue0 (float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue1". */
  void setArticulationParameterValue1 (float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue2". */
  void setArticulationParameterValue2 (float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue3". */
  void setArticulationParameterValue3 (float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue4". */
  void setArticulationParameterValue4 (float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue5". */
  void setArticulationParameterValue5 (float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue6". */
  void setArticulationParameterValue6 (float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue7". */
  void setArticulationParameterValue7 (float value);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue0_changed". */
  float getArticulationParameterValue0 ();

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue1_changed". */
  float getArticulationParameterValue1 ();

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue2_changed". */
  float getArticulationParameterValue2 ();

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue3_changed". */
  float getArticulationParameterValue3 ();

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue4_changed". */
  float getArticulationParameterValue4 ();

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue5_changed". */
  float getArticulationParameterValue5 ();

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue6_changed". */
  float getArticulationParameterValue6 ();

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue7_changed". */
  float getArticulationParameterValue7 ();

  /** Provide double value in seconds from outputOnly SFTime field named "collideTime". */
  double getCollideTime ();

  /** Provide double value in seconds from outputOnly SFTime field named "detonateTime". */
  double getDetonateTime ();

  /** Provide double value in seconds from outputOnly SFTime field named "firedTime". */
  double getFiredTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isCollided". */
  bool getIsCollided ();

  /** Provide bool value from outputOnly SFBool field named "isDetonated". */
  bool getIsDetonated ();

  /** Provide bool value from outputOnly SFBool field named "isNetworkReader". */
  bool getIsNetworkReader ();

  /** Provide bool value from outputOnly SFBool field named "isNetworkWriter". */
  bool getIsNetworkWriter ();

  /** Provide bool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  bool getIsRtpHeaderHeard ();

  /** Provide bool value from outputOnly SFBool field named "isStandAlone". */
  bool getIsStandAlone ();

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "timestamp". */
  double getTimestamp ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide MFString value from inputOutput SFString field named "marking". */
  MFString getMarking ();

  /** Assign MFString value to inputOutput SFString field named "marking". */
  void setMarking (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int getSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void setSiteID (int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int getApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void setApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int getEntityID ();

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void setEntityID (int value);

  /** Provide int value from inputOutput SFInt32 field named "forceID". */
  int getForceID ();

  /** Assign int value to inputOutput SFInt32 field named "forceID". */
  void setForceID (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityKind". */
  int getEntityKind ();

  /** Assign int value to inputOutput SFInt32 field named "entityKind". */
  void setEntityKind (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityDomain". */
  int getEntityDomain ();

  /** Assign int value to inputOutput SFInt32 field named "entityDomain". */
  void setEntityDomain (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityCountry". */
  int getEntityCountry ();

  /** Assign int value to inputOutput SFInt32 field named "entityCountry". */
  void setEntityCountry (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityCategory". */
  int getEntityCategory ();

  /** Assign int value to inputOutput SFInt32 field named "entityCategory". */
  void setEntityCategory (int value);

  /** Provide int value from inputOutput SFInt32 field named "entitySubcategory". */
  int getEntitySubcategory ();

  /** Assign int value to inputOutput SFInt32 field named "entitySubcategory". */
  void setEntitySubcategory (int value);

  /** Provide int value from inputOutput SFInt32 field named "entitySpecific". */
  int getEntitySpecific ();

  /** Assign int value to inputOutput SFInt32 field named "entitySpecific". */
  void setEntitySpecific (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityExtra". */
  int getEntityExtra ();

  /** Assign int value to inputOutput SFInt32 field named "entityExtra". */
  void setEntityExtra (int value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "readInterval". */
  double getReadInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "readInterval". */
  void setReadInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "writeInterval". */
  double getWriteInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "writeInterval". */
  void setWriteInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "networkMode". */
  MFString getNetworkMode ();

  /** Assign MFString value to inputOutput SFString field named "networkMode". */
  void setNetworkMode (MFString value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* getScaleOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void setScaleOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide MFString value from inputOutput SFString field named "address". */
  MFString getAddress ();

  /** Assign MFString value to inputOutput SFString field named "address". */
  void setAddress (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int getPort ();

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void setPort (int value);

  /** Provide MFString value from inputOutput SFString field named "multicastRelayHost". */
  MFString getMulticastRelayHost ();

  /** Assign MFString value to inputOutput SFString field named "multicastRelayHost". */
  void setMulticastRelayHost (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int getMulticastRelayPort ();

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void setMulticastRelayPort (int value);

  /** Provide bool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  bool getRtpHeaderExpected ();

  /** Assign bool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void setRtpHeaderExpected (bool value);

  /** Provide int value from inputOutput SFInt32 field named "deadReckoning". */
  int getDeadReckoning ();

  /** Assign int value to inputOutput SFInt32 field named "deadReckoning". */
  void setDeadReckoning (int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "linearVelocity". */
  float* getLinearVelocity ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "linearVelocity". */
  void setLinearVelocity (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "linearAcceleration". */
  float* getLinearAcceleration ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "linearAcceleration". */
  void setLinearAcceleration (float* value);

  /** Provide bool value from inputOutput SFBool field named "fired1". */
  bool getFired1 ();

  /** Assign bool value to inputOutput SFBool field named "fired1". */
  void setFired1 (bool value);

  /** Provide bool value from inputOutput SFBool field named "fired2". */
  bool getFired2 ();

  /** Assign bool value to inputOutput SFBool field named "fired2". */
  void setFired2 (bool value);

  /** Provide int value from inputOutput SFInt32 field named "collisionType". */
  int getCollisionType ();

  /** Assign int value to inputOutput SFInt32 field named "collisionType". */
  void setCollisionType (int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "detonationLocation". */
  float* getDetonationLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "detonationLocation". */
  void setDetonationLocation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "detonationRelativeLocation". */
  float* getDetonationRelativeLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "detonationRelativeLocation". */
  void setDetonationRelativeLocation (float* value);

  /** Provide int value from inputOutput SFInt32 field named "detonationResult". */
  int getDetonationResult ();

  /** Assign int value to inputOutput SFInt32 field named "detonationResult". */
  void setDetonationResult (int value);

  /** Provide int value from inputOutput SFInt32 field named "eventApplicationID". */
  int getEventApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "eventApplicationID". */
  void setEventApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "eventEntityID". */
  int getEventEntityID ();

  /** Assign int value to inputOutput SFInt32 field named "eventEntityID". */
  void setEventEntityID (int value);

  /** Provide int value from inputOutput SFInt32 field named "eventNumber". */
  int getEventNumber ();

  /** Assign int value to inputOutput SFInt32 field named "eventNumber". */
  void setEventNumber (int value);

  /** Provide int value from inputOutput SFInt32 field named "eventSiteID". */
  int getEventSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "eventSiteID". */
  void setEventSiteID (int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "munitionStartPoint". */
  float* getMunitionStartPoint ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "munitionStartPoint". */
  void setMunitionStartPoint (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "munitionEndPoint". */
  float* getMunitionEndPoint ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "munitionEndPoint". */
  void setMunitionEndPoint (float* value);

  /** Provide int value from inputOutput SFInt32 field named "munitionSiteID". */
  int getMunitionSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "munitionSiteID". */
  void setMunitionSiteID (int value);

  /** Provide int value from inputOutput SFInt32 field named "munitionApplicationID". */
  int getMunitionApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "munitionApplicationID". */
  void setMunitionApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "munitionEntityID". */
  int getMunitionEntityID ();

  /** Assign int value to inputOutput SFInt32 field named "munitionEntityID". */
  void setMunitionEntityID (int value);

  /** Provide int value from inputOutput SFInt32 field named "fireMissionIndex". */
  int getFireMissionIndex ();

  /** Assign int value to inputOutput SFInt32 field named "fireMissionIndex". */
  void setFireMissionIndex (int value);

  /** Provide int value from inputOutput SFInt32 field named "warhead". */
  int getWarhead ();

  /** Assign int value to inputOutput SFInt32 field named "warhead". */
  void setWarhead (int value);

  /** Provide int value from inputOutput SFInt32 field named "fuse". */
  int getFuse ();

  /** Assign int value to inputOutput SFInt32 field named "fuse". */
  void setFuse (int value);

  /** Provide int value from inputOutput SFInt32 field named "munitionQuantity". */
  int getMunitionQuantity ();

  /** Assign int value to inputOutput SFInt32 field named "munitionQuantity". */
  void setMunitionQuantity (int value);

  /** Provide int value from inputOutput SFInt32 field named "firingRate". */
  int getFiringRate ();

  /** Assign int value to inputOutput SFInt32 field named "firingRate". */
  void setFiringRate (int value);

  /** Provide float value from inputOutput SFFloat field named "firingRange". */
  float getFiringRange ();

  /** Assign float value to inputOutput SFFloat field named "firingRange". */
  void setFiringRange (float value);

  /** Provide int value from inputOutput SFInt32 field named "articulationParameterCount". */
  int getArticulationParameterCount ();

  /** Assign int value to inputOutput SFInt32 field named "articulationParameterCount". */
  void setArticulationParameterCount (int value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterDesignatorArray". */
  MFInt32 getArticulationParameterDesignatorArray ();

  /** Provide number of primitive values in "articulationParameterDesignatorArray" array */
  int getNumArticulationParameterDesignatorArray ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterDesignatorArray". */
  void setArticulationParameterDesignatorArray (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterDesignatorArray" */
  void setArticulationParameterDesignatorArray (SFInt32 value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterChangeIndicatorArray". */
  MFInt32 getArticulationParameterChangeIndicatorArray ();

  /** Provide number of primitive values in "articulationParameterChangeIndicatorArray" array */
  int getNumArticulationParameterChangeIndicatorArray ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterChangeIndicatorArray". */
  void setArticulationParameterChangeIndicatorArray (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterChangeIndicatorArray" */
  void setArticulationParameterChangeIndicatorArray (SFInt32 value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterIdPartAttachedToArray". */
  MFInt32 getArticulationParameterIdPartAttachedToArray ();

  /** Provide number of primitive values in "articulationParameterIdPartAttachedToArray" array */
  int getNumArticulationParameterIdPartAttachedToArray ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterIdPartAttachedToArray". */
  void setArticulationParameterIdPartAttachedToArray (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterIdPartAttachedToArray" */
  void setArticulationParameterIdPartAttachedToArray (SFInt32 value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterTypeArray". */
  MFInt32 getArticulationParameterTypeArray ();

  /** Provide number of primitive values in "articulationParameterTypeArray" array */
  int getNumArticulationParameterTypeArray ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterTypeArray". */
  void setArticulationParameterTypeArray (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterTypeArray" */
  void setArticulationParameterTypeArray (SFInt32 value);

  /** Provide float* value from inputOutput MFFloat field named "articulationParameterArray". */
  float* getArticulationParameterArray ();

  /** Provide number of primitive values in "articulationParameterArray" array */
  int getNumArticulationParameterArray ();

  /** Assign float* value to inputOutput MFFloat field named "articulationParameterArray". */
  void setArticulationParameterArray (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "articulationParameterArray" */
  void setArticulationParameterArray (float value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  double* getGeoCoords ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void setGeoCoords (double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ExplosionEmitter defines a concrete node class that extends class X3DParticleEmitterNode. */

class ExplosionEmitter : public X3DParticleEmitterNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "variation". */
  float getVariation ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "variation". */
  void setVariation (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "mass". */
  void setMass (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "surfaceArea". */
  float getSurfaceArea ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "surfaceArea". */
  void setSurfaceArea (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** EXPORT defines a concrete node class that extends class X3DStatement.
  * Functional summary: EXPORT exposes a local node for ROUTE passing of event values when the current Scene is included via Inline by a parent external world. These connections allow event values to be exchanged via ROUTE statements between a parent model and a child Inline model. */

class EXPORT : public X3DStatement
{
  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "localDEF". */
  xs:IDREF getLocalDEF ();

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "localDEF". */
  void setLocalDEF (xs:IDREF value);

  /** Provide MFString value from inputOutput SFString field named "AS". */
  MFString getAS ();

  /** Assign MFString value to inputOutput SFString field named "AS". */
  void setAS (MFString value);
}
;/** ExternProtoDeclare defines a concrete node class that extends classs X3DStatement, X3DChildNode.
  * ExternProtoDeclare refers to a ProtoDeclare node declaration provided in another file. ExternProtoDeclare interfaces are defined by field statements (and without IS/connect statements). */

class ExternProtoDeclare : public X3DStatement, X3DChildNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  /** Provide MFString value from inputOutput SFString field named "appinfo". */
  MFString getAppinfo ();

  /** Assign MFString value to inputOutput SFString field named "appinfo". */
  void setAppinfo (MFString value);

  /** Provide MFString value from inputOutput SFString field named "documentation". */
  MFString getDocumentation ();

  /** Assign MFString value to inputOutput SFString field named "documentation". */
  void setDocumentation (MFString value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  X3DNode* getField ();

  /** Provide number of nodes in "field" array */
  int getNumField ();

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (field* nodes);

  /** Assign single field* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "field" */
  void setField (field node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void setField (X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (X3DNode nodes);
}
;/** Extrusion defines a concrete node class that extends class X3DGeometryNode. */

class Extrusion : public X3DGeometryNode
{
  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_crossSection". */
  void setCrossSection (float* values);

  /** Assign 4-tuple float* value in radians to inputOnly MFRotation field named "set_orientation". */
  void setOrientation (float* values);

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_scale". */
  void setScale (float* values);

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_spine". */
  void setSpine (float* values);

  /** Provide bool value from initializeOnly SFBool field named "beginCap". */
  bool getBeginCap ();

  /** Assign bool value to initializeOnly SFBool field named "beginCap". */
  void setBeginCap (bool value);

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "convex". */
  bool getConvex ();

  /** Assign bool value to initializeOnly SFBool field named "convex". */
  void setConvex (bool value);

  /** Provide float value in radians [0,inf) from initializeOnly SFFloat field named "creaseAngle". */
  float getCreaseAngle ();

  /** Assign float value in radians [0,inf) to initializeOnly SFFloat field named "creaseAngle". */
  void setCreaseAngle (float angle) throw (InvalidFieldValueException);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "crossSection". */
  float* getCrossSection ();

  /** Provide number of 2-tuple primitive values in "crossSection" array */
  int getNumCrossSection ();

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "crossSection". */
  void setCrossSection (float* values);

  /** Provide bool value from initializeOnly SFBool field named "endCap". */
  bool getEndCap ();

  /** Assign bool value to initializeOnly SFBool field named "endCap". */
  void setEndCap (bool value);

  /** Provide 4-tuple float* value in radians from initializeOnly MFRotation field named "orientation". */
  float* getOrientation ();

  /** Provide number of 4-tuple primitive values in "orientation" array */
  int getNumOrientation ();

  /** Assign 4-tuple float* value in radians to initializeOnly MFRotation field named "orientation". */
  void setOrientation (float* values);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "scale". */
  float* getScale ();

  /** Provide number of 2-tuple primitive values in "scale" array */
  int getNumScale ();

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "scale". */
  void setScale (float* values);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "spine". */
  float* getSpine ();

  /** Provide number of 3-tuple primitive values in "spine" array */
  int getNumSpine ();

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "spine". */
  void setSpine (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** field defines a concrete node class that extends class X3DStatement.
  * Functional summary: a field statement defines an interface attribute or node. Each field statement can contain either attribute-value or node content. */

class field : public X3DStatement
{
  /** Provide MFString value from inputOutput SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to inputOutput SFString field named "type". */
  void setType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "accessType". */
  MFString getAccessType ();

  /** Assign MFString value to inputOutput SFString field named "accessType". */
  void setAccessType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to inputOutput SFString field named "type". */
  void setType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "value". */
  MFString getValue ();

  /** Assign MFString value to inputOutput SFString field named "value". */
  void setValue (MFString value);

  /** Provide MFString value from inputOutput SFString field named "appinfo". */
  MFString getAppinfo ();

  /** Assign MFString value to inputOutput SFString field named "appinfo". */
  void setAppinfo (MFString value);

  /** Provide MFString value from inputOutput SFString field named "documentation". */
  MFString getDocumentation ();

  /** Assign MFString value to inputOutput SFString field named "documentation". */
  void setDocumentation (MFString value);

  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DNode nodes);
}
;/** fieldValue defines a concrete node class that extends class X3DStatement.
  * Functional summary: a fieldValue statement re-initializes the default value of a field in a ProtoInstance. Each fieldValue statement can contain either attribute-value or node content. */

class fieldValue : public X3DStatement
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "value". */
  MFString getValue ();

  /** Assign MFString value to inputOutput SFString field named "value". */
  void setValue (MFString value);

  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DNode nodes);
}
;/** FillProperties defines a concrete node class that extends class X3DAppearanceChildNode. */

class FillProperties : public X3DAppearanceChildNode
{
  /** Provide bool value from inputOutput SFBool field named "filled". */
  bool getFilled ();

  /** Assign bool value to inputOutput SFBool field named "filled". */
  void setFilled (bool value);

  /** Provide bool value from inputOutput SFBool field named "hatched". */
  bool getHatched ();

  /** Assign bool value to inputOutput SFBool field named "hatched". */
  void setHatched (bool value);

  /** Provide int value from inputOutput SFInt32 field named "hatchStyle". */
  int getHatchStyle ();

  /** Assign int value to inputOutput SFInt32 field named "hatchStyle". */
  void setHatchStyle (int value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "hatchColor". */
  float* getHatchColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "hatchColor". */
  void setHatchColor (float* color) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** FloatVertexAttribute defines a concrete node class that extends class X3DVertexAttributeNode. */

class FloatVertexAttribute : public X3DVertexAttributeNode
{
  /** Provide float* value from inputOutput MFFloat field named "value". */
  float* getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign float* value to inputOutput MFFloat field named "value". */
  void setValue (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "value" */
  void setValue (float value);

  /** Provide int value [1,4) from initializeOnly SFInt32 field named "numComponents". */
  int getNumComponents ();

  /** Assign int value [1,4) to initializeOnly SFInt32 field named "numComponents". */
  void setNumComponents (int value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Fog defines a concrete node class that extends classs X3DBindableNode, X3DFogObject. */

class Fog : public X3DBindableNode, X3DFogObject
{
  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "fogType". */
  MFString getFogType ();

  /** Assign MFString value to inputOutput SFString field named "fogType". */
  void setFogType (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "visibilityRange". */
  float getVisibilityRange ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "visibilityRange". */
  void setVisibilityRange (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign bool value to inputOnly SFBool field named "set_bind". */
  void setBind (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double getBindTime ();

  /** Provide bool value from outputOnly SFBool field named "isBound". */
  bool getIsBound ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** FogCoordinate defines a concrete node class that extends class X3DGeometricPropertyNode. */

class FogCoordinate : public X3DGeometricPropertyNode
{
  /** Provide float* value (-inf,inf) from inputOutput MFFloat field named "depth". */
  float* getDepth ();

  /** Provide number of primitive values in "depth" array */
  int getNumDepth ();

  /** Assign float* value (-inf,inf) to inputOutput MFFloat field named "depth". */
  void setDepth (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for inputOutput field named "depth" */
  void setDepth (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** FontStyle defines a concrete node class that extends class X3DFontStyleNode. */

class FontStyle : public X3DFontStyleNode
{
  /** Provide MFString value from inputOutput SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to inputOutput SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide float value from inputOutput SFFloat field named "size". */
  float getSize ();

  /** Assign float value to inputOutput SFFloat field named "size". */
  void setSize (float value);

  /** Provide MFString* value from inputOutput MFString field named "family". */
  MFString* getFamily ();

  /** Provide number of primitive values in "family" array */
  int getNumFamily ();

  /** Assign MFString* value to inputOutput MFString field named "family". */
  void setFamily (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "family". */
  MFString* getFamily ();

  /** Provide number of primitive values in "family" array */
  int getNumFamily ();

  /** Assign MFString* value to inputOutput MFString field named "family". */
  void setFamily (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "family" */
  void setFamily (MFString value);

  /** Provide bool value from inputOutput SFBool field named "horizontal". */
  bool getHorizontal ();

  /** Assign bool value to inputOutput SFBool field named "horizontal". */
  void setHorizontal (bool value);

  /** Provide MFString* value from inputOutput MFString field named "justify". */
  MFString* getJustify ();

  /** Provide number of primitive values in "justify" array */
  int getNumJustify ();

  /** Assign MFString* value to inputOutput MFString field named "justify". */
  void setJustify (MFString* values);

  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide bool value from inputOutput SFBool field named "leftToRight". */
  bool getLeftToRight ();

  /** Assign bool value to inputOutput SFBool field named "leftToRight". */
  void setLeftToRight (bool value);

  /** Provide float value (0,inf) from initializeOnly SFFloat field named "size". */
  float getSize ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "size". */
  void setSize (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "spacing". */
  float getSpacing ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "spacing". */
  void setSpacing (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "style". */
  MFString getStyle ();

  /** Assign MFString value to inputOutput SFString field named "style". */
  void setStyle (MFString value);

  /** Provide bool value from inputOutput SFBool field named "topToBottom". */
  bool getTopToBottom ();

  /** Assign bool value to inputOutput SFBool field named "topToBottom". */
  void setTopToBottom (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ForcePhysicsModel defines a concrete node class that extends class X3DParticlePhysicsModelNode. */

class ForcePhysicsModel : public X3DParticlePhysicsModelNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "force". */
  float* getForce ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "force". */
  void setForce (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Gain defines a concrete node class that extends class X3DSoundProcessingNode. */

class Gain : public X3DSoundProcessingNode
{
  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tailTime". */
  double getTailTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tailTime". */
  void setTailTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeneratedCubeMapTexture defines a concrete node class that extends class X3DEnvironmentTextureNode. */

class GeneratedCubeMapTexture : public X3DEnvironmentTextureNode
{
  /** Provide int value (0,inf) from initializeOnly SFInt32 field named "size". */
  int getSize ();

  /** Assign int value (0,inf) to initializeOnly SFInt32 field named "size". */
  void setSize (int value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "update". */
  MFString getUpdate ();

  /** Assign MFString value to inputOutput SFString field named "update". */
  void setUpdate (MFString value);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoCoordinate defines a concrete node class that extends class X3DCoordinateNode. */

class GeoCoordinate : public X3DCoordinateNode
{
  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from initializeOnly MFVec3d field named "point". */
  double* getPoint ();

  /** Provide number of 3-tuple primitive values in "point" array */
  int getNumPoint ();

  /** Assign 3-tuple double* value to initializeOnly MFVec3d field named "point". */
  void setPoint (double* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoElevationGrid defines a concrete node class that extends class X3DGeometryNode. */

class GeoElevationGrid : public X3DGeometryNode
{
  /** Assign float* value to inputOnly MFFloat field named "set_height". */
  void setHeight (float* values);

  /** Assign single float* value as the MFFloat array for inputOnly field named "set_height" */
  void setHeight (float value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from initializeOnly SFVec3d field named "geoGridOrigin". */
  double* getGeoGridOrigin ();

  /** Assign 3-tuple double* value to initializeOnly SFVec3d field named "geoGridOrigin". */
  void setGeoGridOrigin (double* value);

  /** Provide double* value from initializeOnly MFDouble field named "height". */
  double* getHeight ();

  /** Provide number of primitive values in "height" array */
  int getNumHeight ();

  /** Assign double* value to initializeOnly MFDouble field named "height". */
  void setHeight (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "height" */
  void setHeight (double value);

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide double value in radians [0,inf) from initializeOnly SFDouble field named "creaseAngle". */
  double getCreaseAngle ();

  /** Assign double value in radians [0,inf) to initializeOnly SFDouble field named "creaseAngle". */
  void setCreaseAngle (double angle) throw (InvalidFieldValueException);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "xDimension". */
  int getXDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "xDimension". */
  void setXDimension (int value) throw (InvalidFieldValueException);

  /** Provide double value (0,inf) from initializeOnly SFDouble field named "xSpacing". */
  double getXSpacing ();

  /** Assign double value (0,inf) to initializeOnly SFDouble field named "xSpacing". */
  void setXSpacing (double value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "yScale". */
  float getYScale ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "yScale". */
  void setYScale (float value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "zDimension". */
  int getZDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "zDimension". */
  void setZDimension (int value) throw (InvalidFieldValueException);

  /** Provide double value (0,inf) from initializeOnly SFDouble field named "zSpacing". */
  double getZSpacing ();

  /** Assign double value (0,inf) to initializeOnly SFDouble field named "zSpacing". */
  void setZSpacing (double value) throw (InvalidFieldValueException);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void setTexCoord (X3DSingleTextureCoordinateNode node);

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoLocation defines a concrete node class that extends class X3DGroupingNode. */

class GeoLocation : public X3DGroupingNode
{
  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  double* getGeoCoords ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void setGeoCoords (double* value);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoLOD defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject.
  * Note that MFNode rootNode field can contain multiple nodes and has accessType inputOutput. Meanwhile MFNode children field is outputOnly, unlike other X3DGroupingNode exemplars. */

class GeoLOD : public X3DChildNode, X3DBoundedObject
{
  /** Provide 3-tuple double* value from initializeOnly SFVec3d field named "center". */
  double* getCenter ();

  /** Assign 3-tuple double* value to initializeOnly SFVec3d field named "center". */
  void setCenter (double* value);

  /** Provide int value [0,1) from outputOnly SFInt32 field named "level_changed". */
  int getLevel ();

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide MFString* value from initializeOnly MFString field named "rootUrl". */
  MFString* getRootUrl ();

  /** Provide number of primitive values in "rootUrl" array */
  int getNumRootUrl ();

  /** Assign MFString* value to initializeOnly MFString field named "rootUrl". */
  void setRootUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for initializeOnly field named "rootUrl" */
  void setRootUrl (MFString value);

  /** Provide MFString* value from initializeOnly MFString field named "child1Url". */
  MFString* getChild1Url ();

  /** Provide number of primitive values in "child1Url" array */
  int getNumChild1Url ();

  /** Assign MFString* value to initializeOnly MFString field named "child1Url". */
  void setChild1Url (MFString* values);

  /** Assign single MFString* value as the MFString array for initializeOnly field named "child1Url" */
  void setChild1Url (MFString value);

  /** Provide MFString* value from initializeOnly MFString field named "child2Url". */
  MFString* getChild2Url ();

  /** Provide number of primitive values in "child2Url" array */
  int getNumChild2Url ();

  /** Assign MFString* value to initializeOnly MFString field named "child2Url". */
  void setChild2Url (MFString* values);

  /** Assign single MFString* value as the MFString array for initializeOnly field named "child2Url" */
  void setChild2Url (MFString value);

  /** Provide MFString* value from initializeOnly MFString field named "child3Url". */
  MFString* getChild3Url ();

  /** Provide number of primitive values in "child3Url" array */
  int getNumChild3Url ();

  /** Assign MFString* value to initializeOnly MFString field named "child3Url". */
  void setChild3Url (MFString* values);

  /** Assign single MFString* value as the MFString array for initializeOnly field named "child3Url" */
  void setChild3Url (MFString value);

  /** Provide MFString* value from initializeOnly MFString field named "child4Url". */
  MFString* getChild4Url ();

  /** Provide number of primitive values in "child4Url" array */
  int getNumChild4Url ();

  /** Assign MFString* value to initializeOnly MFString field named "child4Url". */
  void setChild4Url (MFString* values);

  /** Assign single MFString* value as the MFString array for initializeOnly field named "child4Url" */
  void setChild4Url (MFString value);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "center". */
  double* getCenter ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "center". */
  void setCenter (double* value);

  /** Provide float value [0,inf) from initializeOnly SFFloat field named "range". */
  float getRange ();

  /** Assign float value [0,inf) to initializeOnly SFFloat field named "range". */
  void setRange (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from initializeOnly X3DChildNode type field named "rootNode". */
  X3DNode* getRootNode ();

  /** Provide number of nodes in "rootNode" array */
  int getNumRootNode ();

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "rootNode". */
  void setRootNode (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for initializeOnly field named "rootNode" */
  void setRootNode (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to initializeOnly X3DChildNode type field named "rootNode". */
  void setRootNode (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "rootNode". */
  void setRootNode (X3DNode nodes);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoMetadata defines a concrete node class that extends classs X3DInfoNode, X3DUrlObject. */

class GeoMetadata : public X3DInfoNode, X3DUrlObject
{
  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "summary". */
  MFString* getSummary ();

  /** Provide number of primitive values in "summary" array */
  int getNumSummary ();

  /** Assign MFString* value to inputOutput MFString field named "summary". */
  void setSummary (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "summary" */
  void setSummary (MFString value);

  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "data". */
  X3DNode* getData ();

  /** Provide number of nodes in "data" array */
  int getNumData ();

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "data". */
  void setData (X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "data" */
  void setData (X3DNode node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "data". */
  void setData (X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "data". */
  void setData (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoOrigin defines a concrete node class that extends class X3DNode.
  * GeoOrigin is deprecated and discouraged (but nevertheless allowed) in X3D version 3.3. GeoOrigin is restored in X3D version 4.0 for special use on devices with limited floating-point resolution. */

@Deprecated class GeoOrigin : public X3DNode
{
  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  double* getGeoCoords ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void setGeoCoords (double* value);

  /** Provide bool value from initializeOnly SFBool field named "rotateYUp". */
  bool getRotateYUp ();

  /** Assign bool value to initializeOnly SFBool field named "rotateYUp". */
  void setRotateYUp (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoPositionInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class GeoPositionInterpolator : public X3DInterpolatorNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide 3-tuple double* value from outputOnly SFVec3d field named "geovalue_changed". */
  double* getGeovalue ();

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from inputOutput MFVec3d field named "keyValue". */
  double* getKeyValue ();

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 3-tuple double* value to inputOutput MFVec3d field named "keyValue". */
  void setKeyValue (double* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoProximitySensor defines a concrete node class that extends class X3DEnvironmentalSensorNode. */

class GeoProximitySensor : public X3DEnvironmentalSensorNode
{
  /** Provide 3-tuple float* value in radians from outputOnly SFVec3f field named "centerOfRotation_changed". */
  float* getCenterOfRotation ();

  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double getEnterTime ();

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double getExitTime ();

  /** Provide 3-tuple double* value from outputOnly SFVec3d field named "geoCoord_changed". */
  double* getGeoCoord ();

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "orientation_changed". */
  float* getOrientation ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  float* getPosition ();

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "center". */
  double* getCenter ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "center". */
  void setCenter (double* value);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCenter". */
  double* getGeoCenter ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCenter". */
  void setGeoCenter (double* value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-inf,inf) from initializeOnly SFVec3f field named "size". */
  float* getSize ();

  /** Assign 3-tuple float* value (-inf,inf) to initializeOnly SFVec3f field named "size". */
  void setSize (float* value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoTouchSensor defines a concrete node class that extends class X3DTouchSensorNode. */

class GeoTouchSensor : public X3DTouchSensorNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitNormal_changed". */
  float* getHitNormal ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitPoint_changed". */
  float* getHitPoint ();

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "hitTexCoord_changed". */
  float* getHitTexCoord ();

  /** Provide 3-tuple double* value from outputOnly SFVec3d field named "hitGeoCoord_changed". */
  double* getHitGeoCoord ();

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isOver". */
  bool getIsOver ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "touchTime". */
  double getTouchTime ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoTransform defines a concrete node class that extends class X3DGroupingNode. */

class GeoTransform : public X3DGroupingNode
{
  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCenter". */
  double* getGeoCenter ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCenter". */
  void setGeoCenter (double* value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* getScaleOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void setScaleOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** GeoViewpoint defines a concrete node class that extends class X3DViewpointNode. */

class GeoViewpoint : public X3DViewpointNode
{
  /** Provide 3-tuple double* value in radians from inputOutput SFVec3d field named "centerOfRotation". */
  double* getCenterOfRotation ();

  /** Assign 3-tuple double* value in radians to inputOutput SFVec3d field named "centerOfRotation". */
  void setCenterOfRotation (double* value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide float value (0,3.1416) from inputOutput SFFloat field named "fieldOfView". */
  float getFieldOfView ();

  /** Assign float value (0,3.1416) to inputOutput SFFloat field named "fieldOfView". */
  void setFieldOfView (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "position". */
  double* getPosition ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "position". */
  void setPosition (double* value);

  /** Provide float value [0,inf) from initializeOnly SFFloat field named "speedFactor". */
  float getSpeedFactor ();

  /** Assign float value [0,inf) to initializeOnly SFFloat field named "speedFactor". */
  void setSpeedFactor (float value) throw (InvalidFieldValueException);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated X3DNode* getGeoOrigin ();

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void setGeoOrigin (GeoOrigin node) throw (InvalidFieldValueException);

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void setGeoOrigin (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign bool value to inputOnly SFBool field named "set_bind". */
  void setBind (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double getBindTime ();

  /** Provide bool value from outputOnly SFBool field named "isBound". */
  bool getIsBound ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "jump". */
  bool getJump ();

  /** Assign bool value to inputOutput SFBool field named "jump". */
  void setJump (bool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* getOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void setOrientation (float* value);

  /** Provide bool value from inputOutput SFBool field named "retainUserOffsets". */
  bool getRetainUserOffsets ();

  /** Assign bool value to inputOutput SFBool field named "retainUserOffsets". */
  void setRetainUserOffsets (bool value);

  /** Provide float value from inputOutput SFFloat field named "farDistance". */
  float getFarDistance ();

  /** Assign float value to inputOutput SFFloat field named "farDistance". */
  void setFarDistance (float value);

  /** Provide float value from inputOutput SFFloat field named "nearDistance". */
  float getNearDistance ();

  /** Assign float value to inputOutput SFFloat field named "nearDistance". */
  void setNearDistance (float value);

  /** Provide bool value from inputOutput SFBool field named "viewAll". */
  bool getViewAll ();

  /** Assign bool value to inputOutput SFBool field named "viewAll". */
  void setViewAll (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide NavigationInfo value (using a properly typed node or X3DPrototypeInstance) from inputOutput NavigationInfo type field named "navigationInfo". */
  X3DNode* getNavigationInfo ();

  /** Assign NavigationInfo value (using a properly typed node) to inputOutput NavigationInfo type field named "navigationInfo". */
  void setNavigationInfo (NavigationInfo node);

  /** Assign NavigationInfo value (using a properly typed protoInstance) */
  void setNavigationInfo (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Group defines a concrete node class that extends class X3DGroupingNode. */

class Group : public X3DGroupingNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** HAnimDisplacer defines a concrete node class that extends class X3DGeometricPropertyNode. */

class HAnimDisplacer : public X3DGeometricPropertyNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFInt32 value (-inf,inf) from inputOutput MFInt32 field named "coordIndex". */
  MFInt32 getCoordIndex ();

  /** Provide number of primitive values in "coordIndex" array */
  int getNumCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to inputOutput MFInt32 field named "coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOutput field named "coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "displacements". */
  float* getDisplacements ();

  /** Provide number of 3-tuple primitive values in "displacements" array */
  int getNumDisplacements ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "displacements". */
  void setDisplacements (float* values);

  /** Provide float value from inputOutput SFFloat field named "weight". */
  float getWeight ();

  /** Assign float value to inputOutput SFFloat field named "weight". */
  void setWeight (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** HAnimHumanoid defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject. */

class HAnimHumanoid : public X3DChildNode, X3DBoundedObject
{
  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide MFString* value from inputOutput MFString field named "info". */
  MFString* getInfo ();

  /** Provide number of primitive values in "info" array */
  int getNumInfo ();

  /** Assign MFString* value to inputOutput MFString field named "info". */
  void setInfo (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "info" */
  void setInfo (MFString value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "jointBindingPositions". */
  float* getJointBindingPositions ();

  /** Provide number of 3-tuple primitive values in "jointBindingPositions" array */
  int getNumJointBindingPositions ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "jointBindingPositions". */
  void setJointBindingPositions (float* values);

  /** Provide 4-tuple float* value in radians from inputOutput MFRotation field named "jointBindingRotations". */
  float* getJointBindingRotations ();

  /** Provide number of 4-tuple primitive values in "jointBindingRotations" array */
  int getNumJointBindingRotations ();

  /** Assign 4-tuple float* value in radians to inputOutput MFRotation field named "jointBindingRotations". */
  void setJointBindingRotations (float* values);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "jointBindingScales". */
  float* getJointBindingScales ();

  /** Provide number of 3-tuple primitive values in "jointBindingScales" array */
  int getNumJointBindingScales ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "jointBindingScales". */
  void setJointBindingScales (float* values);

  /** Provide int value from inputOutput SFInt32 field named "loa". */
  int getLoa ();

  /** Assign int value to inputOutput SFInt32 field named "loa". */
  void setLoa (int value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* getScaleOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void setScaleOrientation (float* value);

  /** Provide MFString value from inputOutput SFString field named "skeletalConfiguration". */
  MFString getSkeletalConfiguration ();

  /** Assign MFString value to inputOutput SFString field named "skeletalConfiguration". */
  void setSkeletalConfiguration (MFString value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  /** Provide MFString value from inputOutput SFString field named "version". */
  MFString getVersion ();

  /** Assign MFString value to inputOutput SFString field named "version". */
  void setVersion (MFString value);

  /** Provide HAnimJoint* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimJoint type field named "joints". */
  X3DNode* getJoints ();

  /** Provide number of nodes in "joints" array */
  int getNumJoints ();

  /** Assign HAnimJoint* value (using a properly typed node array) to inputOutput HAnimJoint type field named "joints". */
  void setJoints (HAnimJoint* nodes);

  /** Assign single HAnimJoint* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "joints" */
  void setJoints (HAnimJoint node);

  /** Assign HAnimJoint* value (using a properly typed protoInstance array) to inputOutput HAnimJoint type field named "joints". */
  void setJoints (X3DPrototypeInstance node);

  /** Assign HAnimJoint* value (using a properly typed node array) to inputOutput HAnimJoint type field named "joints". */
  void setJoints (X3DNode nodes);

  /** Provide HAnimSegment* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimSegment type field named "segments". */
  X3DNode* getSegments ();

  /** Provide number of nodes in "segments" array */
  int getNumSegments ();

  /** Assign HAnimSegment* value (using a properly typed node array) to inputOutput HAnimSegment type field named "segments". */
  void setSegments (HAnimSegment* nodes);

  /** Assign single HAnimSegment* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "segments" */
  void setSegments (HAnimSegment node);

  /** Assign HAnimSegment* value (using a properly typed protoInstance array) to inputOutput HAnimSegment type field named "segments". */
  void setSegments (X3DPrototypeInstance node);

  /** Assign HAnimSegment* value (using a properly typed node array) to inputOutput HAnimSegment type field named "segments". */
  void setSegments (X3DNode nodes);

  /** Provide HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimSite type field named "sites". */
  X3DNode* getSites ();

  /** Provide number of nodes in "sites" array */
  int getNumSites ();

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "sites". */
  void setSites (HAnimSite* nodes);

  /** Assign single HAnimSite* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "sites" */
  void setSites (HAnimSite node);

  /** Assign HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimSite type field named "sites". */
  void setSites (X3DPrototypeInstance node);

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "sites". */
  void setSites (X3DNode nodes);

  /** Provide HAnimJoint|HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimJoint|HAnimSite type field named "skeleton". */
  X3DNode* getSkeleton ();

  /** Provide number of nodes in "skeleton" array */
  int getNumSkeleton ();

  /** Assign HAnimJoint|HAnimSite* value (using a properly typed node array) to inputOutput HAnimJoint|HAnimSite type field named "skeleton". */
  void setSkeleton (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "skeleton" */
  void setSkeleton (X3DNode node);

  /** Assign HAnimJoint|HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimJoint|HAnimSite type field named "skeleton". */
  void setSkeleton (X3DPrototypeInstance node);

  /** Provide Group|Transform|Shape|IndexedFaceSet* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Group|Transform|Shape|IndexedFaceSet type field named "skin". */
  X3DNode* getSkin ();

  /** Provide number of nodes in "skin" array */
  int getNumSkin ();

  /** Assign Group|Transform|Shape|IndexedFaceSet* value (using a properly typed node array) to inputOutput Group|Transform|Shape|IndexedFaceSet type field named "skin". */
  void setSkin (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "skin" */
  void setSkin (X3DNode node);

  /** Assign Group|Transform|Shape|IndexedFaceSet* value (using a properly typed protoInstance array) to inputOutput Group|Transform|Shape|IndexedFaceSet type field named "skin". */
  void setSkin (X3DPrototypeInstance node);

  /** Provide HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimSite type field named "viewpoints". */
  X3DNode* getViewpoints ();

  /** Provide number of nodes in "viewpoints" array */
  int getNumViewpoints ();

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "viewpoints". */
  void setViewpoints (HAnimSite* nodes);

  /** Assign single HAnimSite* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "viewpoints" */
  void setViewpoints (HAnimSite node);

  /** Assign HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimSite type field named "viewpoints". */
  void setViewpoints (X3DPrototypeInstance node);

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "viewpoints". */
  void setViewpoints (X3DNode nodes);

  /** Provide HAnimMotion* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimMotion type field named "motions". */
  X3DNode* getMotions ();

  /** Provide number of nodes in "motions" array */
  int getNumMotions ();

  /** Assign HAnimMotion* value (using a properly typed node array) to inputOutput HAnimMotion type field named "motions". */
  void setMotions (HAnimMotion* nodes);

  /** Assign single HAnimMotion* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "motions" */
  void setMotions (HAnimMotion node);

  /** Assign HAnimMotion* value (using a properly typed protoInstance array) to inputOutput HAnimMotion type field named "motions". */
  void setMotions (X3DPrototypeInstance node);

  /** Assign HAnimMotion* value (using a properly typed node array) to inputOutput HAnimMotion type field named "motions". */
  void setMotions (X3DNode nodes);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "skinCoord". */
  X3DNode* getSkinCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "skinCoord". */
  void setSkinCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setSkinCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "skinNormal". */
  X3DNode* getSkinNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "skinNormal". */
  void setSkinNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setSkinNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "skinBindingCoord". */
  X3DNode* getSkinBindingCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "skinBindingCoord". */
  void setSkinBindingCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setSkinBindingCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "skinBindingNormal". */
  X3DNode* getSkinBindingNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "skinBindingNormal". */
  void setSkinBindingNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setSkinBindingNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** HAnimJoint defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject. */

class HAnimJoint : public X3DChildNode, X3DBoundedObject
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* getScaleOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void setScaleOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  /** Provide MFInt32 value (-inf,inf) from inputOutput MFInt32 field named "skinCoordIndex". */
  MFInt32 getSkinCoordIndex ();

  /** Provide number of primitive values in "skinCoordIndex" array */
  int getNumSkinCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to inputOutput MFInt32 field named "skinCoordIndex". */
  void setSkinCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOutput field named "skinCoordIndex" */
  void setSkinCoordIndex (SFInt32 value);

  /** Provide float* value from inputOutput MFFloat field named "skinCoordWeight". */
  float* getSkinCoordWeight ();

  /** Provide number of primitive values in "skinCoordWeight" array */
  int getNumSkinCoordWeight ();

  /** Assign float* value to inputOutput MFFloat field named "skinCoordWeight". */
  void setSkinCoordWeight (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "skinCoordWeight" */
  void setSkinCoordWeight (float value);

  /** Provide float* value from inputOutput MFFloat field named "llimit". */
  float* getLlimit ();

  /** Provide number of primitive values in "llimit" array */
  int getNumLlimit ();

  /** Assign float* value to inputOutput MFFloat field named "llimit". */
  void setLlimit (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "llimit" */
  void setLlimit (float value);

  /** Provide float* value from inputOutput MFFloat field named "ulimit". */
  float* getUlimit ();

  /** Provide number of primitive values in "ulimit" array */
  int getNumUlimit ();

  /** Assign float* value to inputOutput MFFloat field named "ulimit". */
  void setUlimit (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "ulimit" */
  void setUlimit (float value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "limitOrientation". */
  float* getLimitOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "limitOrientation". */
  void setLimitOrientation (float* value);

  /** Provide float* value (-inf,inf) from inputOutput MFFloat field named "stiffness". */
  float* getStiffness ();

  /** Provide number of primitive values in "stiffness" array */
  int getNumStiffness ();

  /** Assign float* value (-inf,inf) to inputOutput MFFloat field named "stiffness". */
  void setStiffness (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for inputOutput field named "stiffness" */
  void setStiffness (float value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DNode node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed protoInstance array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DNode node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed protoInstance array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Provide HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimJoint|HAnimSegment|HAnimSite type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array) to inputOutput HAnimJoint|HAnimSegment|HAnimSite type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimJoint|HAnimSegment|HAnimSite type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Provide HAnimDisplacer* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimDisplacer type field named "displacers". */
  X3DNode* getDisplacers ();

  /** Provide number of nodes in "displacers" array */
  int getNumDisplacers ();

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void setDisplacers (HAnimDisplacer* nodes);

  /** Assign single HAnimDisplacer* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "displacers" */
  void setDisplacers (HAnimDisplacer node);

  /** Assign HAnimDisplacer* value (using a properly typed protoInstance array) to inputOutput HAnimDisplacer type field named "displacers". */
  void setDisplacers (X3DPrototypeInstance node);

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void setDisplacers (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** HAnimMotion defines a concrete node class that extends class X3DChildNode. */

class HAnimMotion : public X3DChildNode
{
  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "cycleTime". */
  double getCycleTime ();

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide MFString* value from inputOutput MFString field named "channels". */
  MFString* getChannels ();

  /** Provide number of primitive values in "channels" array */
  int getNumChannels ();

  /** Assign MFString* value to inputOutput MFString field named "channels". */
  void setChannels (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "channels" */
  void setChannels (MFString value);

  /** Provide bool* value from inputOutput MFBool field named "channelsEnabled". */
  bool* getChannelsEnabled ();

  /** Provide number of primitive values in "channelsEnabled" array */
  int getNumChannelsEnabled ();

  /** Assign bool* value to inputOutput MFBool field named "channelsEnabled". */
  void setChannelsEnabled (bool* values);

  /** Assign single bool* value as the MFBool array for inputOutput field named "channelsEnabled" */
  void setChannelsEnabled (bool value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "endFrame". */
  int getEndFrame ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "endFrame". */
  void setEndFrame (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "frameCount". */
  int getFrameCount ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "frameCount". */
  void setFrameCount (int value) throw (InvalidFieldValueException);

  /** Provide double value in seconds (0,inf) from inputOutput SFTime field named "frameDuration". */
  double getFrameDuration ();

  /** Assign double value in seconds (0,inf) to inputOutput SFTime field named "frameDuration". */
  void setFrameDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide int value from inputOutput SFInt32 field named "frameIncrement". */
  int getFrameIncrement ();

  /** Assign int value to inputOutput SFInt32 field named "frameIncrement". */
  void setFrameIncrement (int value);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "frameIndex". */
  int getFrameIndex ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "frameIndex". */
  void setFrameIndex (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "startFrame". */
  int getStartFrame ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "startFrame". */
  void setStartFrame (int value) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "joints". */
  MFString* getJoints ();

  /** Provide number of primitive values in "joints" array */
  int getNumJoints ();

  /** Assign MFString* value to inputOutput MFString field named "joints". */
  void setJoints (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "joints" */
  void setJoints (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "loa". */
  int getLoa ();

  /** Assign int value to inputOutput SFInt32 field named "loa". */
  void setLoa (int value);

  /** Provide bool value from inputOutput SFBool field named "loop". */
  bool getLoop ();

  /** Assign bool value to inputOutput SFBool field named "loop". */
  void setLoop (bool value);

  /** Provide float* value from inputOutput MFFloat field named "values". */
  float* getValues ();

  /** Provide number of primitive values in "values" array */
  int getNumValues ();

  /** Assign float* value to inputOutput MFFloat field named "values". */
  void setValues (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "values" */
  void setValues (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** HAnimSegment defines a concrete node class that extends class X3DGroupingNode. */

class HAnimSegment : public X3DGroupingNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "mass". */
  void setMass (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "centerOfMass". */
  float* getCenterOfMass ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "centerOfMass". */
  void setCenterOfMass (float* value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide float* value (-inf,inf) from inputOutput MFFloat field named "momentsOfInertia". */
  float* getMomentsOfInertia ();

  /** Provide number of primitive values in "momentsOfInertia" array */
  int getNumMomentsOfInertia ();

  /** Assign float* value (-inf,inf) to inputOutput MFFloat field named "momentsOfInertia". */
  void setMomentsOfInertia (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for inputOutput field named "momentsOfInertia" */
  void setMomentsOfInertia (float value);

  /** Provide HAnimDisplacer* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimDisplacer type field named "displacers". */
  X3DNode* getDisplacers ();

  /** Provide number of nodes in "displacers" array */
  int getNumDisplacers ();

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void setDisplacers (HAnimDisplacer* nodes);

  /** Assign single HAnimDisplacer* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "displacers" */
  void setDisplacers (HAnimDisplacer node);

  /** Assign HAnimDisplacer* value (using a properly typed protoInstance array) to inputOutput HAnimDisplacer type field named "displacers". */
  void setDisplacers (X3DPrototypeInstance node);

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void setDisplacers (X3DNode nodes);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** HAnimSite defines a concrete node class that extends class X3DGroupingNode. */

class HAnimSite : public X3DGroupingNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* getScaleOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void setScaleOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** head defines a concrete node class that extends class X3DStatement.
  * Functional summary: each X3D scene includes a head statement that can contain component, unit and meta statements. */

class head : public X3DStatement
{
  /** Provide component* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput component type field named "component". */
  X3DNode* getComponent ();

  /** Provide number of nodes in "component" array */
  int getNumComponent ();

  /** Assign component* value (using a properly typed node array) to inputOutput component type field named "component". */
  void setComponent (component* nodes);

  /** Assign single component* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "component" */
  void setComponent (component node);

  /** Assign component* value (using a properly typed protoInstance array) to inputOutput component type field named "component". */
  void setComponent (X3DPrototypeInstance node);

  /** Assign component* value (using a properly typed node array) to inputOutput component type field named "component". */
  void setComponent (X3DNode nodes);

  /** Provide unit* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput unit type field named "unit". */
  X3DNode* getUnit ();

  /** Provide number of nodes in "unit" array */
  int getNumUnit ();

  /** Assign unit* value (using a properly typed node array) to inputOutput unit type field named "unit". */
  void setUnit (unit* nodes);

  /** Assign single unit* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "unit" */
  void setUnit (unit node);

  /** Assign unit* value (using a properly typed protoInstance array) to inputOutput unit type field named "unit". */
  void setUnit (X3DPrototypeInstance node);

  /** Assign unit* value (using a properly typed node array) to inputOutput unit type field named "unit". */
  void setUnit (X3DNode nodes);

  /** Provide meta* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput meta type field named "meta". */
  X3DNode* getMeta ();

  /** Provide number of nodes in "meta" array */
  int getNumMeta ();

  /** Assign meta* value (using a properly typed node array) to inputOutput meta type field named "meta". */
  void setMeta (meta* nodes);

  /** Assign single meta* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "meta" */
  void setMeta (meta node);

  /** Assign meta* value (using a properly typed protoInstance array) to inputOutput meta type field named "meta". */
  void setMeta (X3DPrototypeInstance node);

  /** Assign meta* value (using a properly typed node array) to inputOutput meta type field named "meta". */
  void setMeta (X3DNode nodes);
}
;/** ImageCubeMapTexture defines a concrete node class that extends classs X3DEnvironmentTextureNode, X3DUrlObject. */

class ImageCubeMapTexture : public X3DEnvironmentTextureNode, X3DUrlObject
{
  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ImageTexture defines a concrete node class that extends classs X3DTexture2DNode, X3DUrlObject. */

class ImageTexture : public X3DTexture2DNode, X3DUrlObject
{
  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from initializeOnly SFBool field named "repeatS". */
  bool getRepeatS ();

  /** Assign bool value to initializeOnly SFBool field named "repeatS". */
  void setRepeatS (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatT". */
  bool getRepeatT ();

  /** Assign bool value to initializeOnly SFBool field named "repeatT". */
  void setRepeatT (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ImageTexture3D defines a concrete node class that extends classs X3DTexture3DNode, X3DUrlObject. */

class ImageTexture3D : public X3DTexture3DNode, X3DUrlObject
{
  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from initializeOnly SFBool field named "repeatS". */
  bool getRepeatS ();

  /** Assign bool value to initializeOnly SFBool field named "repeatS". */
  void setRepeatS (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatT". */
  bool getRepeatT ();

  /** Assign bool value to initializeOnly SFBool field named "repeatT". */
  void setRepeatT (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatR". */
  bool getRepeatR ();

  /** Assign bool value to initializeOnly SFBool field named "repeatR". */
  void setRepeatR (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IMPORT defines a concrete node class that extends class X3DStatement.
  * Functional summary: IMPORT provides ROUTE access to a node that has a corresponding EXPORT statement within an Inline scene. These connections allow event values to be exchanged via ROUTE statements between a parent model and a child Inline model. */

class IMPORT : public X3DStatement
{
  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "inlineDEF". */
  xs:IDREF getInlineDEF ();

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "inlineDEF". */
  void setInlineDEF (xs:IDREF value);

  /** Provide MFString value from inputOutput SFString field named "importedDEF". */
  MFString getImportedDEF ();

  /** Assign MFString value to inputOutput SFString field named "importedDEF". */
  void setImportedDEF (MFString value);

  /** Provide xs:ID value from inputOutput xs:ID type field named "AS". */
  xs:ID getAS ();

  /** Assign xs:ID value to inputOutput xs:ID type field named "AS". */
  void setAS (xs:ID value);
}
;/** IndexedFaceSet defines a concrete node class that extends class X3DComposedGeometryNode. */

class IndexedFaceSet : public X3DComposedGeometryNode
{
  /** Assign MFInt32 value using RGB values [0..1] to inputOnly MFInt32 field named "set_colorIndex". */
  void setColorIndex (MFInt32 colors) throw (InvalidFieldValueException);

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for inputOnly field named "set_colorIndex" */
  void setColorIndex (SFInt32 color) throw (InvalidFieldValueException);

  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_normalIndex". */
  void setNormalIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_normalIndex" */
  void setNormalIndex (SFInt32 value);

  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_texCoordIndex". */
  void setTexCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_texCoordIndex" */
  void setTexCoordIndex (SFInt32 value);

  /** Provide bool value from initializeOnly SFBool field named "convex". */
  bool getConvex ();

  /** Assign bool value to initializeOnly SFBool field named "convex". */
  void setConvex (bool value);

  /** Provide float value in radians [0,inf) from initializeOnly SFFloat field named "creaseAngle". */
  float getCreaseAngle ();

  /** Assign float value in radians [0,inf) to initializeOnly SFFloat field named "creaseAngle". */
  void setCreaseAngle (float angle) throw (InvalidFieldValueException);

  /** Provide MFInt32 value using RGB values [0..1] from initializeOnly MFInt32 field named "colorIndex". */
  MFInt32 getColorIndex ();

  /** Provide number of primitive values in "colorIndex" array */
  int getNumColorIndex ();

  /** Assign MFInt32 value using RGB values [0..1] to initializeOnly MFInt32 field named "colorIndex". */
  void setColorIndex (MFInt32 colors) throw (InvalidFieldValueException);

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for initializeOnly field named "colorIndex" */
  void setColorIndex (SFInt32 color) throw (InvalidFieldValueException);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 getCoordIndex ();

  /** Provide number of primitive values in "coordIndex" array */
  int getNumCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "normalIndex". */
  MFInt32 getNormalIndex ();

  /** Provide number of primitive values in "normalIndex" array */
  int getNumNormalIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "normalIndex". */
  void setNormalIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "normalIndex" */
  void setNormalIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "texCoordIndex". */
  MFInt32 getTexCoordIndex ();

  /** Provide number of primitive values in "texCoordIndex" array */
  int getNumTexCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "texCoordIndex". */
  void setTexCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "texCoordIndex" */
  void setTexCoordIndex (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IndexedLineSet defines a concrete node class that extends class X3DGeometryNode. */

class IndexedLineSet : public X3DGeometryNode
{
  /** Assign MFInt32 value using RGB values [0..1] to inputOnly MFInt32 field named "set_colorIndex". */
  void setColorIndex (MFInt32 colors) throw (InvalidFieldValueException);

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for inputOnly field named "set_colorIndex" */
  void setColorIndex (SFInt32 color) throw (InvalidFieldValueException);

  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide MFInt32 value using RGB values [0..1] from initializeOnly MFInt32 field named "colorIndex". */
  MFInt32 getColorIndex ();

  /** Provide number of primitive values in "colorIndex" array */
  int getNumColorIndex ();

  /** Assign MFInt32 value using RGB values [0..1] to initializeOnly MFInt32 field named "colorIndex". */
  void setColorIndex (MFInt32 colors) throw (InvalidFieldValueException);

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for initializeOnly field named "colorIndex" */
  void setColorIndex (SFInt32 color) throw (InvalidFieldValueException);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 getCoordIndex ();

  /** Provide number of primitive values in "coordIndex" array */
  int getNumCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IndexedQuadSet defines a concrete node class that extends class X3DComposedGeometryNode.
  * IndexedQuadSet is a geometry node that defines quadrilaterals. */

class IndexedQuadSet : public X3DComposedGeometryNode
{
  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_index" */
  void setIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "index". */
  MFInt32 getIndex ();

  /** Provide number of primitive values in "index" array */
  int getNumIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "index" */
  void setIndex (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IndexedTriangleFanSet defines a concrete node class that extends class X3DComposedGeometryNode. */

class IndexedTriangleFanSet : public X3DComposedGeometryNode
{
  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_index" */
  void setIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "index". */
  MFInt32 getIndex ();

  /** Provide number of primitive values in "index" array */
  int getNumIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "index" */
  void setIndex (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IndexedTriangleSet defines a concrete node class that extends class X3DComposedGeometryNode. */

class IndexedTriangleSet : public X3DComposedGeometryNode
{
  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_index" */
  void setIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "index". */
  MFInt32 getIndex ();

  /** Provide number of primitive values in "index" array */
  int getNumIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "index" */
  void setIndex (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IndexedTriangleStripSet defines a concrete node class that extends class X3DComposedGeometryNode. */

class IndexedTriangleStripSet : public X3DComposedGeometryNode
{
  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_index" */
  void setIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "index". */
  MFInt32 getIndex ();

  /** Provide number of primitive values in "index" array */
  int getNumIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "index". */
  void setIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "index" */
  void setIndex (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Inline defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject, X3DUrlObject. */

class Inline : public X3DChildNode, X3DBoundedObject, X3DUrlObject
{
  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide bool value from inputOutput SFBool field named "global". */
  bool getGlobal ();

  /** Assign bool value to inputOutput SFBool field named "global". */
  void setGlobal (bool value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IntegerSequencer defines a concrete node class that extends class X3DSequencerNode. */

class IntegerSequencer : public X3DSequencerNode
{
  /** Provide int value from outputOnly SFInt32 field named "value_changed". */
  int getValue ();

  /** Provide MFInt32 value from inputOutput MFInt32 field named "keyValue". */
  MFInt32 getKeyValue ();

  /** Provide number of primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "keyValue". */
  void setKeyValue (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "keyValue" */
  void setKeyValue (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign bool value to inputOnly SFBool field named "next". */
  void setNext (bool value);

  /** Assign bool value to inputOnly SFBool field named "previous". */
  void setPrevious (bool value);

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IntegerTrigger defines a concrete node class that extends class X3DTriggerNode. */

class IntegerTrigger : public X3DTriggerNode
{
  /** Assign bool value to inputOnly SFBool field named "set_boolean". */
  void setBoolean (bool value);

  /** Provide int value from outputOnly SFInt32 field named "triggerValue". */
  int getTriggerValue ();

  /** Provide int value from inputOutput SFInt32 field named "integerKey". */
  int getIntegerKey ();

  /** Assign int value to inputOutput SFInt32 field named "integerKey". */
  void setIntegerKey (int value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** IS defines a concrete node class that extends class X3DStatement.
  * Functional summary: the IS statement connects node fields defined inside a ProtoBody declaration back to corresponding ProtoInterface fields. IS/connect statements can be added if the parent node is within a ProtoBody and connect statements define correspondences between prototype fields and built-in node fields. */

class IS : public X3DStatement
{
  /** Provide connect* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput connect type field named "connect". */
  X3DNode* getConnect ();

  /** Provide number of nodes in "connect" array */
  int getNumConnect ();

  /** Assign connect* value (using a properly typed node array) to inputOutput connect type field named "connect". */
  void setConnect (connect* nodes);

  /** Assign single connect* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "connect" */
  void setConnect (connect node);

  /** Assign connect* value (using a properly typed protoInstance array) to inputOutput connect type field named "connect". */
  void setConnect (X3DPrototypeInstance node);

  /** Assign connect* value (using a properly typed node array) to inputOutput connect type field named "connect". */
  void setConnect (X3DNode nodes);
}
;/** IsoSurfaceVolumeData defines a concrete node class that extends class X3DVolumeDataNode. */

class IsoSurfaceVolumeData : public X3DVolumeDataNode
{
  /** Provide float value from inputOutput SFFloat field named "contourStepSize". */
  float getContourStepSize ();

  /** Assign float value to inputOutput SFFloat field named "contourStepSize". */
  void setContourStepSize (float value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "surfaceTolerance". */
  float getSurfaceTolerance ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "surfaceTolerance". */
  void setSurfaceTolerance (float value) throw (InvalidFieldValueException);

  /** Provide float* value from inputOutput MFFloat field named "surfaceValues". */
  float* getSurfaceValues ();

  /** Provide number of primitive values in "surfaceValues" array */
  int getNumSurfaceValues ();

  /** Assign float* value to inputOutput MFFloat field named "surfaceValues". */
  void setSurfaceValues (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "surfaceValues" */
  void setSurfaceValues (float value);

  /** Provide X3DVolumeRenderStyleNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  X3DNode* getRenderStyle ();

  /** Provide number of nodes in "renderStyle" array */
  int getNumRenderStyle ();

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DVolumeRenderStyleNode* nodes);

  /** Assign single X3DVolumeRenderStyleNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "renderStyle" */
  void setRenderStyle (X3DVolumeRenderStyleNode node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed protoInstance array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DPrototypeInstance node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DNode nodes);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "gradients". */
  X3DNode* getGradients ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "gradients". */
  void setGradients (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setGradients (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  X3DNode* getVoxels ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void setVoxels (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setVoxels (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "dimensions". */
  float* getDimensions ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "dimensions". */
  void setDimensions (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** KeySensor defines a concrete node class that extends class X3DKeyDeviceSensorNode. */

class KeySensor : public X3DKeyDeviceSensorNode
{
  /** Provide int value from outputOnly SFInt32 field named "actionKeyPress". */
  int getActionKeyPress ();

  /** Provide int value from outputOnly SFInt32 field named "actionKeyRelease". */
  int getActionKeyRelease ();

  /** Provide bool value from outputOnly SFBool field named "altKey". */
  bool getAltKey ();

  /** Provide bool value from outputOnly SFBool field named "controlKey". */
  bool getControlKey ();

  /** Provide bool value from outputOnly SFBool field named "shiftKey". */
  bool getShiftKey ();

  /** Provide MFString value from outputOnly SFString field named "keyPress". */
  MFString getKeyPress ();

  /** Provide MFString value from outputOnly SFString field named "keyRelease". */
  MFString getKeyRelease ();

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Layer defines a concrete node class that extends class X3DLayerNode. */

class Layer : public X3DLayerNode
{
  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values);

  /** Assign single MFString* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void setObjectType (MFString value);

  /** Provide bool value from inputOutput SFBool field named "pickable". */
  bool getPickable ();

  /** Assign bool value to inputOutput SFBool field named "pickable". */
  void setPickable (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DViewportNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DViewportNode type field named "viewport". */
  X3DNode* getViewport ();

  /** Assign X3DViewportNode value (using a properly typed node) to inputOutput X3DViewportNode type field named "viewport". */
  void setViewport (X3DViewportNode node);

  /** Assign X3DViewportNode value (using a properly typed protoInstance) */
  void setViewport (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LayerSet defines a concrete node class that extends class X3DNode. */

class LayerSet : public X3DNode
{
  /** Provide int value (-inf,inf) from inputOutput SFInt32 field named "activeLayer". */
  int getActiveLayer ();

  /** Assign int value (-inf,inf) to inputOutput SFInt32 field named "activeLayer". */
  void setActiveLayer (int value);

  /** Provide MFInt32 value (-inf,inf) from inputOutput MFInt32 field named "order". */
  MFInt32 getOrder ();

  /** Provide number of primitive values in "order" array */
  int getNumOrder ();

  /** Assign MFInt32 value (-inf,inf) to inputOutput MFInt32 field named "order". */
  void setOrder (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOutput field named "order" */
  void setOrder (SFInt32 value);

  /** Provide X3DLayerNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DLayerNode type field named "layers". */
  X3DNode* getLayers ();

  /** Provide number of nodes in "layers" array */
  int getNumLayers ();

  /** Assign X3DLayerNode* value (using a properly typed node array) to inputOutput X3DLayerNode type field named "layers". */
  void setLayers (X3DLayerNode* nodes);

  /** Assign single X3DLayerNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "layers" */
  void setLayers (X3DLayerNode node);

  /** Assign X3DLayerNode* value (using a properly typed protoInstance array) to inputOutput X3DLayerNode type field named "layers". */
  void setLayers (X3DPrototypeInstance node);

  /** Assign X3DLayerNode* value (using a properly typed node array) to inputOutput X3DLayerNode type field named "layers". */
  void setLayers (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Layout defines a concrete node class that extends class X3DLayoutNode. */

class Layout : public X3DLayoutNode
{
  /** Provide MFString* value from inputOutput MFString field named "align". */
  MFString* getAlign ();

  /** Provide number of primitive values in "align" array */
  int getNumAlign ();

  /** Assign MFString* value to inputOutput MFString field named "align". */
  void setAlign (MFString* values);

  /** Provide float* value from inputOutput MFFloat field named "offset". */
  float* getOffset ();

  /** Provide number of primitive values in "offset" array */
  int getNumOffset ();

  /** Assign float* value to inputOutput MFFloat field named "offset". */
  void setOffset (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "offset" */
  void setOffset (float value);

  /** Provide MFString* value from inputOutput MFString field named "offsetUnits". */
  MFString* getOffsetUnits ();

  /** Provide number of primitive values in "offsetUnits" array */
  int getNumOffsetUnits ();

  /** Assign MFString* value to inputOutput MFString field named "offsetUnits". */
  void setOffsetUnits (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "scaleMode". */
  MFString* getScaleMode ();

  /** Provide number of primitive values in "scaleMode" array */
  int getNumScaleMode ();

  /** Assign MFString* value to inputOutput MFString field named "scaleMode". */
  void setScaleMode (MFString* values);

  /** Provide float* value from initializeOnly MFFloat field named "size". */
  float* getSize ();

  /** Provide number of primitive values in "size" array */
  int getNumSize ();

  /** Assign float* value to initializeOnly MFFloat field named "size". */
  void setSize (float* values);

  /** Assign single float* value as the MFFloat array for initializeOnly field named "size" */
  void setSize (float value);

  /** Provide MFString* value from inputOutput MFString field named "sizeUnits". */
  MFString* getSizeUnits ();

  /** Provide number of primitive values in "sizeUnits" array */
  int getNumSizeUnits ();

  /** Assign MFString* value to inputOutput MFString field named "sizeUnits". */
  void setSizeUnits (MFString* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LayoutGroup defines a concrete node class that extends classs X3DNode, X3DGroupingNode. */

class LayoutGroup : public X3DNode, X3DGroupingNode
{
  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide X3DLayoutNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DLayoutNode type field named "layout". */
  X3DNode* getLayout ();

  /** Assign X3DLayoutNode value (using a properly typed node) to inputOutput X3DLayoutNode type field named "layout". */
  void setLayout (X3DLayoutNode node);

  /** Assign X3DLayoutNode value (using a properly typed protoInstance) */
  void setLayout (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DViewportNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DViewportNode type field named "viewport". */
  X3DNode* getViewport ();

  /** Assign X3DViewportNode value (using a properly typed node) to inputOutput X3DViewportNode type field named "viewport". */
  void setViewport (X3DViewportNode node);

  /** Assign X3DViewportNode value (using a properly typed protoInstance) */
  void setViewport (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LayoutLayer defines a concrete node class that extends class X3DLayerNode. */

class LayoutLayer : public X3DLayerNode
{
  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide X3DLayoutNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DLayoutNode type field named "layout". */
  X3DNode* getLayout ();

  /** Assign X3DLayoutNode value (using a properly typed node) to inputOutput X3DLayoutNode type field named "layout". */
  void setLayout (X3DLayoutNode node);

  /** Assign X3DLayoutNode value (using a properly typed protoInstance) */
  void setLayout (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values);

  /** Assign single MFString* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void setObjectType (MFString value);

  /** Provide bool value from inputOutput SFBool field named "pickable". */
  bool getPickable ();

  /** Assign bool value to inputOutput SFBool field named "pickable". */
  void setPickable (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DViewportNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DViewportNode type field named "viewport". */
  X3DNode* getViewport ();

  /** Assign X3DViewportNode value (using a properly typed node) to inputOutput X3DViewportNode type field named "viewport". */
  void setViewport (X3DViewportNode node);

  /** Assign X3DViewportNode value (using a properly typed protoInstance) */
  void setViewport (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LinePickSensor defines a concrete node class that extends class X3DPickSensorNode. */

class LinePickSensor : public X3DPickSensorNode
{
  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedNormal". */
  float* getPickedNormal ();

  /** Provide number of 3-tuple primitive values in "pickedNormal" array */
  int getNumPickedNormal ();

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedPoint". */
  float* getPickedPoint ();

  /** Provide number of 3-tuple primitive values in "pickedPoint" array */
  int getNumPickedPoint ();

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedTextureCoordinate". */
  float* getPickedTextureCoordinate ();

  /** Provide number of 3-tuple primitive values in "pickedTextureCoordinate" array */
  int getNumPickedTextureCoordinate ();

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values);

  /** Assign single MFString* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void setObjectType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  X3DNode* getPickTarget ();

  /** Provide number of nodes in "pickTarget" array */
  int getNumPickTarget ();

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "pickTarget" */
  void setPickTarget (X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  X3DNode* getPickedGeometry ();

  /** Provide number of nodes in "pickedGeometry" array */
  int getNumPickedGeometry ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  X3DNode* getPickingGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void setPickingGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setPickingGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LineProperties defines a concrete node class that extends class X3DAppearanceChildNode. */

class LineProperties : public X3DAppearanceChildNode
{
  /** Provide bool value from inputOutput SFBool field named "applied". */
  bool getApplied ();

  /** Assign bool value to inputOutput SFBool field named "applied". */
  void setApplied (bool value);

  /** Provide int value [1,inf) from inputOutput SFInt32 field named "linetype". */
  int getLinetype ();

  /** Assign int value [1,inf) to inputOutput SFInt32 field named "linetype". */
  void setLinetype (int value) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "linewidthScaleFactor". */
  float getLinewidthScaleFactor ();

  /** Assign float value to inputOutput SFFloat field named "linewidthScaleFactor". */
  void setLinewidthScaleFactor (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LineSet defines a concrete node class that extends class X3DGeometryNode. */

class LineSet : public X3DGeometryNode
{
  /** Provide MFInt32 value (-inf,inf) from inputOutput MFInt32 field named "vertexCount". */
  MFInt32 getVertexCount ();

  /** Provide number of primitive values in "vertexCount" array */
  int getNumVertexCount ();

  /** Assign MFInt32 value (-inf,inf) to inputOutput MFInt32 field named "vertexCount". */
  void setVertexCount (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOutput field named "vertexCount" */
  void setVertexCount (SFInt32 value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ListenerPointSource defines a concrete node class that extends class X3DSoundSourceNode. */

class ListenerPointSource : public X3DSoundSourceNode
{
  /** Provide bool value from inputOutput SFBool field named "dopplerEnabled". */
  bool getDopplerEnabled ();

  /** Assign bool value to inputOutput SFBool field named "dopplerEnabled". */
  void setDopplerEnabled (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "interauralDistance". */
  float getInterauralDistance ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "interauralDistance". */
  void setInterauralDistance (float value) throw (InvalidFieldValueException);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* getOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void setOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  /** Provide bool value from inputOutput SFBool field named "trackCurrentView". */
  bool getTrackCurrentView ();

  /** Assign bool value to inputOutput SFBool field named "trackCurrentView". */
  void setTrackCurrentView (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LoadSensor defines a concrete node class that extends class X3DNetworkSensorNode. */

class LoadSensor : public X3DNetworkSensorNode
{
  /** Provide bool value from outputOnly SFBool field named "isLoaded". */
  bool getIsLoaded ();

  /** Provide double value in seconds from outputOnly SFTime field named "loadTime". */
  double getLoadTime ();

  /** Provide float value from outputOnly SFFloat field named "progress". */
  float getProgress ();

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "timeOut". */
  double getTimeOut ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "timeOut". */
  void setTimeOut (double timestamp) throw (InvalidFieldValueException);

  /** Provide X3DUrlObject* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DUrlObject type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DUrlObject* value (using a properly typed node array) to inputOutput X3DUrlObject type field named "children". */
  void setChildren (X3DUrlObject* nodes);

  /** Assign single X3DUrlObject* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DUrlObject node);

  /** Assign X3DUrlObject* value (using a properly typed protoInstance array) to inputOutput X3DUrlObject type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DUrlObject* value (using a properly typed node array) to inputOutput X3DUrlObject type field named "children". */
  void setChildren (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LocalFog defines a concrete node class that extends classs X3DChildNode, X3DFogObject. */

class LocalFog : public X3DChildNode, X3DFogObject
{
  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "fogType". */
  MFString getFogType ();

  /** Assign MFString value to inputOutput SFString field named "fogType". */
  void setFogType (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "visibilityRange". */
  float getVisibilityRange ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "visibilityRange". */
  void setVisibilityRange (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** LOD defines a concrete node class that extends class X3DGroupingNode. */

class LOD : public X3DGroupingNode
{
  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide int value [0,inf) from outputOnly SFInt32 field named "level_changed". */
  int getLevel ();

  /** Provide bool value from initializeOnly SFBool field named "forceTransitions". */
  bool getForceTransitions ();

  /** Assign bool value to initializeOnly SFBool field named "forceTransitions". */
  void setForceTransitions (bool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide float* value from initializeOnly MFFloat field named "range". */
  float* getRange ();

  /** Provide number of primitive values in "range" array */
  int getNumRange ();

  /** Assign float* value to initializeOnly MFFloat field named "range". */
  void setRange (float* values);

  /** Assign single float* value as the MFFloat array for initializeOnly field named "range" */
  void setRange (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Material defines a concrete node class that extends class X3DOneSidedMaterialNode. */

class Material : public X3DOneSidedMaterialNode
{
  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide MFString value from inputOutput SFString field named "ambientTextureMapping". */
  MFString getAmbientTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "ambientTextureMapping". */
  void setAmbientTextureMapping (MFString value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "diffuseColor". */
  float* getDiffuseColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "diffuseColor". */
  void setDiffuseColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "diffuseTextureMapping". */
  MFString getDiffuseTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "diffuseTextureMapping". */
  void setDiffuseTextureMapping (MFString value);

  /** Provide float value from inputOutput SFFloat field named "occlusionStrength". */
  float getOcclusionStrength ();

  /** Assign float value to inputOutput SFFloat field named "occlusionStrength". */
  void setOcclusionStrength (float value);

  /** Provide MFString value from inputOutput SFString field named "occlusionTextureMapping". */
  MFString getOcclusionTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "occlusionTextureMapping". */
  void setOcclusionTextureMapping (MFString value);

  /** Provide float value from inputOutput SFFloat field named "shininess". */
  float getShininess ();

  /** Assign float value to inputOutput SFFloat field named "shininess". */
  void setShininess (float value);

  /** Provide MFString value from inputOutput SFString field named "shininessTextureMapping". */
  MFString getShininessTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "shininessTextureMapping". */
  void setShininessTextureMapping (MFString value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "specularColor". */
  float* getSpecularColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "specularColor". */
  void setSpecularColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "specularTextureMapping". */
  MFString getSpecularTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "specularTextureMapping". */
  void setSpecularTextureMapping (MFString value);

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float getTransparency ();

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void setTransparency (float value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "ambientTexture". */
  X3DNode* getAmbientTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "ambientTexture". */
  void setAmbientTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setAmbientTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "diffuseTexture". */
  X3DNode* getDiffuseTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "diffuseTexture". */
  void setDiffuseTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setDiffuseTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  X3DNode* getEmissiveTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void setEmissiveTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setEmissiveTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "normalTexture". */
  X3DNode* getNormalTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void setNormalTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setNormalTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  X3DNode* getOcclusionTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  void setOcclusionTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setOcclusionTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "shininessTexture". */
  X3DNode* getShininessTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "shininessTexture". */
  void setShininessTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setShininessTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "specularTexture". */
  X3DNode* getSpecularTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "specularTexture". */
  void setSpecularTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setSpecularTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  float* getEmissiveColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void setEmissiveColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "emissiveTextureMapping". */
  MFString getEmissiveTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "emissiveTextureMapping". */
  void setEmissiveTextureMapping (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "normalScale". */
  float getNormalScale ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "normalScale". */
  void setNormalScale (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "normalTextureMapping". */
  MFString getNormalTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "normalTextureMapping". */
  void setNormalTextureMapping (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Matrix3VertexAttribute defines a concrete node class that extends class X3DVertexAttributeNode. */

class Matrix3VertexAttribute : public X3DVertexAttributeNode
{
  /** Provide float* value from inputOutput MFMatrix3f field named "value". */
  float* getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign float* value to inputOutput MFMatrix3f field named "value". */
  void setValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Matrix4VertexAttribute defines a concrete node class that extends class X3DVertexAttributeNode. */

class Matrix4VertexAttribute : public X3DVertexAttributeNode
{
  /** Provide float* value from inputOutput MFMatrix4f field named "value". */
  float* getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign float* value to inputOutput MFMatrix4f field named "value". */
  void setValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** meta defines a concrete node class that extends class X3DStatement.
  * Functional summary: the meta statement provides metadata information about a scene, where name and content attributes provide attribute=value metadata pairs. */

class meta : public X3DStatement
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "content". */
  MFString getContent ();

  /** Assign MFString value to inputOutput SFString field named "content". */
  void setContent (MFString value);

  /** Provide MFString value from inputOutput SFString field named "dir". */
  MFString getDir ();

  /** Assign MFString value to inputOutput SFString field named "dir". */
  void setDir (MFString value);

  /** Provide MFString value from inputOutput SFString field named "http-equiv". */
  MFString getHttp-equiv ();

  /** Assign MFString value to inputOutput SFString field named "http-equiv". */
  void setHttp-equiv (MFString value);

  /** Provide MFString value from inputOutput SFString field named "lang". */
  MFString getLang ();

  /** Assign MFString value to inputOutput SFString field named "lang". */
  void setLang (MFString value);

  /** Provide MFString value from inputOutput SFString field named "scheme". */
  MFString getScheme ();

  /** Assign MFString value to inputOutput SFString field named "scheme". */
  void setScheme (MFString value);
}
;/** MetadataBoolean defines a concrete node class that extends classs X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the Boolean values of the value field. */

class MetadataBoolean : public X3DNode, X3DMetadataObject
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "reference". */
  MFString getReference ();

  /** Assign MFString value to inputOutput SFString field named "reference". */
  void setReference (MFString value);

  /** Provide bool* value from inputOutput MFBool field named "value". */
  bool* getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign bool* value to inputOutput MFBool field named "value". */
  void setValue (bool* values);

  /** Assign single bool* value as the MFBool array for inputOutput field named "value" */
  void setValue (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MetadataDouble defines a concrete node class that extends classs X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the double-precision floating point numbers of the value field. */

class MetadataDouble : public X3DNode, X3DMetadataObject
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "reference". */
  MFString getReference ();

  /** Assign MFString value to inputOutput SFString field named "reference". */
  void setReference (MFString value);

  /** Provide double* value from inputOutput MFDouble field named "value". */
  double* getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign double* value to inputOutput MFDouble field named "value". */
  void setValue (double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "value" */
  void setValue (double value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MetadataFloat defines a concrete node class that extends classs X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the single-precision floating point numbers of the value field. */

class MetadataFloat : public X3DNode, X3DMetadataObject
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "reference". */
  MFString getReference ();

  /** Assign MFString value to inputOutput SFString field named "reference". */
  void setReference (MFString value);

  /** Provide float* value from inputOutput MFFloat field named "value". */
  float* getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign float* value to inputOutput MFFloat field named "value". */
  void setValue (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "value" */
  void setValue (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MetadataInteger defines a concrete node class that extends classs X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the integer numbers of the value field. */

class MetadataInteger : public X3DNode, X3DMetadataObject
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "reference". */
  MFString getReference ();

  /** Assign MFString value to inputOutput SFString field named "reference". */
  void setReference (MFString value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "value". */
  MFInt32 getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "value". */
  void setValue (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "value" */
  void setValue (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MetadataSet defines a concrete node class that extends classs , X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the metadata nodes of the value field. */

class MetadataSet : public X3DNode, X3DMetadataObject
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "reference". */
  MFString getReference ();

  /** Assign MFString value to inputOutput SFString field named "reference". */
  void setReference (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "reference". */
  MFString getReference ();

  /** Assign MFString value to inputOutput SFString field named "reference". */
  void setReference (MFString value);

  /** Provide X3DMetadataObject* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DMetadataObject type field named "value". */
  X3DNode* getValue ();

  /** Provide number of nodes in "value" array */
  int getNumValue ();

  /** Assign X3DMetadataObject* value (using a properly typed node array) to inputOutput X3DMetadataObject type field named "value". */
  void setValue (X3DMetadataObject* nodes);

  /** Assign single X3DMetadataObject* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "value" */
  void setValue (X3DMetadataObject node);

  /** Assign X3DMetadataObject* value (using a properly typed protoInstance array) to inputOutput X3DMetadataObject type field named "value". */
  void setValue (X3DPrototypeInstance node);

  /** Assign X3DMetadataObject* value (using a properly typed node array) to inputOutput X3DMetadataObject type field named "value". */
  void setValue (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MetadataString defines a concrete node class that extends classs X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the strings of the value field. */

class MetadataString : public X3DNode, X3DMetadataObject
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "reference". */
  MFString getReference ();

  /** Assign MFString value to inputOutput SFString field named "reference". */
  void setReference (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "value". */
  MFString* getValue ();

  /** Provide number of primitive values in "value" array */
  int getNumValue ();

  /** Assign MFString* value to inputOutput MFString field named "value". */
  void setValue (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "value" */
  void setValue (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MicrophoneSource defines a concrete node class that extends class X3DSoundSourceNode. */

class MicrophoneSource : public X3DSoundSourceNode
{
  /** Provide MFString value from inputOutput SFString field named "mediaDeviceID". */
  MFString getMediaDeviceID ();

  /** Assign MFString value to inputOutput SFString field named "mediaDeviceID". */
  void setMediaDeviceID (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MotorJoint defines a concrete node class that extends class X3DRigidJointNode.
  * MotorJoint drives relative angular velocities between body1 and body2 within a common reference frame. */

class MotorJoint : public X3DRigidJointNode
{
  /** Provide float value in radians from outputOnly SFFloat field named "motor1Angle". */
  float getMotor1Angle ();

  /** Provide float value in radians from outputOnly SFFloat field named "motor1AngleRate". */
  float getMotor1AngleRate ();

  /** Provide float value in radians from outputOnly SFFloat field named "motor2Angle". */
  float getMotor2Angle ();

  /** Provide float value in radians from outputOnly SFFloat field named "motor2AngleRate". */
  float getMotor2AngleRate ();

  /** Provide float value in radians from outputOnly SFFloat field named "motor3Angle". */
  float getMotor3Angle ();

  /** Provide float value in radians from outputOnly SFFloat field named "motor3AngleRate". */
  float getMotor3AngleRate ();

  /** Provide bool value from initializeOnly SFBool field named "autoCalc". */
  bool getAutoCalc ();

  /** Assign bool value to initializeOnly SFBool field named "autoCalc". */
  void setAutoCalc (bool value);

  /** Provide float value in radians from inputOutput SFFloat field named "axis1Angle". */
  float getAxis1Angle ();

  /** Assign float value in radians to inputOutput SFFloat field named "axis1Angle". */
  void setAxis1Angle (float angle);

  /** Provide float value from inputOutput SFFloat field named "axis1Torque". */
  float getAxis1Torque ();

  /** Assign float value to inputOutput SFFloat field named "axis1Torque". */
  void setAxis1Torque (float value);

  /** Provide float value in radians from inputOutput SFFloat field named "axis2Angle". */
  float getAxis2Angle ();

  /** Assign float value in radians to inputOutput SFFloat field named "axis2Angle". */
  void setAxis2Angle (float angle);

  /** Provide float value from inputOutput SFFloat field named "axis2Torque". */
  float getAxis2Torque ();

  /** Assign float value to inputOutput SFFloat field named "axis2Torque". */
  void setAxis2Torque (float value);

  /** Provide float value in radians from inputOutput SFFloat field named "axis3Angle". */
  float getAxis3Angle ();

  /** Assign float value in radians to inputOutput SFFloat field named "axis3Angle". */
  void setAxis3Angle (float angle);

  /** Provide float value from inputOutput SFFloat field named "axis3Torque". */
  float getAxis3Torque ();

  /** Assign float value to inputOutput SFFloat field named "axis3Torque". */
  void setAxis3Torque (float value);

  /** Provide int value [0,3) from inputOutput SFInt32 field named "enabledAxes". */
  int getEnabledAxes ();

  /** Assign int value [0,3) to inputOutput SFInt32 field named "enabledAxes". */
  void setEnabledAxes (int value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "motor1Axis". */
  float* getMotor1Axis ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "motor1Axis". */
  void setMotor1Axis (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "motor2Axis". */
  float* getMotor2Axis ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "motor2Axis". */
  void setMotor2Axis (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "motor3Axis". */
  float* getMotor3Axis ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "motor3Axis". */
  void setMotor3Axis (float* value);

  /** Provide float value from inputOutput SFFloat field named "stop1Bounce". */
  float getStop1Bounce ();

  /** Assign float value to inputOutput SFFloat field named "stop1Bounce". */
  void setStop1Bounce (float value);

  /** Provide float value from inputOutput SFFloat field named "stop1ErrorCorrection". */
  float getStop1ErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "stop1ErrorCorrection". */
  void setStop1ErrorCorrection (float value);

  /** Provide float value from inputOutput SFFloat field named "stop2Bounce". */
  float getStop2Bounce ();

  /** Assign float value to inputOutput SFFloat field named "stop2Bounce". */
  void setStop2Bounce (float value);

  /** Provide float value from inputOutput SFFloat field named "stop2ErrorCorrection". */
  float getStop2ErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "stop2ErrorCorrection". */
  void setStop2ErrorCorrection (float value);

  /** Provide float value from inputOutput SFFloat field named "stop3Bounce". */
  float getStop3Bounce ();

  /** Assign float value to inputOutput SFFloat field named "stop3Bounce". */
  void setStop3Bounce (float value);

  /** Provide float value from inputOutput SFFloat field named "stop3ErrorCorrection". */
  float getStop3ErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "stop3ErrorCorrection". */
  void setStop3ErrorCorrection (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "forceOutput" */
  void setForceOutput (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  X3DNode* getBody1 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void setBody1 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  X3DNode* getBody2 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void setBody2 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MovieTexture defines a concrete node class that extends classs X3DSoundSourceNode, X3DTexture2DNode, X3DUrlObject. */

class MovieTexture : public X3DSoundSourceNode, X3DTexture2DNode, X3DUrlObject
{
  /** Provide double value in seconds [-1,inf) from outputOnly SFTime field named "duration_changed". */
  double getDuration ();

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide bool value from inputOutput SFBool field named "loop". */
  bool getLoop ();

  /** Assign bool value to inputOutput SFBool field named "loop". */
  void setLoop (bool value);

  /** Provide float value (0,inf) from inputOutput SFFloat field named "pitch". */
  float getPitch ();

  /** Assign float value (0,inf) to inputOutput SFFloat field named "pitch". */
  void setPitch (float value) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  /** Provide bool value from initializeOnly SFBool field named "repeatS". */
  bool getRepeatS ();

  /** Assign bool value to initializeOnly SFBool field named "repeatS". */
  void setRepeatS (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatT". */
  bool getRepeatT ();

  /** Assign bool value to initializeOnly SFBool field named "repeatT". */
  void setRepeatT (bool value);

  /** Provide float value from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value to inputOutput SFFloat field named "speed". */
  void setSpeed (float value);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MultiTexture defines a concrete node class that extends class X3DTextureNode. */

class MultiTexture : public X3DTextureNode
{
  /** Provide MFString* value from inputOutput MFString field named "function". */
  MFString* getFunction ();

  /** Provide number of primitive values in "function" array */
  int getNumFunction ();

  /** Assign MFString* value to inputOutput MFString field named "function". */
  void setFunction (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "mode". */
  MFString* getMode ();

  /** Provide number of primitive values in "mode" array */
  int getNumMode ();

  /** Assign MFString* value to inputOutput MFString field named "mode". */
  void setMode (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "source". */
  MFString* getSource ();

  /** Provide number of primitive values in "source" array */
  int getNumSource ();

  /** Assign MFString* value to inputOutput MFString field named "source". */
  void setSource (MFString* values);

  /** Provide float value [0,1) from inputOutput SFFloat field named "alpha". */
  float getAlpha ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "alpha". */
  void setAlpha (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "function". */
  MFString* getFunction ();

  /** Provide number of primitive values in "function" array */
  int getNumFunction ();

  /** Assign MFString* value to inputOutput MFString field named "function". */
  void setFunction (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "function" */
  void setFunction (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "mode". */
  MFString* getMode ();

  /** Provide number of primitive values in "mode" array */
  int getNumMode ();

  /** Assign MFString* value to inputOutput MFString field named "mode". */
  void setMode (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "mode" */
  void setMode (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "source". */
  MFString* getSource ();

  /** Provide number of primitive values in "source" array */
  int getNumSource ();

  /** Assign MFString* value to inputOutput MFString field named "source". */
  void setSource (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "source" */
  void setSource (MFString value);

  /** Provide X3DSingleTextureNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSingleTextureNode type field named "texture". */
  X3DNode* getTexture ();

  /** Provide number of nodes in "texture" array */
  int getNumTexture ();

  /** Assign X3DSingleTextureNode* value (using a properly typed node array) to inputOutput X3DSingleTextureNode type field named "texture". */
  void setTexture (X3DSingleTextureNode* nodes);

  /** Assign single X3DSingleTextureNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "texture" */
  void setTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode* value (using a properly typed protoInstance array) to inputOutput X3DSingleTextureNode type field named "texture". */
  void setTexture (X3DPrototypeInstance node);

  /** Assign X3DSingleTextureNode* value (using a properly typed node array) to inputOutput X3DSingleTextureNode type field named "texture". */
  void setTexture (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MultiTextureCoordinate defines a concrete node class that extends class X3DTextureCoordinateNode. */

class MultiTextureCoordinate : public X3DTextureCoordinateNode
{
  /** Provide X3DSingleTextureCoordinateNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Provide number of nodes in "texCoord" array */
  int getNumTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode* value (using a properly typed node array) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void setTexCoord (X3DSingleTextureCoordinateNode* nodes);

  /** Assign single X3DSingleTextureCoordinateNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "texCoord" */
  void setTexCoord (X3DSingleTextureCoordinateNode node);

  /** Assign X3DSingleTextureCoordinateNode* value (using a properly typed protoInstance array) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void setTexCoord (X3DPrototypeInstance node);

  /** Assign X3DSingleTextureCoordinateNode* value (using a properly typed node array) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void setTexCoord (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** MultiTextureTransform defines a concrete node class that extends class X3DTextureTransformNode. */

class MultiTextureTransform : public X3DTextureTransformNode
{
  /** Provide X3DSingleTextureTransformNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  X3DNode* getTextureTransform ();

  /** Provide number of nodes in "textureTransform" array */
  int getNumTextureTransform ();

  /** Assign X3DSingleTextureTransformNode* value (using a properly typed node array) to inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  void setTextureTransform (X3DSingleTextureTransformNode* nodes);

  /** Assign single X3DSingleTextureTransformNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "textureTransform" */
  void setTextureTransform (X3DSingleTextureTransformNode node);

  /** Assign X3DSingleTextureTransformNode* value (using a properly typed protoInstance array) to inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  void setTextureTransform (X3DPrototypeInstance node);

  /** Assign X3DSingleTextureTransformNode* value (using a properly typed node array) to inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  void setTextureTransform (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NavigationInfo defines a concrete node class that extends class X3DBindableNode. */

class NavigationInfo : public X3DBindableNode
{
  /** Provide MFString* value ["TELEPORT","LINEAR","ANIMATE",...] from inputOutput MFString field named "transitionType". */
  MFString* getTransitionType ();

  /** Provide number of primitive values in "transitionType" array */
  int getNumTransitionType ();

  /** Assign MFString* value ["TELEPORT","LINEAR","ANIMATE",...] to inputOutput MFString field named "transitionType". */
  void setTransitionType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] from inputOutput MFString field named "type". */
  MFString* getType ();

  /** Provide number of primitive values in "type" array */
  int getNumType ();

  /** Assign MFString* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] to inputOutput MFString field named "type". */
  void setType (MFString* values) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "transitionComplete". */
  bool getTransitionComplete ();

  /** Provide float* value (-inf,inf) from inputOutput MFFloat field named "avatarSize". */
  float* getAvatarSize ();

  /** Provide number of primitive values in "avatarSize" array */
  int getNumAvatarSize ();

  /** Assign float* value (-inf,inf) to inputOutput MFFloat field named "avatarSize". */
  void setAvatarSize (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for inputOutput field named "avatarSize" */
  void setAvatarSize (float value);

  /** Provide bool value from inputOutput SFBool field named "headlight". */
  bool getHeadlight ();

  /** Assign bool value to inputOutput SFBool field named "headlight". */
  void setHeadlight (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "transitionTime". */
  double getTransitionTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "transitionTime". */
  void setTransitionTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value ["TELEPORT","LINEAR","ANIMATE",...] from inputOutput MFString field named "transitionType". */
  MFString* getTransitionType ();

  /** Provide number of primitive values in "transitionType" array */
  int getNumTransitionType ();

  /** Assign MFString* value ["TELEPORT","LINEAR","ANIMATE",...] to inputOutput MFString field named "transitionType". */
  void setTransitionType (MFString* values);

  /** Assign single MFString* value ["TELEPORT","LINEAR","ANIMATE",...] as the MFString array for inputOutput field named "transitionType" */
  void setTransitionType (MFString value);

  /** Provide MFString* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] from inputOutput MFString field named "type". */
  MFString* getType ();

  /** Provide number of primitive values in "type" array */
  int getNumType ();

  /** Assign MFString* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] to inputOutput MFString field named "type". */
  void setType (MFString* values);

  /** Assign single MFString* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] as the MFString array for inputOutput field named "type" */
  void setType (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "visibilityLimit". */
  float getVisibilityLimit ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "visibilityLimit". */
  void setVisibilityLimit (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign bool value to inputOnly SFBool field named "set_bind". */
  void setBind (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double getBindTime ();

  /** Provide bool value from outputOnly SFBool field named "isBound". */
  bool getIsBound ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Normal defines a concrete node class that extends class X3DNormalNode. */

class Normal : public X3DNormalNode
{
  /** Provide 3-tuple float* value (-inf,inf) from inputOutput MFVec3f field named "vector". */
  float* getVector ();

  /** Provide number of 3-tuple primitive values in "vector" array */
  int getNumVector ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput MFVec3f field named "vector". */
  void setVector (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NormalInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class NormalInterpolator : public X3DInterpolatorNode
{
  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int getNumValue ();

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void setKeyValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsCurve defines a concrete node class that extends class X3DParametricGeometryNode. */

class NurbsCurve : public X3DParametricGeometryNode
{
  /** Provide bool value from initializeOnly SFBool field named "closed". */
  bool getClosed ();

  /** Assign bool value to initializeOnly SFBool field named "closed". */
  void setClosed (bool value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* getKnot ();

  /** Provide number of primitive values in "knot" array */
  int getNumKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void setKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void setKnot (double value);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value from inputOutput SFInt32 field named "tessellation". */
  int getTessellation ();

  /** Assign int value to inputOutput SFInt32 field named "tessellation". */
  void setTessellation (int value);

  /** Provide double* value (-inf,inf) from inputOutput MFDouble field named "weight". */
  double* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign double* value (-inf,inf) to inputOutput MFDouble field named "weight". */
  void setWeight (double* values);

  /** Assign single double* value (-inf,inf) as the MFDouble array for inputOutput field named "weight" */
  void setWeight (double value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  X3DNode* getControlPoint ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void setControlPoint (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setControlPoint (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsCurve2D defines a concrete node class that extends class X3DNurbsControlCurveNode. */

class NurbsCurve2D : public X3DNurbsControlCurveNode
{
  /** Provide bool value from initializeOnly SFBool field named "closed". */
  bool getClosed ();

  /** Assign bool value to initializeOnly SFBool field named "closed". */
  void setClosed (bool value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* getKnot ();

  /** Provide number of primitive values in "knot" array */
  int getNumKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void setKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void setKnot (double value);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value from inputOutput SFInt32 field named "tessellation". */
  int getTessellation ();

  /** Assign int value to inputOutput SFInt32 field named "tessellation". */
  void setTessellation (int value);

  /** Provide double* value (-inf,inf) from inputOutput MFDouble field named "weight". */
  double* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign double* value (-inf,inf) to inputOutput MFDouble field named "weight". */
  void setWeight (double* values);

  /** Assign single double* value (-inf,inf) as the MFDouble array for inputOutput field named "weight" */
  void setWeight (double value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 2-tuple double* value from inputOutput MFVec2d field named "controlPoint". */
  double* getControlPoint ();

  /** Provide number of 2-tuple primitive values in "controlPoint" array */
  int getNumControlPoint ();

  /** Assign 2-tuple double* value to inputOutput MFVec2d field named "controlPoint". */
  void setControlPoint (double* values);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsOrientationInterpolator defines a concrete node class that extends class X3DChildNode. */

class NurbsOrientationInterpolator : public X3DChildNode
{
  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* getValue ();

  /** Provide int value from inputOutput SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value to inputOutput SFInt32 field named "order". */
  void setOrder (int value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* getKnot ();

  /** Provide number of primitive values in "knot" array */
  int getNumKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void setKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void setKnot (double value);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide double* value from inputOutput MFDouble field named "weight". */
  double* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign double* value to inputOutput MFDouble field named "weight". */
  void setWeight (double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "weight" */
  void setWeight (double value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  X3DNode* getControlPoint ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void setControlPoint (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setControlPoint (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsPatchSurface defines a concrete node class that extends class X3DNurbsSurfaceGeometryNode. */

class NurbsPatchSurface : public X3DNurbsSurfaceGeometryNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "uClosed". */
  bool getUClosed ();

  /** Assign bool value to initializeOnly SFBool field named "uClosed". */
  void setUClosed (bool value);

  /** Provide bool value from initializeOnly SFBool field named "vClosed". */
  bool getVClosed ();

  /** Assign bool value to initializeOnly SFBool field named "vClosed". */
  void setVClosed (bool value);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "uDimension". */
  int getUDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "uDimension". */
  void setUDimension (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "vDimension". */
  int getVDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "vDimension". */
  void setVDimension (int value) throw (InvalidFieldValueException);

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* getUKnot ();

  /** Provide number of primitive values in "uKnot" array */
  int getNumUKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void setUKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void setUKnot (double value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* getVKnot ();

  /** Provide number of primitive values in "vKnot" array */
  int getNumVKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void setVKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void setVKnot (double value);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "uOrder". */
  int getUOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "uOrder". */
  void setUOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "vOrder". */
  int getVOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "vOrder". */
  void setVOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value from inputOutput SFInt32 field named "uTessellation". */
  int getUTessellation ();

  /** Assign int value to inputOutput SFInt32 field named "uTessellation". */
  void setUTessellation (int value);

  /** Provide int value from inputOutput SFInt32 field named "vTessellation". */
  int getVTessellation ();

  /** Assign int value to inputOutput SFInt32 field named "vTessellation". */
  void setVTessellation (int value);

  /** Provide double* value (-inf,inf) from inputOutput MFDouble field named "weight". */
  double* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign double* value (-inf,inf) to inputOutput MFDouble field named "weight". */
  void setWeight (double* values);

  /** Assign single double* value (-inf,inf) as the MFDouble array for inputOutput field named "weight" */
  void setWeight (double value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  X3DNode* getControlPoint ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void setControlPoint (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setControlPoint (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsPositionInterpolator defines a concrete node class that extends class X3DChildNode. */

class NurbsPositionInterpolator : public X3DChildNode
{
  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide int value from inputOutput SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value to inputOutput SFInt32 field named "order". */
  void setOrder (int value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* getKnot ();

  /** Provide number of primitive values in "knot" array */
  int getNumKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void setKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void setKnot (double value);

  /** Provide int value [2,inf) from inputOutput SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [2,inf) to inputOutput SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide double* value from inputOutput MFDouble field named "weight". */
  double* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign double* value to inputOutput MFDouble field named "weight". */
  void setWeight (double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "weight" */
  void setWeight (double value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  X3DNode* getControlPoint ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void setControlPoint (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setControlPoint (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsSet defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject. */

class NurbsSet : public X3DChildNode, X3DBoundedObject
{
  /** Provide float value (0,inf) from inputOutput SFFloat field named "tessellationScale". */
  float getTessellationScale ();

  /** Assign float value (0,inf) to inputOutput SFFloat field named "tessellationScale". */
  void setTessellationScale (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "addGeometry". */
  void setAddGeometry (X3DNurbsSurfaceGeometryNode* nodes);

  /** Assign single X3DNurbsSurfaceGeometryNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addGeometry" */
  void setAddGeometry (X3DNurbsSurfaceGeometryNode node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed protoInstance array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "addGeometry". */
  void setAddGeometry (X3DPrototypeInstance node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "addGeometry". */
  void setAddGeometry (X3DNode nodes);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "removeGeometry". */
  void setRemoveGeometry (X3DNurbsSurfaceGeometryNode* nodes);

  /** Assign single X3DNurbsSurfaceGeometryNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeGeometry" */
  void setRemoveGeometry (X3DNurbsSurfaceGeometryNode node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed protoInstance array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "removeGeometry". */
  void setRemoveGeometry (X3DPrototypeInstance node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "removeGeometry". */
  void setRemoveGeometry (X3DNode nodes);

  /** Provide X3DNurbsSurfaceGeometryNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  X3DNode* getGeometry ();

  /** Provide number of nodes in "geometry" array */
  int getNumGeometry ();

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  void setGeometry (X3DNurbsSurfaceGeometryNode* nodes);

  /** Assign single X3DNurbsSurfaceGeometryNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "geometry" */
  void setGeometry (X3DNurbsSurfaceGeometryNode node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed protoInstance array) to inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  void setGeometry (X3DPrototypeInstance node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  void setGeometry (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsSurfaceInterpolator defines a concrete node class that extends class X3DChildNode. */

class NurbsSurfaceInterpolator : public X3DChildNode
{
  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_fraction". */
  void setFraction (float* value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  float* getPosition ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "normal_changed". */
  float* getNormal ();

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "uDimension". */
  int getUDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "uDimension". */
  void setUDimension (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "vDimension". */
  int getVDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "vDimension". */
  void setVDimension (int value) throw (InvalidFieldValueException);

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* getUKnot ();

  /** Provide number of primitive values in "uKnot" array */
  int getNumUKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void setUKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void setUKnot (double value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* getVKnot ();

  /** Provide number of primitive values in "vKnot" array */
  int getNumVKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void setVKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void setVKnot (double value);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "uOrder". */
  int getUOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "uOrder". */
  void setUOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "vOrder". */
  int getVOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "vOrder". */
  void setVOrder (int value) throw (InvalidFieldValueException);

  /** Provide double* value from inputOutput MFDouble field named "weight". */
  double* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign double* value to inputOutput MFDouble field named "weight". */
  void setWeight (double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "weight" */
  void setWeight (double value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  X3DNode* getControlPoint ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void setControlPoint (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setControlPoint (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsSweptSurface defines a concrete node class that extends class X3DParametricGeometryNode. */

class NurbsSweptSurface : public X3DParametricGeometryNode
{
  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DNurbsControlCurveNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNurbsControlCurveNode type field named "crossSectionCurve". */
  X3DNode* getCrossSectionCurve ();

  /** Assign X3DNurbsControlCurveNode value (using a properly typed node) to inputOutput X3DNurbsControlCurveNode type field named "crossSectionCurve". */
  void setCrossSectionCurve (X3DNurbsControlCurveNode node);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed protoInstance) */
  void setCrossSectionCurve (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide NurbsCurve value (using a properly typed node or X3DPrototypeInstance) from inputOutput NurbsCurve type field named "trajectoryCurve". */
  X3DNode* getTrajectoryCurve ();

  /** Assign NurbsCurve value (using a properly typed node) to inputOutput NurbsCurve type field named "trajectoryCurve". */
  void setTrajectoryCurve (NurbsCurve node);

  /** Assign NurbsCurve value (using a properly typed protoInstance) */
  void setTrajectoryCurve (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsSwungSurface defines a concrete node class that extends class X3DParametricGeometryNode. */

class NurbsSwungSurface : public X3DParametricGeometryNode
{
  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DNurbsControlCurveNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNurbsControlCurveNode type field named "profileCurve". */
  X3DNode* getProfileCurve ();

  /** Assign X3DNurbsControlCurveNode value (using a properly typed node) to inputOutput X3DNurbsControlCurveNode type field named "profileCurve". */
  void setProfileCurve (X3DNurbsControlCurveNode node);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed protoInstance) */
  void setProfileCurve (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNurbsControlCurveNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNurbsControlCurveNode type field named "trajectoryCurve". */
  X3DNode* getTrajectoryCurve ();

  /** Assign X3DNurbsControlCurveNode value (using a properly typed node) to inputOutput X3DNurbsControlCurveNode type field named "trajectoryCurve". */
  void setTrajectoryCurve (X3DNurbsControlCurveNode node);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed protoInstance) */
  void setTrajectoryCurve (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsTextureCoordinate defines a concrete node class that extends class X3DNode. */

class NurbsTextureCoordinate : public X3DNode
{
  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "controlPoint". */
  float* getControlPoint ();

  /** Provide number of 2-tuple primitive values in "controlPoint" array */
  int getNumControlPoint ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "controlPoint". */
  void setControlPoint (float* values);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "uDimension". */
  int getUDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "uDimension". */
  void setUDimension (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "vDimension". */
  int getVDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "vDimension". */
  void setVDimension (int value) throw (InvalidFieldValueException);

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* getUKnot ();

  /** Provide number of primitive values in "uKnot" array */
  int getNumUKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void setUKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void setUKnot (double value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* getVKnot ();

  /** Provide number of primitive values in "vKnot" array */
  int getNumVKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void setVKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void setVKnot (double value);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "uOrder". */
  int getUOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "uOrder". */
  void setUOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "vOrder". */
  int getVOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "vOrder". */
  void setVOrder (int value) throw (InvalidFieldValueException);

  /** Provide float* value (-inf,inf) from inputOutput MFFloat field named "weight". */
  float* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign float* value (-inf,inf) to inputOutput MFFloat field named "weight". */
  void setWeight (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for inputOutput field named "weight" */
  void setWeight (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** NurbsTrimmedSurface defines a concrete node class that extends class X3DNurbsSurfaceGeometryNode. */

class NurbsTrimmedSurface : public X3DNurbsSurfaceGeometryNode
{
  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "addTrimmingContour". */
  void setAddTrimmingContour (Contour2D* nodes);

  /** Assign single Contour2D* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addTrimmingContour" */
  void setAddTrimmingContour (Contour2D node);

  /** Assign Contour2D* value (using a properly typed protoInstance array) to inputOnly Contour2D type field named "addTrimmingContour". */
  void setAddTrimmingContour (X3DPrototypeInstance node);

  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "addTrimmingContour". */
  void setAddTrimmingContour (X3DNode nodes);

  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "removeTrimmingContour". */
  void setRemoveTrimmingContour (Contour2D* nodes);

  /** Assign single Contour2D* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeTrimmingContour" */
  void setRemoveTrimmingContour (Contour2D node);

  /** Assign Contour2D* value (using a properly typed protoInstance array) to inputOnly Contour2D type field named "removeTrimmingContour". */
  void setRemoveTrimmingContour (X3DPrototypeInstance node);

  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "removeTrimmingContour". */
  void setRemoveTrimmingContour (X3DNode nodes);

  /** Provide Contour2D* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Contour2D type field named "trimmingContour". */
  X3DNode* getTrimmingContour ();

  /** Provide number of nodes in "trimmingContour" array */
  int getNumTrimmingContour ();

  /** Assign Contour2D* value (using a properly typed node array) to inputOutput Contour2D type field named "trimmingContour". */
  void setTrimmingContour (Contour2D* nodes);

  /** Assign single Contour2D* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "trimmingContour" */
  void setTrimmingContour (Contour2D node);

  /** Assign Contour2D* value (using a properly typed protoInstance array) to inputOutput Contour2D type field named "trimmingContour". */
  void setTrimmingContour (X3DPrototypeInstance node);

  /** Assign Contour2D* value (using a properly typed node array) to inputOutput Contour2D type field named "trimmingContour". */
  void setTrimmingContour (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "uClosed". */
  bool getUClosed ();

  /** Assign bool value to initializeOnly SFBool field named "uClosed". */
  void setUClosed (bool value);

  /** Provide bool value from initializeOnly SFBool field named "vClosed". */
  bool getVClosed ();

  /** Assign bool value to initializeOnly SFBool field named "vClosed". */
  void setVClosed (bool value);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "uDimension". */
  int getUDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "uDimension". */
  void setUDimension (int value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from initializeOnly SFInt32 field named "vDimension". */
  int getVDimension ();

  /** Assign int value [0,inf) to initializeOnly SFInt32 field named "vDimension". */
  void setVDimension (int value) throw (InvalidFieldValueException);

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* getUKnot ();

  /** Provide number of primitive values in "uKnot" array */
  int getNumUKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void setUKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void setUKnot (double value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* getVKnot ();

  /** Provide number of primitive values in "vKnot" array */
  int getNumVKnot ();

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void setVKnot (double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void setVKnot (double value);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "uOrder". */
  int getUOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "uOrder". */
  void setUOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value [2,inf) from initializeOnly SFInt32 field named "vOrder". */
  int getVOrder ();

  /** Assign int value [2,inf) to initializeOnly SFInt32 field named "vOrder". */
  void setVOrder (int value) throw (InvalidFieldValueException);

  /** Provide int value from inputOutput SFInt32 field named "uTessellation". */
  int getUTessellation ();

  /** Assign int value to inputOutput SFInt32 field named "uTessellation". */
  void setUTessellation (int value);

  /** Provide int value from inputOutput SFInt32 field named "vTessellation". */
  int getVTessellation ();

  /** Assign int value to inputOutput SFInt32 field named "vTessellation". */
  void setVTessellation (int value);

  /** Provide double* value (-inf,inf) from inputOutput MFDouble field named "weight". */
  double* getWeight ();

  /** Provide number of primitive values in "weight" array */
  int getNumWeight ();

  /** Assign double* value (-inf,inf) to inputOutput MFDouble field named "weight". */
  void setWeight (double* values);

  /** Assign single double* value (-inf,inf) as the MFDouble array for inputOutput field named "weight" */
  void setWeight (double value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  X3DNode* getControlPoint ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void setControlPoint (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setControlPoint (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** OpacityMapVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class OpacityMapVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide X3DTexture2DNode|X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|X3DTexture3DNode type field named "transferFunction". */
  X3DNode* getTransferFunction ();

  /** Assign X3DTexture2DNode|X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture2DNode|X3DTexture3DNode type field named "transferFunction". */
  void setTransferFunction (X3DNode node);

  /** Assign X3DTexture2DNode|X3DTexture3DNode value (using a properly typed protoInstance) */
  void setTransferFunction (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** OrientationChaser defines a concrete node class that extends class X3DChaserNode. */

class OrientationChaser : public X3DChaserNode
{
  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_destination". */
  void setDestination (float* value);

  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_value". */
  void setValue (float* value);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* getValue ();

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialDestination". */
  void setInitialDestination (float* value);

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialValue". */
  float* getInitialValue ();

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialValue". */
  void setInitialValue (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from initializeOnly SFTime field named "duration". */
  double getDuration ();

  /** Assign double value in seconds [0,inf) to initializeOnly SFTime field named "duration". */
  void setDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** OrientationDamper defines a concrete node class that extends class X3DDamperNode. */

class OrientationDamper : public X3DDamperNode
{
  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_destination". */
  void setDestination (float* value);

  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_value". */
  void setValue (float* value);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* getValue ();

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialDestination". */
  void setInitialDestination (float* value);

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialValue". */
  float* getInitialValue ();

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialValue". */
  void setInitialValue (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tau". */
  double getTau ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tau". */
  void setTau (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float getTolerance ();

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void setTolerance (float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** OrientationInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class OrientationInterpolator : public X3DInterpolatorNode
{
  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* getValue ();

  /** Provide 4-tuple float* value in radians from inputOutput MFRotation field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 4-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 4-tuple float* value in radians to inputOutput MFRotation field named "keyValue". */
  void setKeyValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** OrthoViewpoint defines a concrete node class that extends class X3DViewpointNode. */

class OrthoViewpoint : public X3DViewpointNode
{
  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "centerOfRotation". */
  float* getCenterOfRotation ();

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "centerOfRotation". */
  void setCenterOfRotation (float* value);

  /** Provide float* value from inputOutput MFFloat field named "fieldOfView". */
  float* getFieldOfView ();

  /** Provide number of primitive values in "fieldOfView" array */
  int getNumFieldOfView ();

  /** Assign float* value to inputOutput MFFloat field named "fieldOfView". */
  void setFieldOfView (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "fieldOfView" */
  void setFieldOfView (float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign bool value to inputOnly SFBool field named "set_bind". */
  void setBind (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double getBindTime ();

  /** Provide bool value from outputOnly SFBool field named "isBound". */
  bool getIsBound ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "jump". */
  bool getJump ();

  /** Assign bool value to inputOutput SFBool field named "jump". */
  void setJump (bool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* getOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void setOrientation (float* value);

  /** Provide bool value from inputOutput SFBool field named "retainUserOffsets". */
  bool getRetainUserOffsets ();

  /** Assign bool value to inputOutput SFBool field named "retainUserOffsets". */
  void setRetainUserOffsets (bool value);

  /** Provide float value from inputOutput SFFloat field named "farDistance". */
  float getFarDistance ();

  /** Assign float value to inputOutput SFFloat field named "farDistance". */
  void setFarDistance (float value);

  /** Provide float value from inputOutput SFFloat field named "nearDistance". */
  float getNearDistance ();

  /** Assign float value to inputOutput SFFloat field named "nearDistance". */
  void setNearDistance (float value);

  /** Provide bool value from inputOutput SFBool field named "viewAll". */
  bool getViewAll ();

  /** Assign bool value to inputOutput SFBool field named "viewAll". */
  void setViewAll (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide NavigationInfo value (using a properly typed node or X3DPrototypeInstance) from inputOutput NavigationInfo type field named "navigationInfo". */
  X3DNode* getNavigationInfo ();

  /** Assign NavigationInfo value (using a properly typed node) to inputOutput NavigationInfo type field named "navigationInfo". */
  void setNavigationInfo (NavigationInfo node);

  /** Assign NavigationInfo value (using a properly typed protoInstance) */
  void setNavigationInfo (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** OscillatorSource defines a concrete node class that extends class X3DSoundSourceNode. */

class OscillatorSource : public X3DSoundSourceNode
{
  /** Provide float value [0,inf) from inputOutput SFFloat field named "detune". */
  float getDetune ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "detune". */
  void setDetune (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "frequency". */
  float getFrequency ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "frequency". */
  void setFrequency (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PackagedShader defines a concrete node class that extends classs , X3DUrlObject, X3DShaderNode, X3DProgrammableShaderObject.
  * PackagedShader can contain field declarations, but no CDATA section of plain-text source code. */

class PackagedShader : public X3DUrlObject, X3DShaderNode, X3DProgrammableShaderObject
{
  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Assign bool value to inputOnly SFBool field named "activate". */
  void setActivate (bool value);

  /** Provide bool value from outputOnly SFBool field named "isSelected". */
  bool getIsSelected ();

  /** Provide bool value from outputOnly SFBool field named "isValid". */
  bool getIsValid ();

  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  X3DNode* getField ();

  /** Provide number of nodes in "field" array */
  int getNumField ();

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (field* nodes);

  /** Assign single field* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "field" */
  void setField (field node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void setField (X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ParticleSystem defines a concrete node class that extends class X3DShapeNode. */

class ParticleSystem : public X3DShapeNode
{
  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "createParticles". */
  bool getCreateParticles ();

  /** Assign bool value to inputOutput SFBool field named "createParticles". */
  void setCreateParticles (bool value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "lifetimeVariation". */
  float getLifetimeVariation ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "lifetimeVariation". */
  void setLifetimeVariation (float value) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "maxParticles". */
  int getMaxParticles ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "maxParticles". */
  void setMaxParticles (int value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "particleLifetime". */
  float getParticleLifetime ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "particleLifetime". */
  void setParticleLifetime (float value) throw (InvalidFieldValueException);

  /** Provide 2-tuple float* value (-inf,inf) from inputOutput SFVec2f field named "particleSize". */
  float* getParticleSize ();

  /** Assign 2-tuple float* value (-inf,inf) to inputOutput SFVec2f field named "particleSize". */
  void setParticleSize (float* value);

  /** Provide float* value using RGB values [0..1] from initializeOnly MFFloat field named "colorKey". */
  float* getColorKey ();

  /** Provide number of primitive values in "colorKey" array */
  int getNumColorKey ();

  /** Assign float* value using RGB values [0..1] to initializeOnly MFFloat field named "colorKey". */
  void setColorKey (float* colors) throw (InvalidFieldValueException);

  /** Assign single float* value using RGB values [0..1] as the MFFloat array for initializeOnly field named "colorKey" */
  void setColorKey (float color) throw (InvalidFieldValueException);

  /** Provide MFString value from initializeOnly SFString field named "geometryType". */
  MFString getGeometryType ();

  /** Assign MFString value to initializeOnly SFString field named "geometryType". */
  void setGeometryType (MFString value);

  /** Provide float* value (-inf,inf) from initializeOnly MFFloat field named "texCoordKey". */
  float* getTexCoordKey ();

  /** Provide number of primitive values in "texCoordKey" array */
  int getNumTexCoordKey ();

  /** Assign float* value (-inf,inf) to initializeOnly MFFloat field named "texCoordKey". */
  void setTexCoordKey (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for initializeOnly field named "texCoordKey" */
  void setTexCoordKey (float value);

  /** Provide X3DColorNode* value (using a properly typed node array or X3DPrototypeInstance array) using RGB values [0..1] from initializeOnly X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Provide number of nodes in "color" array */
  int getNumColor ();

  /** Assign X3DColorNode* value (using a properly typed node array) using RGB values [0..1] to initializeOnly X3DColorNode type field named "color". */
  void setColor (X3DColorNode* colors) throw (InvalidFieldValueException);

  /** Assign single X3DColorNode* value (using a properly typed node MFNode) using RGB values [0..1] as the MFNode array for initializeOnly field named "color" */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode* value (using a properly typed protoInstance array) using RGB values [0..1] to initializeOnly X3DColorNode type field named "color". */
  void setColor (X3DPrototypeInstance color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode* value (using a properly typed node array) using RGB values [0..1] to initializeOnly X3DColorNode type field named "color". */
  void setColor (X3DNode colors) throw (InvalidFieldValueException);

  /** Provide X3DParticlePhysicsModelNode* value (using a properly typed node array or X3DPrototypeInstance array) from initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  X3DNode* getPhysics ();

  /** Provide number of nodes in "physics" array */
  int getNumPhysics ();

  /** Assign X3DParticlePhysicsModelNode* value (using a properly typed node array) to initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  void setPhysics (X3DParticlePhysicsModelNode* nodes);

  /** Assign single X3DParticlePhysicsModelNode* value (using a properly typed node MFNode) as the MFNode array for initializeOnly field named "physics" */
  void setPhysics (X3DParticlePhysicsModelNode node);

  /** Assign X3DParticlePhysicsModelNode* value (using a properly typed protoInstance array) to initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  void setPhysics (X3DPrototypeInstance node);

  /** Assign X3DParticlePhysicsModelNode* value (using a properly typed node array) to initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  void setPhysics (X3DNode nodes);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  X3DNode* getGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void setGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DParticleEmitterNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DParticleEmitterNode type field named "emitter". */
  X3DNode* getEmitter ();

  /** Assign X3DParticleEmitterNode value (using a properly typed node) to initializeOnly X3DParticleEmitterNode type field named "emitter". */
  void setEmitter (X3DParticleEmitterNode node);

  /** Assign X3DParticleEmitterNode value (using a properly typed protoInstance) */
  void setEmitter (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide TextureCoordinate|TextureCoordinateGenerator value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureCoordinate|TextureCoordinateGenerator type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign TextureCoordinate|TextureCoordinateGenerator value (using a properly typed node) to initializeOnly TextureCoordinate|TextureCoordinateGenerator type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign TextureCoordinate|TextureCoordinateGenerator value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "castShadow". */
  bool getCastShadow ();

  /** Assign bool value to inputOutput SFBool field named "castShadow". */
  void setCastShadow (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DAppearanceNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DAppearanceNode type field named "appearance". */
  X3DNode* getAppearance ();

  /** Assign X3DAppearanceNode value (using a properly typed node) to inputOutput X3DAppearanceNode type field named "appearance". */
  void setAppearance (X3DAppearanceNode node);

  /** Assign X3DAppearanceNode value (using a properly typed protoInstance) */
  void setAppearance (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  X3DNode* getGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void setGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PeriodicWave defines a concrete node class that extends class X3DSoundNode. */

class PeriodicWave : public X3DSoundNode
{
  /** Provide float* value from inputOutput MFFloat field named "optionsReal". */
  float* getOptionsReal ();

  /** Provide number of primitive values in "optionsReal" array */
  int getNumOptionsReal ();

  /** Assign float* value to inputOutput MFFloat field named "optionsReal". */
  void setOptionsReal (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "optionsReal" */
  void setOptionsReal (float value);

  /** Provide float* value from inputOutput MFFloat field named "optionsImag". */
  float* getOptionsImag ();

  /** Provide number of primitive values in "optionsImag" array */
  int getNumOptionsImag ();

  /** Assign float* value to inputOutput MFFloat field named "optionsImag". */
  void setOptionsImag (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "optionsImag" */
  void setOptionsImag (float value);

  /** Provide MFString value from inputOutput SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to inputOutput SFString field named "type". */
  void setType (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PhysicalMaterial defines a concrete node class that extends class X3DOneSidedMaterialNode. */

class PhysicalMaterial : public X3DOneSidedMaterialNode
{
  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "baseColor". */
  float* getBaseColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "baseColor". */
  void setBaseColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "baseTextureMapping". */
  MFString getBaseTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "baseTextureMapping". */
  void setBaseTextureMapping (MFString value);

  /** Provide float value from inputOutput SFFloat field named "metallic". */
  float getMetallic ();

  /** Assign float value to inputOutput SFFloat field named "metallic". */
  void setMetallic (float value);

  /** Provide MFString value from inputOutput SFString field named "metallicRoughnessTextureMapping". */
  MFString getMetallicRoughnessTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "metallicRoughnessTextureMapping". */
  void setMetallicRoughnessTextureMapping (MFString value);

  /** Provide float value from inputOutput SFFloat field named "occlusionStrength". */
  float getOcclusionStrength ();

  /** Assign float value to inputOutput SFFloat field named "occlusionStrength". */
  void setOcclusionStrength (float value);

  /** Provide MFString value from inputOutput SFString field named "occlusionTextureMapping". */
  MFString getOcclusionTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "occlusionTextureMapping". */
  void setOcclusionTextureMapping (MFString value);

  /** Provide float value from inputOutput SFFloat field named "roughness". */
  float getRoughness ();

  /** Assign float value to inputOutput SFFloat field named "roughness". */
  void setRoughness (float value);

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float getTransparency ();

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void setTransparency (float value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "baseTexture". */
  X3DNode* getBaseTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "baseTexture". */
  void setBaseTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setBaseTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  X3DNode* getEmissiveTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void setEmissiveTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setEmissiveTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "metallicRoughnessTexture". */
  X3DNode* getMetallicRoughnessTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "metallicRoughnessTexture". */
  void setMetallicRoughnessTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setMetallicRoughnessTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "normalTexture". */
  X3DNode* getNormalTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void setNormalTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setNormalTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  X3DNode* getOcclusionTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  void setOcclusionTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setOcclusionTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  float* getEmissiveColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void setEmissiveColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "emissiveTextureMapping". */
  MFString getEmissiveTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "emissiveTextureMapping". */
  void setEmissiveTextureMapping (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "normalScale". */
  float getNormalScale ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "normalScale". */
  void setNormalScale (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "normalTextureMapping". */
  MFString getNormalTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "normalTextureMapping". */
  void setNormalTextureMapping (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PickableGroup defines a concrete node class that extends classs X3DGroupingNode, X3DPickableObject. */

class PickableGroup : public X3DGroupingNode, X3DPickableObject
{
  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values);

  /** Assign single MFString* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void setObjectType (MFString value);

  /** Provide bool value from inputOutput SFBool field named "pickable". */
  bool getPickable ();

  /** Assign bool value to inputOutput SFBool field named "pickable". */
  void setPickable (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PixelTexture defines a concrete node class that extends class X3DTexture2DNode. */

class PixelTexture : public X3DTexture2DNode
{
  /** Provide SFImage value from inputOutput SFImage field named "image". */
  SFImage getImage ();

  /** Assign SFImage value to inputOutput SFImage field named "image". */
  void setImage (SFImage value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from initializeOnly SFBool field named "repeatS". */
  bool getRepeatS ();

  /** Assign bool value to initializeOnly SFBool field named "repeatS". */
  void setRepeatS (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatT". */
  bool getRepeatT ();

  /** Assign bool value to initializeOnly SFBool field named "repeatT". */
  void setRepeatT (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PixelTexture3D defines a concrete node class that extends class X3DTexture3DNode. */

class PixelTexture3D : public X3DTexture3DNode
{
  /** Provide MFInt32 value from inputOutput MFInt32 field named "image". */
  MFInt32 getImage ();

  /** Provide number of primitive values in "image" array */
  int getNumImage ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "image". */
  void setImage (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "image" */
  void setImage (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from initializeOnly SFBool field named "repeatS". */
  bool getRepeatS ();

  /** Assign bool value to initializeOnly SFBool field named "repeatS". */
  void setRepeatS (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatT". */
  bool getRepeatT ();

  /** Assign bool value to initializeOnly SFBool field named "repeatT". */
  void setRepeatT (bool value);

  /** Provide bool value from initializeOnly SFBool field named "repeatR". */
  bool getRepeatR ();

  /** Assign bool value to initializeOnly SFBool field named "repeatR". */
  void setRepeatR (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  X3DNode* getTextureProperties ();

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void setTextureProperties (TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void setTextureProperties (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PlaneSensor defines a concrete node class that extends class X3DDragSensorNode. */

class PlaneSensor : public X3DDragSensorNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "translation_changed". */
  float* getTranslation ();

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "axisRotation". */
  float* getAxisRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "axisRotation". */
  void setAxisRotation (float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "maxPosition". */
  float* getMaxPosition ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "maxPosition". */
  void setMaxPosition (float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "minPosition". */
  float* getMinPosition ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "minPosition". */
  void setMinPosition (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "offset". */
  float* getOffset ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "offset". */
  void setOffset (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "trackPoint_changed". */
  float* getTrackPoint ();

  /** Provide bool value from inputOutput SFBool field named "autoOffset". */
  bool getAutoOffset ();

  /** Assign bool value to inputOutput SFBool field named "autoOffset". */
  void setAutoOffset (bool value);

  /** Provide bool value from outputOnly SFBool field named "isOver". */
  bool getIsOver ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PointEmitter defines a concrete node class that extends class X3DParticleEmitterNode. */

class PointEmitter : public X3DParticleEmitterNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "variation". */
  float getVariation ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "variation". */
  void setVariation (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "mass". */
  void setMass (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "surfaceArea". */
  float getSurfaceArea ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "surfaceArea". */
  void setSurfaceArea (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PointLight defines a concrete node class that extends class X3DLightNode.
  * Linear attenuation may occur at level 2, full support at level 3. */

class PointLight : public X3DLightNode
{
  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "attenuation". */
  float* getAttenuation ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "attenuation". */
  void setAttenuation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  float* getLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void setLocation (float* value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "radius". */
  float getRadius ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "radius". */
  void setRadius (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "global". */
  bool getGlobal ();

  /** Assign bool value to inputOutput SFBool field named "global". */
  void setGlobal (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide bool value from inputOutput SFBool field named "shadows". */
  bool getShadows ();

  /** Assign bool value to inputOutput SFBool field named "shadows". */
  void setShadows (bool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float getShadowIntensity ();

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void setShadowIntensity (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PointPickSensor defines a concrete node class that extends class X3DPickSensorNode. */

class PointPickSensor : public X3DPickSensorNode
{
  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedPoint". */
  float* getPickedPoint ();

  /** Provide number of 3-tuple primitive values in "pickedPoint" array */
  int getNumPickedPoint ();

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values);

  /** Assign single MFString* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void setObjectType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  X3DNode* getPickTarget ();

  /** Provide number of nodes in "pickTarget" array */
  int getNumPickTarget ();

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "pickTarget" */
  void setPickTarget (X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  X3DNode* getPickedGeometry ();

  /** Provide number of nodes in "pickedGeometry" array */
  int getNumPickedGeometry ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  X3DNode* getPickingGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void setPickingGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setPickingGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PointProperties defines a concrete node class that extends class X3DAppearanceChildNode. */

class PointProperties : public X3DAppearanceChildNode
{
  /** Provide float value [1,inf) from inputOutput SFFloat field named "pointSizeScaleFactor". */
  float getPointSizeScaleFactor ();

  /** Assign float value [1,inf) to inputOutput SFFloat field named "pointSizeScaleFactor". */
  void setPointSizeScaleFactor (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "pointSizeMinValue". */
  float getPointSizeMinValue ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "pointSizeMinValue". */
  void setPointSizeMinValue (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "pointSizeMaxValue". */
  float getPointSizeMaxValue ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "pointSizeMaxValue". */
  void setPointSizeMaxValue (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "attenuation". */
  float* getAttenuation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "attenuation". */
  void setAttenuation (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PointSet defines a concrete node class that extends class X3DGeometryNode. */

class PointSet : public X3DGeometryNode
{
  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Polyline2D defines a concrete node class that extends class X3DGeometryNode. */

class Polyline2D : public X3DGeometryNode
{
  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "lineSegments". */
  float* getLineSegments ();

  /** Provide number of 2-tuple primitive values in "lineSegments" array */
  int getNumLineSegments ();

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "lineSegments". */
  void setLineSegments (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PolylineEmitter defines a concrete node class that extends class X3DParticleEmitterNode. */

class PolylineEmitter : public X3DParticleEmitterNode
{
  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 getCoordIndex ();

  /** Provide number of primitive values in "coordIndex" array */
  int getNumCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "variation". */
  float getVariation ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "variation". */
  void setVariation (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "mass". */
  void setMass (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "surfaceArea". */
  float getSurfaceArea ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "surfaceArea". */
  void setSurfaceArea (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Polypoint2D defines a concrete node class that extends class X3DGeometryNode. */

class Polypoint2D : public X3DGeometryNode
{
  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "point". */
  float* getPoint ();

  /** Provide number of 2-tuple primitive values in "point" array */
  int getNumPoint ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "point". */
  void setPoint (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PositionChaser defines a concrete node class that extends class X3DChaserNode. */

class PositionChaser : public X3DChaserNode
{
  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_destination". */
  void setDestination (float* value);

  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_value". */
  void setValue (float* value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialDestination". */
  void setInitialDestination (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialValue". */
  float* getInitialValue ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialValue". */
  void setInitialValue (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from initializeOnly SFTime field named "duration". */
  double getDuration ();

  /** Assign double value in seconds [0,inf) to initializeOnly SFTime field named "duration". */
  void setDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PositionChaser2D defines a concrete node class that extends class X3DChaserNode. */

class PositionChaser2D : public X3DChaserNode
{
  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_destination". */
  void setDestination (float* value);

  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_value". */
  void setValue (float* value);

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  float* getValue ();

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialDestination". */
  void setInitialDestination (float* value);

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialValue". */
  float* getInitialValue ();

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialValue". */
  void setInitialValue (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from initializeOnly SFTime field named "duration". */
  double getDuration ();

  /** Assign double value in seconds [0,inf) to initializeOnly SFTime field named "duration". */
  void setDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PositionDamper defines a concrete node class that extends class X3DDamperNode. */

class PositionDamper : public X3DDamperNode
{
  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_destination". */
  void setDestination (float* value);

  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_value". */
  void setValue (float* value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialDestination". */
  void setInitialDestination (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialValue". */
  float* getInitialValue ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialValue". */
  void setInitialValue (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tau". */
  double getTau ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tau". */
  void setTau (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float getTolerance ();

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void setTolerance (float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PositionDamper2D defines a concrete node class that extends class X3DDamperNode. */

class PositionDamper2D : public X3DDamperNode
{
  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_destination". */
  void setDestination (float* value);

  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_value". */
  void setValue (float* value);

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  float* getValue ();

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialDestination". */
  float* getInitialDestination ();

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialDestination". */
  void setInitialDestination (float* value);

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialValue". */
  float* getInitialValue ();

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialValue". */
  void setInitialValue (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tau". */
  double getTau ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tau". */
  void setTau (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float getTolerance ();

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void setTolerance (float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PositionInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class PositionInterpolator : public X3DInterpolatorNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void setKeyValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PositionInterpolator2D defines a concrete node class that extends class X3DInterpolatorNode. */

class PositionInterpolator2D : public X3DInterpolatorNode
{
  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  float* getValue ();

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 2-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyValue". */
  void setKeyValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** PrimitivePickSensor defines a concrete node class that extends class X3DPickSensorNode.
  * If a non-uniform scale is applied to the pick sensor, correct results may require level 3 support. */

class PrimitivePickSensor : public X3DPickSensorNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values);

  /** Assign single MFString* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void setObjectType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  X3DNode* getPickTarget ();

  /** Provide number of nodes in "pickTarget" array */
  int getNumPickTarget ();

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "pickTarget" */
  void setPickTarget (X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  X3DNode* getPickedGeometry ();

  /** Provide number of nodes in "pickedGeometry" array */
  int getNumPickedGeometry ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  X3DNode* getPickingGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void setPickingGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setPickingGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ProgramShader defines a concrete node class that extends class X3DShaderNode.
  * ProgramShader contains no field declarations and no plain-text source code. */

class ProgramShader : public X3DShaderNode
{
  /** Provide ShaderProgram* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput ShaderProgram type field named "programs". */
  X3DNode* getPrograms ();

  /** Provide number of nodes in "programs" array */
  int getNumPrograms ();

  /** Assign ShaderProgram* value (using a properly typed node array) to inputOutput ShaderProgram type field named "programs". */
  void setPrograms (ShaderProgram* nodes);

  /** Assign single ShaderProgram* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "programs" */
  void setPrograms (ShaderProgram node);

  /** Assign ShaderProgram* value (using a properly typed protoInstance array) to inputOutput ShaderProgram type field named "programs". */
  void setPrograms (X3DPrototypeInstance node);

  /** Assign ShaderProgram* value (using a properly typed node array) to inputOutput ShaderProgram type field named "programs". */
  void setPrograms (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Assign bool value to inputOnly SFBool field named "activate". */
  void setActivate (bool value);

  /** Provide bool value from outputOnly SFBool field named "isSelected". */
  bool getIsSelected ();

  /** Provide bool value from outputOnly SFBool field named "isValid". */
  bool getIsValid ();

  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ProjectionVolumeStyle defines a concrete node class that extends class X3DVolumeRenderStyleNode. */

class ProjectionVolumeStyle : public X3DVolumeRenderStyleNode
{
  /** Provide MFString value from inputOutput SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to inputOutput SFString field named "type". */
  void setType (MFString value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "intensityThreshold". */
  float getIntensityThreshold ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "intensityThreshold". */
  void setIntensityThreshold (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to inputOutput SFString field named "type". */
  void setType (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ProtoBody defines a concrete node class that extends class X3DStatement.
  * ProtoBody contains the definition nodes for new Prototype nodes. */

class ProtoBody : public X3DStatement
{
  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void setChildren (X3DNode nodes);
}
;/** ProtoDeclare defines a concrete node class that extends classs X3DStatement, X3DChildNode.
  * ProtoDeclare defines new Prototype nodes. Nested ProtoDeclares and ProtoInstances are allowed by the specification. */

class ProtoDeclare : public X3DStatement, X3DChildNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide MFString value from inputOutput SFString field named "appinfo". */
  MFString getAppinfo ();

  /** Assign MFString value to inputOutput SFString field named "appinfo". */
  void setAppinfo (MFString value);

  /** Provide MFString value from inputOutput SFString field named "documentation". */
  MFString getDocumentation ();

  /** Assign MFString value to inputOutput SFString field named "documentation". */
  void setDocumentation (MFString value);

  /** Provide ProtoInterface value (using a properly typed node or X3DPrototypeInstance) from inputOutput ProtoInterface type field named "ProtoInterface". */
  X3DNode* getProtoInterface ();

  /** Assign ProtoInterface value (using a properly typed node) to inputOutput ProtoInterface type field named "ProtoInterface". */
  void setProtoInterface (ProtoInterface node);

  /** Assign ProtoInterface value (using a properly typed protoInstance) */
  void setProtoInterface (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide ProtoBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput ProtoBody type field named "ProtoBody". */
  X3DNode* getProtoBody ();

  /** Assign ProtoBody value (using a properly typed node) to inputOutput ProtoBody type field named "ProtoBody". */
  void setProtoBody (ProtoBody node);

  /** Assign ProtoBody value (using a properly typed protoInstance) */
  void setProtoBody (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ProtoInstance defines a concrete node class that extends classs X3DPrototypeInstance, X3DChildNode.
  * ProtoInstance can override field default values via fieldValue initializations. Non-recursive nested ProtoInstance and ProtoDeclare statements are allowed within a ProtoDeclare. */

class ProtoInstance : public X3DPrototypeInstance, X3DChildNode
{
  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide fieldValue* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput fieldValue type field named "fieldValue". */
  X3DNode* getFieldValue ();

  /** Provide number of nodes in "fieldValue" array */
  int getNumFieldValue ();

  /** Assign fieldValue* value (using a properly typed node array) to inputOutput fieldValue type field named "fieldValue". */
  void setFieldValue (fieldValue* nodes);

  /** Assign single fieldValue* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "fieldValue" */
  void setFieldValue (fieldValue node);

  /** Assign fieldValue* value (using a properly typed protoInstance array) to inputOutput fieldValue type field named "fieldValue". */
  void setFieldValue (X3DPrototypeInstance node);

  /** Assign fieldValue* value (using a properly typed node array) to inputOutput fieldValue type field named "fieldValue". */
  void setFieldValue (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ProtoInterface defines a concrete node class that extends class X3DStatement.
  * ProtoInterface defines fields for new Prototype nodes. */

class ProtoInterface : public X3DStatement
{
  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  X3DNode* getField ();

  /** Provide number of nodes in "field" array */
  int getNumField ();

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (field* nodes);

  /** Assign single field* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "field" */
  void setField (field node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void setField (X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (X3DNode nodes);
}
;/** ProximitySensor defines a concrete node class that extends class X3DEnvironmentalSensorNode. */

class ProximitySensor : public X3DEnvironmentalSensorNode
{
  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double getEnterTime ();

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double getExitTime ();

  /** Provide 3-tuple float* value in radians from outputOnly SFVec3f field named "centerOfRotation_changed". */
  float* getCenterOfRotation ();

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "orientation_changed". */
  float* getOrientation ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  float* getPosition ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-inf,inf) from initializeOnly SFVec3f field named "size". */
  float* getSize ();

  /** Assign 3-tuple float* value (-inf,inf) to initializeOnly SFVec3f field named "size". */
  void setSize (float* value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** QuadSet defines a concrete node class that extends class X3DComposedGeometryNode.
  * QuadSet is a geometry node that defines quadrilaterals. */

class QuadSet : public X3DComposedGeometryNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ReceiverPdu defines a concrete node class that extends classs X3DNetworkSensorNode, X3DBoundedObject. */

class ReceiverPdu : public X3DNetworkSensorNode, X3DBoundedObject
{
  /** Provide bool value from outputOnly SFBool field named "isNetworkReader". */
  bool getIsNetworkReader ();

  /** Provide bool value from outputOnly SFBool field named "isNetworkWriter". */
  bool getIsNetworkWriter ();

  /** Provide bool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  bool getIsRtpHeaderHeard ();

  /** Provide bool value from outputOnly SFBool field named "isStandAlone". */
  bool getIsStandAlone ();

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "timestamp". */
  double getTimestamp ();

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide int value from inputOutput SFInt32 field named "whichGeometry". */
  int getWhichGeometry ();

  /** Assign int value to inputOutput SFInt32 field named "whichGeometry". */
  void setWhichGeometry (int value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "readInterval". */
  double getReadInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "readInterval". */
  void setReadInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "writeInterval". */
  double getWriteInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "writeInterval". */
  void setWriteInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "networkMode". */
  MFString getNetworkMode ();

  /** Assign MFString value to inputOutput SFString field named "networkMode". */
  void setNetworkMode (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int getSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void setSiteID (int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int getApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void setApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int getEntityID ();

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void setEntityID (int value);

  /** Provide MFString value from inputOutput SFString field named "address". */
  MFString getAddress ();

  /** Assign MFString value to inputOutput SFString field named "address". */
  void setAddress (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int getPort ();

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void setPort (int value);

  /** Provide MFString value from inputOutput SFString field named "multicastRelayHost". */
  MFString getMulticastRelayHost ();

  /** Assign MFString value to inputOutput SFString field named "multicastRelayHost". */
  void setMulticastRelayHost (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int getMulticastRelayPort ();

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void setMulticastRelayPort (int value);

  /** Provide bool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  bool getRtpHeaderExpected ();

  /** Assign bool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void setRtpHeaderExpected (bool value);

  /** Provide int value from inputOutput SFInt32 field named "radioID". */
  int getRadioID ();

  /** Assign int value to inputOutput SFInt32 field named "radioID". */
  void setRadioID (int value);

  /** Provide float value from inputOutput SFFloat field named "receivedPower". */
  float getReceivedPower ();

  /** Assign float value to inputOutput SFFloat field named "receivedPower". */
  void setReceivedPower (float value);

  /** Provide int value from inputOutput SFInt32 field named "receiverState". */
  int getReceiverState ();

  /** Assign int value to inputOutput SFInt32 field named "receiverState". */
  void setReceiverState (int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterSiteID". */
  int getTransmitterSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "transmitterSiteID". */
  void setTransmitterSiteID (int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterApplicationID". */
  int getTransmitterApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "transmitterApplicationID". */
  void setTransmitterApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterEntityID". */
  int getTransmitterEntityID ();

  /** Assign int value to inputOutput SFInt32 field named "transmitterEntityID". */
  void setTransmitterEntityID (int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterRadioID". */
  int getTransmitterRadioID ();

  /** Assign int value to inputOutput SFInt32 field named "transmitterRadioID". */
  void setTransmitterRadioID (int value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  double* getGeoCoords ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void setGeoCoords (double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Rectangle2D defines a concrete node class that extends class X3DGeometryNode. */

class Rectangle2D : public X3DGeometryNode
{
  /** Provide 2-tuple float* value (-inf,inf) from initializeOnly SFVec2f field named "size". */
  float* getSize ();

  /** Assign 2-tuple float* value (-inf,inf) to initializeOnly SFVec2f field named "size". */
  void setSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** RigidBody defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject.
  * RigidBody describes a collection of shapes with a mass distribution that is affected by the physics model. */

class RigidBody : public X3DChildNode, X3DBoundedObject
{
  /** Provide float value from inputOutput SFFloat field named "angularDampingFactor". */
  float getAngularDampingFactor ();

  /** Assign float value to inputOutput SFFloat field named "angularDampingFactor". */
  void setAngularDampingFactor (float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "angularVelocity". */
  float* getAngularVelocity ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "angularVelocity". */
  void setAngularVelocity (float* value);

  /** Provide bool value from inputOutput SFBool field named "autoDamp". */
  bool getAutoDamp ();

  /** Assign bool value to inputOutput SFBool field named "autoDamp". */
  void setAutoDamp (bool value);

  /** Provide bool value from inputOutput SFBool field named "autoDisable". */
  bool getAutoDisable ();

  /** Assign bool value to inputOutput SFBool field named "autoDisable". */
  void setAutoDisable (bool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "centerOfMass". */
  float* getCenterOfMass ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "centerOfMass". */
  void setCenterOfMass (float* value);

  /** Provide float value from inputOutput SFFloat field named "disableAngularSpeed". */
  float getDisableAngularSpeed ();

  /** Assign float value to inputOutput SFFloat field named "disableAngularSpeed". */
  void setDisableAngularSpeed (float value);

  /** Provide float value from inputOutput SFFloat field named "disableLinearSpeed". */
  float getDisableLinearSpeed ();

  /** Assign float value to inputOutput SFFloat field named "disableLinearSpeed". */
  void setDisableLinearSpeed (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "disableTime". */
  double getDisableTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "disableTime". */
  void setDisableTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "finiteRotationAxis". */
  float* getFiniteRotationAxis ();

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "finiteRotationAxis". */
  void setFiniteRotationAxis (float* value);

  /** Provide bool value from inputOutput SFBool field named "fixed". */
  bool getFixed ();

  /** Assign bool value to inputOutput SFBool field named "fixed". */
  void setFixed (bool value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "forces". */
  float* getForces ();

  /** Provide number of 3-tuple primitive values in "forces" array */
  int getNumForces ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "forces". */
  void setForces (float* values);

  /** Provide float* value from inputOutput SFMatrix3f field named "inertia". */
  float* getInertia ();

  /** Assign float* value to inputOutput SFMatrix3f field named "inertia". */
  void setInertia (float* value);

  /** Provide float value from inputOutput SFFloat field named "linearDampingFactor". */
  float getLinearDampingFactor ();

  /** Assign float value to inputOutput SFFloat field named "linearDampingFactor". */
  void setLinearDampingFactor (float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "linearVelocity". */
  float* getLinearVelocity ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "linearVelocity". */
  void setLinearVelocity (float* value);

  /** Provide float value from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value to inputOutput SFFloat field named "mass". */
  void setMass (float value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* getOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void setOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "torques". */
  float* getTorques ();

  /** Provide number of 3-tuple primitive values in "torques" array */
  int getNumTorques ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "torques". */
  void setTorques (float* values);

  /** Provide bool value in radians from inputOutput SFBool field named "useFiniteRotation". */
  bool getUseFiniteRotation ();

  /** Assign bool value in radians to inputOutput SFBool field named "useFiniteRotation". */
  void setUseFiniteRotation (bool value);

  /** Provide bool value from inputOutput SFBool field named "useGlobalGravity". */
  bool getUseGlobalGravity ();

  /** Assign bool value to inputOutput SFBool field named "useGlobalGravity". */
  void setUseGlobalGravity (bool value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNBodyCollidableNode type field named "geometry". */
  X3DNode* getGeometry ();

  /** Provide number of nodes in "geometry" array */
  int getNumGeometry ();

  /** Assign X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollidableNode type field named "geometry". */
  void setGeometry (X3DNBodyCollidableNode* nodes);

  /** Assign single X3DNBodyCollidableNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "geometry" */
  void setGeometry (X3DNBodyCollidableNode node);

  /** Assign X3DNBodyCollidableNode* value (using a properly typed protoInstance array) to inputOutput X3DNBodyCollidableNode type field named "geometry". */
  void setGeometry (X3DPrototypeInstance node);

  /** Assign X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollidableNode type field named "geometry". */
  void setGeometry (X3DNode nodes);

  /** Provide Sphere|Box|Cone value (using a properly typed node or X3DPrototypeInstance) from inputOutput Sphere|Box|Cone type field named "massDensityModel". */
  X3DNode* getMassDensityModel ();

  /** Assign Sphere|Box|Cone value (using a properly typed node) to inputOutput Sphere|Box|Cone type field named "massDensityModel". */
  void setMassDensityModel (X3DNode node);

  /** Assign Sphere|Box|Cone value (using a properly typed protoInstance) */
  void setMassDensityModel (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** RigidBodyCollection defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject.
  * RigidBodyCollection represents a system of bodies that interact within a single physics model. */

class RigidBodyCollection : public X3DChildNode, X3DBoundedObject
{
  /** Provide bool value from inputOutput SFBool field named "autoDisable". */
  bool getAutoDisable ();

  /** Assign bool value to inputOutput SFBool field named "autoDisable". */
  void setAutoDisable (bool value);

  /** Provide float value from inputOutput SFFloat field named "constantForceMix". */
  float getConstantForceMix ();

  /** Assign float value to inputOutput SFFloat field named "constantForceMix". */
  void setConstantForceMix (float value);

  /** Provide float value from inputOutput SFFloat field named "contactSurfaceThickness". */
  float getContactSurfaceThickness ();

  /** Assign float value to inputOutput SFFloat field named "contactSurfaceThickness". */
  void setContactSurfaceThickness (float value);

  /** Provide float value from inputOutput SFFloat field named "disableAngularSpeed". */
  float getDisableAngularSpeed ();

  /** Assign float value to inputOutput SFFloat field named "disableAngularSpeed". */
  void setDisableAngularSpeed (float value);

  /** Provide float value from inputOutput SFFloat field named "disableLinearSpeed". */
  float getDisableLinearSpeed ();

  /** Assign float value to inputOutput SFFloat field named "disableLinearSpeed". */
  void setDisableLinearSpeed (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "disableTime". */
  double getDisableTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "disableTime". */
  void setDisableTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "errorCorrection". */
  float getErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "errorCorrection". */
  void setErrorCorrection (float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "gravity". */
  float* getGravity ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "gravity". */
  void setGravity (float* value);

  /** Provide int value from inputOutput SFInt32 field named "iterations". */
  int getIterations ();

  /** Assign int value to inputOutput SFInt32 field named "iterations". */
  void setIterations (int value);

  /** Provide float value from inputOutput SFFloat field named "maxCorrectionSpeed". */
  float getMaxCorrectionSpeed ();

  /** Assign float value to inputOutput SFFloat field named "maxCorrectionSpeed". */
  void setMaxCorrectionSpeed (float value);

  /** Provide bool value from inputOutput SFBool field named "preferAccuracy". */
  bool getPreferAccuracy ();

  /** Assign bool value to inputOutput SFBool field named "preferAccuracy". */
  void setPreferAccuracy (bool value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign Contact* value (using a properly typed node array) to inputOnly Contact type field named "set_contacts". */
  void setContacts (Contact* nodes);

  /** Assign single Contact* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "set_contacts" */
  void setContacts (Contact node);

  /** Assign Contact* value (using a properly typed protoInstance array) to inputOnly Contact type field named "set_contacts". */
  void setContacts (X3DPrototypeInstance node);

  /** Assign Contact* value (using a properly typed node array) to inputOnly Contact type field named "set_contacts". */
  void setContacts (X3DNode nodes);

  /** Provide RigidBody* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput RigidBody type field named "bodies". */
  X3DNode* getBodies ();

  /** Provide number of nodes in "bodies" array */
  int getNumBodies ();

  /** Assign RigidBody* value (using a properly typed node array) to inputOutput RigidBody type field named "bodies". */
  void setBodies (RigidBody* nodes);

  /** Assign single RigidBody* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "bodies" */
  void setBodies (RigidBody node);

  /** Assign RigidBody* value (using a properly typed protoInstance array) to inputOutput RigidBody type field named "bodies". */
  void setBodies (X3DPrototypeInstance node);

  /** Assign RigidBody* value (using a properly typed node array) to inputOutput RigidBody type field named "bodies". */
  void setBodies (X3DNode nodes);

  /** Provide X3DRigidJointNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DRigidJointNode type field named "joints". */
  X3DNode* getJoints ();

  /** Provide number of nodes in "joints" array */
  int getNumJoints ();

  /** Assign X3DRigidJointNode* value (using a properly typed node array) to inputOutput X3DRigidJointNode type field named "joints". */
  void setJoints (X3DRigidJointNode* nodes);

  /** Assign single X3DRigidJointNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "joints" */
  void setJoints (X3DRigidJointNode node);

  /** Assign X3DRigidJointNode* value (using a properly typed protoInstance array) to inputOutput X3DRigidJointNode type field named "joints". */
  void setJoints (X3DPrototypeInstance node);

  /** Assign X3DRigidJointNode* value (using a properly typed node array) to inputOutput X3DRigidJointNode type field named "joints". */
  void setJoints (X3DNode nodes);

  /** Provide CollisionCollection value (using a properly typed node or X3DPrototypeInstance) from initializeOnly CollisionCollection type field named "collider". */
  X3DNode* getCollider ();

  /** Assign CollisionCollection value (using a properly typed node) to initializeOnly CollisionCollection type field named "collider". */
  void setCollider (CollisionCollection node);

  /** Assign CollisionCollection value (using a properly typed protoInstance) */
  void setCollider (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ROUTE defines a concrete node class that extends classs X3DStatement, X3DChildNode.
  * ROUTE connects output fields of event-producing nodes to input fields of event-consuming nodes. */

class ROUTE : public X3DStatement, X3DChildNode
{
  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "fromNode". */
  xs:IDREF getFromNode ();

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "fromNode". */
  void setFromNode (xs:IDREF value);

  /** Provide MFString value from inputOutput SFString field named "fromField". */
  MFString getFromField ();

  /** Assign MFString value to inputOutput SFString field named "fromField". */
  void setFromField (MFString value);

  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "toNode". */
  xs:IDREF getToNode ();

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "toNode". */
  void setToNode (xs:IDREF value);

  /** Provide MFString value from inputOutput SFString field named "toField". */
  MFString getToField ();

  /** Assign MFString value to inputOutput SFString field named "toField". */
  void setToField (MFString value);
}
;/** ScalarChaser defines a concrete node class that extends class X3DChaserNode. */

class ScalarChaser : public X3DChaserNode
{
  /** Assign float value to inputOnly SFFloat field named "set_destination". */
  void setDestination (float value);

  /** Assign float value to inputOnly SFFloat field named "set_value". */
  void setValue (float value);

  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float getValue ();

  /** Provide float value from initializeOnly SFFloat field named "initialDestination". */
  float getInitialDestination ();

  /** Assign float value to initializeOnly SFFloat field named "initialDestination". */
  void setInitialDestination (float value);

  /** Provide float value from initializeOnly SFFloat field named "initialValue". */
  float getInitialValue ();

  /** Assign float value to initializeOnly SFFloat field named "initialValue". */
  void setInitialValue (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from initializeOnly SFTime field named "duration". */
  double getDuration ();

  /** Assign double value in seconds [0,inf) to initializeOnly SFTime field named "duration". */
  void setDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ScalarDamper defines a concrete node class that extends class X3DDamperNode. */

class ScalarDamper : public X3DDamperNode
{
  /** Assign float value to inputOnly SFFloat field named "set_destination". */
  void setDestination (float value);

  /** Assign float value to inputOnly SFFloat field named "set_value". */
  void setValue (float value);

  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float getValue ();

  /** Provide float value from initializeOnly SFFloat field named "initialDestination". */
  float getInitialDestination ();

  /** Assign float value to initializeOnly SFFloat field named "initialDestination". */
  void setInitialDestination (float value);

  /** Provide float value from initializeOnly SFFloat field named "initialValue". */
  float getInitialValue ();

  /** Assign float value to initializeOnly SFFloat field named "initialValue". */
  void setInitialValue (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tau". */
  double getTau ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tau". */
  void setTau (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float getTolerance ();

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void setTolerance (float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ScalarInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class ScalarInterpolator : public X3DInterpolatorNode
{
  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float getValue ();

  /** Provide float* value from inputOutput MFFloat field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign float* value to inputOutput MFFloat field named "keyValue". */
  void setKeyValue (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "keyValue" */
  void setKeyValue (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Scene defines a concrete node class that extends class X3DStatement.
  * Scene is the implicit root node of the X3D scene graph. */

class Scene : public X3DStatement
{
  /** Provide X3DChildNode|X3DMetadataObject|LayerSet* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode|X3DMetadataObject|LayerSet type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode|X3DMetadataObject|LayerSet* value (using a properly typed node array) to inputOutput X3DChildNode|X3DMetadataObject|LayerSet type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign X3DChildNode|X3DMetadataObject|LayerSet* value (using a properly typed protoInstance array) to inputOutput X3DChildNode|X3DMetadataObject|LayerSet type field named "children". */
  void setChildren (X3DPrototypeInstance node);
}
;/** ScreenFontStyle defines a concrete node class that extends class X3DFontStyleNode. */

class ScreenFontStyle : public X3DFontStyleNode
{
  /** Provide MFString value from inputOutput SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to inputOutput SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide MFString* value from inputOutput MFString field named "family". */
  MFString* getFamily ();

  /** Provide number of primitive values in "family" array */
  int getNumFamily ();

  /** Assign MFString* value to inputOutput MFString field named "family". */
  void setFamily (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "family". */
  MFString* getFamily ();

  /** Provide number of primitive values in "family" array */
  int getNumFamily ();

  /** Assign MFString* value to inputOutput MFString field named "family". */
  void setFamily (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "family" */
  void setFamily (MFString value);

  /** Provide bool value from inputOutput SFBool field named "horizontal". */
  bool getHorizontal ();

  /** Assign bool value to inputOutput SFBool field named "horizontal". */
  void setHorizontal (bool value);

  /** Provide MFString* value from inputOutput MFString field named "justify". */
  MFString* getJustify ();

  /** Provide number of primitive values in "justify" array */
  int getNumJustify ();

  /** Assign MFString* value to inputOutput MFString field named "justify". */
  void setJustify (MFString* values);

  /** Provide MFString value from initializeOnly SFString field named "language". */
  MFString getLanguage ();

  /** Assign MFString value to initializeOnly SFString field named "language". */
  void setLanguage (MFString value);

  /** Provide bool value from inputOutput SFBool field named "leftToRight". */
  bool getLeftToRight ();

  /** Assign bool value to inputOutput SFBool field named "leftToRight". */
  void setLeftToRight (bool value);

  /** Provide float value (0,inf) from inputOutput SFFloat field named "pointSize". */
  float getPointSize ();

  /** Assign float value (0,inf) to inputOutput SFFloat field named "pointSize". */
  void setPointSize (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "spacing". */
  float getSpacing ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "spacing". */
  void setSpacing (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "style". */
  MFString getStyle ();

  /** Assign MFString value to inputOutput SFString field named "style". */
  void setStyle (MFString value);

  /** Provide bool value from inputOutput SFBool field named "topToBottom". */
  bool getTopToBottom ();

  /** Assign bool value to inputOutput SFBool field named "topToBottom". */
  void setTopToBottom (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ScreenGroup defines a concrete node class that extends class X3DGroupingNode. */

class ScreenGroup : public X3DGroupingNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Script defines a concrete node class that extends class X3DScriptNode. */

class Script : public X3DScriptNode
{
  /** Provide MFString value from inputOutput SFString field named "sourceCode". */
  MFString getSourceCode ();

  /** Assign MFString value to inputOutput SFString field named "sourceCode". */
  void setSourceCode (MFString value);

  /** Provide bool value from initializeOnly SFBool field named "directOutput". */
  bool getDirectOutput ();

  /** Assign bool value to initializeOnly SFBool field named "directOutput". */
  void setDirectOutput (bool value);

  /** Provide bool value from initializeOnly SFBool field named "mustEvaluate". */
  bool getMustEvaluate ();

  /** Assign bool value to initializeOnly SFBool field named "mustEvaluate". */
  void setMustEvaluate (bool value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  X3DNode* getField ();

  /** Provide number of nodes in "field" array */
  int getNumField ();

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (field* nodes);

  /** Assign single field* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "field" */
  void setField (field node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void setField (X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SegmentedVolumeData defines a concrete node class that extends class X3DVolumeDataNode. */

class SegmentedVolumeData : public X3DVolumeDataNode
{
  /** Provide bool* value from inputOutput MFBool field named "segmentEnabled". */
  bool* getSegmentEnabled ();

  /** Provide number of primitive values in "segmentEnabled" array */
  int getNumSegmentEnabled ();

  /** Assign bool* value to inputOutput MFBool field named "segmentEnabled". */
  void setSegmentEnabled (bool* values);

  /** Assign single bool* value as the MFBool array for inputOutput field named "segmentEnabled" */
  void setSegmentEnabled (bool value);

  /** Provide X3DVolumeRenderStyleNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  X3DNode* getRenderStyle ();

  /** Provide number of nodes in "renderStyle" array */
  int getNumRenderStyle ();

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DVolumeRenderStyleNode* nodes);

  /** Assign single X3DVolumeRenderStyleNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "renderStyle" */
  void setRenderStyle (X3DVolumeRenderStyleNode node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed protoInstance array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DPrototypeInstance node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DNode nodes);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "segmentIdentifiers". */
  X3DNode* getSegmentIdentifiers ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "segmentIdentifiers". */
  void setSegmentIdentifiers (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setSegmentIdentifiers (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  X3DNode* getVoxels ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void setVoxels (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setVoxels (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "dimensions". */
  float* getDimensions ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "dimensions". */
  void setDimensions (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ShadedVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode.
  * All fields fully supported except shadows supported with at least Phong shading at level 3. All fields fully supported with at least Phong shading and Henyey-Greenstein phase function, shadows fully supported at level 4. */

class ShadedVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide MFString value from initializeOnly SFString field named "phaseFunction". */
  MFString getPhaseFunction ();

  /** Assign MFString value to initializeOnly SFString field named "phaseFunction". */
  void setPhaseFunction (MFString value);

  /** Provide bool value from inputOutput SFBool field named "lighting". */
  bool getLighting ();

  /** Assign bool value to inputOutput SFBool field named "lighting". */
  void setLighting (bool value);

  /** Provide bool value from inputOutput SFBool field named "shadows". */
  bool getShadows ();

  /** Assign bool value to inputOutput SFBool field named "shadows". */
  void setShadows (bool value);

  /** Provide MFString value from initializeOnly SFString field named "phaseFunction". */
  MFString getPhaseFunction ();

  /** Assign MFString value to initializeOnly SFString field named "phaseFunction". */
  void setPhaseFunction (MFString value);

  /** Provide X3DMaterialNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMaterialNode type field named "material". */
  X3DNode* getMaterial ();

  /** Assign X3DMaterialNode value (using a properly typed node) to inputOutput X3DMaterialNode type field named "material". */
  void setMaterial (X3DMaterialNode node);

  /** Assign X3DMaterialNode value (using a properly typed protoInstance) */
  void setMaterial (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  X3DNode* getSurfaceNormals ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void setSurfaceNormals (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setSurfaceNormals (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ShaderPart defines a concrete node class that extends classs X3DNodeMixedContent, X3DUrlObject.
  * ShaderPart can contain a CDATA section of plain-text source code. */

class ShaderPart : public X3DNodeMixedContent, X3DUrlObject
{
  /** Provide MFString value from initializeOnly SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to initializeOnly SFString field named "type". */
  void setType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "sourceCode". */
  MFString getSourceCode ();

  /** Assign MFString value to inputOutput SFString field named "sourceCode". */
  void setSourceCode (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to initializeOnly SFString field named "type". */
  void setType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ShaderProgram defines a concrete node class that extends classs X3DNodeMixedContent, X3DUrlObject, X3DProgrammableShaderObject.
  * ShaderProgram can contain field declarations and a CDATA section of plain-text source code. */

class ShaderProgram : public X3DNodeMixedContent, X3DUrlObject, X3DProgrammableShaderObject
{
  /** Provide MFString value from initializeOnly SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to initializeOnly SFString field named "type". */
  void setType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "sourceCode". */
  MFString getSourceCode ();

  /** Assign MFString value to inputOutput SFString field named "sourceCode". */
  void setSourceCode (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "type". */
  MFString getType ();

  /** Assign MFString value to initializeOnly SFString field named "type". */
  void setType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "load". */
  bool getLoad ();

  /** Assign bool value to inputOutput SFBool field named "load". */
  void setLoad (bool value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefresh". */
  double getAutoRefresh ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefresh". */
  void setAutoRefresh (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double getAutoRefreshTimeLimit ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void setAutoRefreshTimeLimit (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString* value from inputOutput MFString field named "url". */
  MFString* getUrl ();

  /** Provide number of primitive values in "url" array */
  int getNumUrl ();

  /** Assign MFString* value to inputOutput MFString field named "url". */
  void setUrl (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "url" */
  void setUrl (MFString value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  X3DNode* getField ();

  /** Provide number of nodes in "field" array */
  int getNumField ();

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (field* nodes);

  /** Assign single field* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "field" */
  void setField (field node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void setField (X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void setField (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Shape defines a concrete node class that extends class X3DShapeNode. */

class Shape : public X3DShapeNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "castShadow". */
  bool getCastShadow ();

  /** Assign bool value to inputOutput SFBool field named "castShadow". */
  void setCastShadow (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DAppearanceNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DAppearanceNode type field named "appearance". */
  X3DNode* getAppearance ();

  /** Assign X3DAppearanceNode value (using a properly typed node) to inputOutput X3DAppearanceNode type field named "appearance". */
  void setAppearance (X3DAppearanceNode node);

  /** Assign X3DAppearanceNode value (using a properly typed protoInstance) */
  void setAppearance (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  X3DNode* getGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void setGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SignalPdu defines a concrete node class that extends classs X3DNetworkSensorNode, X3DBoundedObject. */

class SignalPdu : public X3DNetworkSensorNode, X3DBoundedObject
{
  /** Provide bool value from outputOnly SFBool field named "isNetworkReader". */
  bool getIsNetworkReader ();

  /** Provide bool value from outputOnly SFBool field named "isNetworkWriter". */
  bool getIsNetworkWriter ();

  /** Provide bool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  bool getIsRtpHeaderHeard ();

  /** Provide bool value from outputOnly SFBool field named "isStandAlone". */
  bool getIsStandAlone ();

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "timestamp". */
  double getTimestamp ();

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide int value from inputOutput SFInt32 field named "whichGeometry". */
  int getWhichGeometry ();

  /** Assign int value to inputOutput SFInt32 field named "whichGeometry". */
  void setWhichGeometry (int value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "readInterval". */
  double getReadInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "readInterval". */
  void setReadInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "writeInterval". */
  double getWriteInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "writeInterval". */
  void setWriteInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "networkMode". */
  MFString getNetworkMode ();

  /** Assign MFString value to inputOutput SFString field named "networkMode". */
  void setNetworkMode (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int getSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void setSiteID (int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int getApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void setApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int getEntityID ();

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void setEntityID (int value);

  /** Provide MFString value from inputOutput SFString field named "address". */
  MFString getAddress ();

  /** Assign MFString value to inputOutput SFString field named "address". */
  void setAddress (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int getPort ();

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void setPort (int value);

  /** Provide MFString value from inputOutput SFString field named "multicastRelayHost". */
  MFString getMulticastRelayHost ();

  /** Assign MFString value to inputOutput SFString field named "multicastRelayHost". */
  void setMulticastRelayHost (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int getMulticastRelayPort ();

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void setMulticastRelayPort (int value);

  /** Provide bool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  bool getRtpHeaderExpected ();

  /** Assign bool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void setRtpHeaderExpected (bool value);

  /** Provide int value from inputOutput SFInt32 field named "radioID". */
  int getRadioID ();

  /** Assign int value to inputOutput SFInt32 field named "radioID". */
  void setRadioID (int value);

  /** Provide int value from inputOutput SFInt32 field named "encodingScheme". */
  int getEncodingScheme ();

  /** Assign int value to inputOutput SFInt32 field named "encodingScheme". */
  void setEncodingScheme (int value);

  /** Provide int value from inputOutput SFInt32 field named "tdlType". */
  int getTdlType ();

  /** Assign int value to inputOutput SFInt32 field named "tdlType". */
  void setTdlType (int value);

  /** Provide int value from inputOutput SFInt32 field named "sampleRate". */
  int getSampleRate ();

  /** Assign int value to inputOutput SFInt32 field named "sampleRate". */
  void setSampleRate (int value);

  /** Provide int value from inputOutput SFInt32 field named "samples". */
  int getSamples ();

  /** Assign int value to inputOutput SFInt32 field named "samples". */
  void setSamples (int value);

  /** Provide int value from inputOutput SFInt32 field named "dataLength". */
  int getDataLength ();

  /** Assign int value to inputOutput SFInt32 field named "dataLength". */
  void setDataLength (int value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "data". */
  MFInt32 getData ();

  /** Provide number of primitive values in "data" array */
  int getNumData ();

  /** Assign MFInt32 value to inputOutput MFInt32 field named "data". */
  void setData (MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "data" */
  void setData (SFInt32 value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  double* getGeoCoords ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void setGeoCoords (double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SilhouetteEnhancementVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class SilhouetteEnhancementVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide float value [0,1) from inputOutput SFFloat field named "silhouetteBoundaryOpacity". */
  float getSilhouetteBoundaryOpacity ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "silhouetteBoundaryOpacity". */
  void setSilhouetteBoundaryOpacity (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "silhouetteRetainedOpacity". */
  float getSilhouetteRetainedOpacity ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "silhouetteRetainedOpacity". */
  void setSilhouetteRetainedOpacity (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "silhouetteSharpness". */
  float getSilhouetteSharpness ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "silhouetteSharpness". */
  void setSilhouetteSharpness (float value) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  X3DNode* getSurfaceNormals ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void setSurfaceNormals (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setSurfaceNormals (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SingleAxisHingeJoint defines a concrete node class that extends class X3DRigidJointNode.
  * SingleAxisHingeJoint has single axis about which to rotate, similar to a traditional door hinge. Contains two RigidBody nodes (containerField values body1, body2). */

class SingleAxisHingeJoint : public X3DRigidJointNode
{
  /** Provide float value in radians from outputOnly SFFloat field named "angle". */
  float getAngle ();

  /** Provide float value in radians from outputOnly SFFloat field named "angleRate". */
  float getAngleRate ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  float* getBody1AnchorPoint ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  float* getBody2AnchorPoint ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  float* getAnchorPoint ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void setAnchorPoint (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis". */
  float* getAxis ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis". */
  void setAxis (float* value);

  /** Provide float value in radians from inputOutput SFFloat field named "maxAngle". */
  float getMaxAngle ();

  /** Assign float value in radians to inputOutput SFFloat field named "maxAngle". */
  void setMaxAngle (float angle);

  /** Provide float value in radians from inputOutput SFFloat field named "minAngle". */
  float getMinAngle ();

  /** Assign float value in radians to inputOutput SFFloat field named "minAngle". */
  void setMinAngle (float angle);

  /** Provide float value from inputOutput SFFloat field named "stopBounce". */
  float getStopBounce ();

  /** Assign float value to inputOutput SFFloat field named "stopBounce". */
  void setStopBounce (float value);

  /** Provide float value from inputOutput SFFloat field named "stopErrorCorrection". */
  float getStopErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "stopErrorCorrection". */
  void setStopErrorCorrection (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "forceOutput" */
  void setForceOutput (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  X3DNode* getBody1 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void setBody1 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  X3DNode* getBody2 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void setBody2 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SliderJoint defines a concrete node class that extends class X3DRigidJointNode.
  * SliderJoint constrains all movement between body1 and body2 along a single axis. Contains two RigidBody nodes (containerField values body1, body2). */

class SliderJoint : public X3DRigidJointNode
{
  /** Provide float value from outputOnly SFFloat field named "separation". */
  float getSeparation ();

  /** Provide float value from outputOnly SFFloat field named "separationRate". */
  float getSeparationRate ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis". */
  float* getAxis ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis". */
  void setAxis (float* value);

  /** Provide float value from inputOutput SFFloat field named "maxSeparation". */
  float getMaxSeparation ();

  /** Assign float value to inputOutput SFFloat field named "maxSeparation". */
  void setMaxSeparation (float value);

  /** Provide float value from inputOutput SFFloat field named "minSeparation". */
  float getMinSeparation ();

  /** Assign float value to inputOutput SFFloat field named "minSeparation". */
  void setMinSeparation (float value);

  /** Provide float value from inputOutput SFFloat field named "sliderForce". */
  float getSliderForce ();

  /** Assign float value to inputOutput SFFloat field named "sliderForce". */
  void setSliderForce (float value);

  /** Provide float value from inputOutput SFFloat field named "stopBounce". */
  float getStopBounce ();

  /** Assign float value to inputOutput SFFloat field named "stopBounce". */
  void setStopBounce (float value);

  /** Provide float value from inputOutput SFFloat field named "stopErrorCorrection". */
  float getStopErrorCorrection ();

  /** Assign float value to inputOutput SFFloat field named "stopErrorCorrection". */
  void setStopErrorCorrection (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "forceOutput" */
  void setForceOutput (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  X3DNode* getBody1 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void setBody1 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  X3DNode* getBody2 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void setBody2 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Sound defines a concrete node class that extends class X3DSoundNode. */

class Sound : public X3DSoundNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide float value from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  float* getLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void setLocation (float* value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "maxBack". */
  float getMaxBack ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "maxBack". */
  void setMaxBack (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "maxFront". */
  float getMaxFront ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "maxFront". */
  void setMaxFront (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "minBack". */
  float getMinBack ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "minBack". */
  void setMinBack (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "minFront". */
  float getMinFront ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "minFront". */
  void setMinFront (float value) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "priority". */
  float getPriority ();

  /** Assign float value to inputOutput SFFloat field named "priority". */
  void setPriority (float value);

  /** Provide bool value from initializeOnly SFBool field named "spatialize". */
  bool getSpatialize ();

  /** Assign bool value to initializeOnly SFBool field named "spatialize". */
  void setSpatialize (bool value);

  /** Provide X3DSoundSourceNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSoundSourceNode type field named "source". */
  X3DNode* getSource ();

  /** Assign X3DSoundSourceNode value (using a properly typed node) to inputOutput X3DSoundSourceNode type field named "source". */
  void setSource (X3DSoundSourceNode node);

  /** Assign X3DSoundSourceNode value (using a properly typed protoInstance) */
  void setSource (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SpatialSound defines a concrete node class that extends class X3DSoundNode. */

class SpatialSound : public X3DSoundNode
{
  /** Provide float value in radians [0,6.2832) from inputOutput SFFloat field named "coneInnerAngle". */
  float getConeInnerAngle ();

  /** Assign float value in radians [0,6.2832) to inputOutput SFFloat field named "coneInnerAngle". */
  void setConeInnerAngle (float angle) throw (InvalidFieldValueException);

  /** Provide float value in radians [0,6.2832) from inputOutput SFFloat field named "coneOuterAngle". */
  float getConeOuterAngle ();

  /** Assign float value in radians [0,6.2832) to inputOutput SFFloat field named "coneOuterAngle". */
  void setConeOuterAngle (float angle) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "coneOuterGain". */
  float getConeOuterGain ();

  /** Assign float value to inputOutput SFFloat field named "coneOuterGain". */
  void setConeOuterGain (float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide MFString value from inputOutput SFString field named "distanceModel". */
  MFString getDistanceModel ();

  /** Assign MFString value to inputOutput SFString field named "distanceModel". */
  void setDistanceModel (MFString value);

  /** Provide bool value from inputOutput SFBool field named "dopplerEnabled". */
  bool getDopplerEnabled ();

  /** Assign bool value to inputOutput SFBool field named "dopplerEnabled". */
  void setDopplerEnabled (bool value);

  /** Provide bool value from inputOutput SFBool field named "enableHRTF". */
  bool getEnableHRTF ();

  /** Assign bool value to inputOutput SFBool field named "enableHRTF". */
  void setEnableHRTF (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide float value from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  float* getLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void setLocation (float* value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "maxDistance". */
  float getMaxDistance ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "maxDistance". */
  void setMaxDistance (float value) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "priority". */
  float getPriority ();

  /** Assign float value to inputOutput SFFloat field named "priority". */
  void setPriority (float value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "referenceDistance". */
  float getReferenceDistance ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "referenceDistance". */
  void setReferenceDistance (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "rolloffFactor". */
  float getRolloffFactor ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "rolloffFactor". */
  void setRolloffFactor (float value) throw (InvalidFieldValueException);

  /** Provide bool value from initializeOnly SFBool field named "spatialize". */
  bool getSpatialize ();

  /** Assign bool value to initializeOnly SFBool field named "spatialize". */
  void setSpatialize (bool value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Sphere defines a concrete node class that extends class X3DGeometryNode. */

class Sphere : public X3DGeometryNode
{
  /** Provide float value (0,inf) from initializeOnly SFFloat field named "radius". */
  float getRadius ();

  /** Assign float value (0,inf) to initializeOnly SFFloat field named "radius". */
  void setRadius (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SphereSensor defines a concrete node class that extends class X3DDragSensorNode. */

class SphereSensor : public X3DDragSensorNode
{
  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "rotation_changed". */
  float* getRotation ();

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "offset". */
  float* getOffset ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "offset". */
  void setOffset (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "trackPoint_changed". */
  float* getTrackPoint ();

  /** Provide bool value from inputOutput SFBool field named "autoOffset". */
  bool getAutoOffset ();

  /** Assign bool value to inputOutput SFBool field named "autoOffset". */
  void setAutoOffset (bool value);

  /** Provide bool value from outputOnly SFBool field named "isOver". */
  bool getIsOver ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SplinePositionInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class SplinePositionInterpolator : public X3DInterpolatorNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  float* getValue ();

  /** Provide bool value from initializeOnly SFBool field named "closed". */
  bool getClosed ();

  /** Assign bool value to initializeOnly SFBool field named "closed". */
  void setClosed (bool value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void setKeyValue (float* values);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyVelocity". */
  float* getKeyVelocity ();

  /** Provide number of 3-tuple primitive values in "keyVelocity" array */
  int getNumKeyVelocity ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyVelocity". */
  void setKeyVelocity (float* values);

  /** Provide bool value from inputOutput SFBool field named "normalizeVelocity". */
  bool getNormalizeVelocity ();

  /** Assign bool value to inputOutput SFBool field named "normalizeVelocity". */
  void setNormalizeVelocity (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SplinePositionInterpolator2D defines a concrete node class that extends class X3DInterpolatorNode. */

class SplinePositionInterpolator2D : public X3DInterpolatorNode
{
  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  float* getValue ();

  /** Provide bool value from initializeOnly SFBool field named "closed". */
  bool getClosed ();

  /** Assign bool value to initializeOnly SFBool field named "closed". */
  void setClosed (bool value);

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 2-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyValue". */
  void setKeyValue (float* values);

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyVelocity". */
  float* getKeyVelocity ();

  /** Provide number of 2-tuple primitive values in "keyVelocity" array */
  int getNumKeyVelocity ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyVelocity". */
  void setKeyVelocity (float* values);

  /** Provide bool value from inputOutput SFBool field named "normalizeVelocity". */
  bool getNormalizeVelocity ();

  /** Assign bool value to inputOutput SFBool field named "normalizeVelocity". */
  void setNormalizeVelocity (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SplineScalarInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class SplineScalarInterpolator : public X3DInterpolatorNode
{
  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float getValue ();

  /** Provide bool value from initializeOnly SFBool field named "closed". */
  bool getClosed ();

  /** Assign bool value to initializeOnly SFBool field named "closed". */
  void setClosed (bool value);

  /** Provide float* value from inputOutput MFFloat field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign float* value to inputOutput MFFloat field named "keyValue". */
  void setKeyValue (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "keyValue" */
  void setKeyValue (float value);

  /** Provide float* value from inputOutput MFFloat field named "keyVelocity". */
  float* getKeyVelocity ();

  /** Provide number of primitive values in "keyVelocity" array */
  int getNumKeyVelocity ();

  /** Assign float* value to inputOutput MFFloat field named "keyVelocity". */
  void setKeyVelocity (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "keyVelocity" */
  void setKeyVelocity (float value);

  /** Provide bool value from inputOutput SFBool field named "normalizeVelocity". */
  bool getNormalizeVelocity ();

  /** Assign bool value to inputOutput SFBool field named "normalizeVelocity". */
  void setNormalizeVelocity (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SpotLight defines a concrete node class that extends class X3DLightNode.
  * Linear attenuation may occur at level 2, full support at level 3. */

class SpotLight : public X3DLightNode
{
  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "attenuation". */
  float* getAttenuation ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "attenuation". */
  void setAttenuation (float* value);

  /** Provide float value (0,1.570796) from inputOutput SFFloat field named "beamWidth". */
  float getBeamWidth ();

  /** Assign float value (0,1.570796) to inputOutput SFFloat field named "beamWidth". */
  void setBeamWidth (float value) throw (InvalidFieldValueException);

  /** Provide float value in radians (0,1.570796) from inputOutput SFFloat field named "cutOffAngle". */
  float getCutOffAngle ();

  /** Assign float value in radians (0,1.570796) to inputOutput SFFloat field named "cutOffAngle". */
  void setCutOffAngle (float angle) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  float* getLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void setLocation (float* value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "radius". */
  float getRadius ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "radius". */
  void setRadius (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "global". */
  bool getGlobal ();

  /** Assign bool value to inputOutput SFBool field named "global". */
  void setGlobal (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide bool value from inputOutput SFBool field named "shadows". */
  bool getShadows ();

  /** Assign bool value to inputOutput SFBool field named "shadows". */
  void setShadows (bool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float getShadowIntensity ();

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void setShadowIntensity (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SquadOrientationInterpolator defines a concrete node class that extends class X3DInterpolatorNode. */

class SquadOrientationInterpolator : public X3DInterpolatorNode
{
  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* getValue ();

  /** Provide 4-tuple float* value in radians from inputOutput MFRotation field named "keyValue". */
  float* getKeyValue ();

  /** Provide number of 4-tuple primitive values in "keyValue" array */
  int getNumKeyValue ();

  /** Assign 4-tuple float* value in radians to inputOutput MFRotation field named "keyValue". */
  void setKeyValue (float* values);

  /** Provide bool value from inputOutput SFBool field named "normalizeVelocity". */
  bool getNormalizeVelocity ();

  /** Assign bool value to inputOutput SFBool field named "normalizeVelocity". */
  void setNormalizeVelocity (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void setFraction (float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* getKey ();

  /** Provide number of primitive values in "key" array */
  int getNumKey ();

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void setKey (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void setKey (float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** StaticGroup defines a concrete node class that extends classs X3DChildNode, X3DBoundedObject.
  * StaticGroup is similar to Group node but does not allow access to children after creation time. */

class StaticGroup : public X3DChildNode, X3DBoundedObject
{
  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from initializeOnly X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for initializeOnly field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to initializeOnly X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** StreamAudioDestination defines a concrete node class that extends class X3DSoundDestinationNode. */

class StreamAudioDestination : public X3DSoundDestinationNode
{
  /** Provide MFString value from inputOutput SFString field named "streamIdentifier". */
  MFString getStreamIdentifier ();

  /** Assign MFString value to inputOutput SFString field named "streamIdentifier". */
  void setStreamIdentifier (MFString value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide MFString value from inputOutput SFString field named "mediaDeviceID". */
  MFString getMediaDeviceID ();

  /** Assign MFString value to inputOutput SFString field named "mediaDeviceID". */
  void setMediaDeviceID (MFString value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** StreamAudioSource defines a concrete node class that extends class X3DSoundSourceNode. */

class StreamAudioSource : public X3DSoundSourceNode
{
  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide MFString value from inputOutput SFString field named "streamIdentifier". */
  MFString getStreamIdentifier ();

  /** Assign MFString value to inputOutput SFString field named "streamIdentifier". */
  void setStreamIdentifier (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** StringSensor defines a concrete node class that extends class X3DKeyDeviceSensorNode. */

class StringSensor : public X3DKeyDeviceSensorNode
{
  /** Provide MFString value from outputOnly SFString field named "enteredText". */
  MFString getEnteredText ();

  /** Provide MFString value from outputOnly SFString field named "finalText". */
  MFString getFinalText ();

  /** Provide bool value from inputOutput SFBool field named "deletionAllowed". */
  bool getDeletionAllowed ();

  /** Assign bool value to inputOutput SFBool field named "deletionAllowed". */
  void setDeletionAllowed (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** SurfaceEmitter defines a concrete node class that extends class X3DParticleEmitterNode. */

class SurfaceEmitter : public X3DParticleEmitterNode
{
  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 getCoordIndex ();

  /** Provide number of primitive values in "coordIndex" array */
  int getNumCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DGeometryNode type field named "surface". */
  X3DNode* getSurface ();

  /** Assign X3DGeometryNode value (using a properly typed node) to initializeOnly X3DGeometryNode type field named "surface". */
  void setSurface (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setSurface (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "variation". */
  float getVariation ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "variation". */
  void setVariation (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "mass". */
  void setMass (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "surfaceArea". */
  float getSurfaceArea ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "surfaceArea". */
  void setSurfaceArea (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Switch defines a concrete node class that extends class X3DGroupingNode. */

class Switch : public X3DGroupingNode
{
  /** Provide int value [-1,inf) from inputOutput SFInt32 field named "whichChoice". */
  int getWhichChoice ();

  /** Assign int value [-1,inf) to inputOutput SFInt32 field named "whichChoice". */
  void setWhichChoice (int value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TexCoordChaser2D defines a concrete node class that extends class X3DChaserNode. */

class TexCoordChaser2D : public X3DChaserNode
{
  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_destination". */
  void setDestination (float* values);

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_value". */
  void setValue (float* values);

  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "value_changed". */
  float* getValue ();

  /** Provide number of 2-tuple primitive values in "value_changed" array */
  int getNumValue ();

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialDestination". */
  float* getInitialDestination ();

  /** Provide number of 2-tuple primitive values in "initialDestination" array */
  int getNumInitialDestination ();

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialDestination". */
  void setInitialDestination (float* values);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialValue". */
  float* getInitialValue ();

  /** Provide number of 2-tuple primitive values in "initialValue" array */
  int getNumInitialValue ();

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialValue". */
  void setInitialValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from initializeOnly SFTime field named "duration". */
  double getDuration ();

  /** Assign double value in seconds [0,inf) to initializeOnly SFTime field named "duration". */
  void setDuration (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TexCoordDamper2D defines a concrete node class that extends class X3DDamperNode. */

class TexCoordDamper2D : public X3DDamperNode
{
  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_destination". */
  void setDestination (float* values);

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_value". */
  void setValue (float* values);

  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "value_changed". */
  float* getValue ();

  /** Provide number of 2-tuple primitive values in "value_changed" array */
  int getNumValue ();

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialDestination". */
  float* getInitialDestination ();

  /** Provide number of 2-tuple primitive values in "initialDestination" array */
  int getNumInitialDestination ();

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialDestination". */
  void setInitialDestination (float* values);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialValue". */
  float* getInitialValue ();

  /** Provide number of 2-tuple primitive values in "initialValue" array */
  int getNumInitialValue ();

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialValue". */
  void setInitialValue (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tau". */
  double getTau ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tau". */
  void setTau (double timestamp) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float getTolerance ();

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void setTolerance (float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int getOrder ();

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void setOrder (int value) throw (InvalidFieldValueException);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Text defines a concrete node class that extends class X3DGeometryNode. */

class Text : public X3DGeometryNode
{
  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "lineBounds". */
  float* getLineBounds ();

  /** Provide number of 2-tuple primitive values in "lineBounds" array */
  int getNumLineBounds ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "origin". */
  float* getOrigin ();

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "textBounds". */
  float* getTextBounds ();

  /** Provide MFString* value from inputOutput MFString field named "MFString". */
  MFString* getString ();

  /** Provide number of primitive values in "MFString" array */
  int getNumString ();

  /** Assign MFString* value to inputOutput MFString field named "MFString". */
  void setString (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "MFString" */
  void setString (MFString value);

  /** Provide float* value (-inf,inf) from inputOutput MFFloat field named "length". */
  float* getLength ();

  /** Provide number of primitive values in "length" array */
  int getNumLength ();

  /** Assign float* value (-inf,inf) to inputOutput MFFloat field named "length". */
  void setLength (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for inputOutput field named "length" */
  void setLength (float value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "maxExtent". */
  float getMaxExtent ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "maxExtent". */
  void setMaxExtent (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DFontStyleNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DFontStyleNode type field named "fontStyle". */
  X3DNode* getFontStyle ();

  /** Assign X3DFontStyleNode value (using a properly typed node) to inputOutput X3DFontStyleNode type field named "fontStyle". */
  void setFontStyle (X3DFontStyleNode node);

  /** Assign X3DFontStyleNode value (using a properly typed protoInstance) */
  void setFontStyle (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureBackground defines a concrete node class that extends class X3DBackgroundNode. */

class TextureBackground : public X3DBackgroundNode
{
  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "backTexture". */
  X3DNode* getBackTexture ();

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "backTexture". */
  void setBackTexture (X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void setBackTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "bottomTexture". */
  X3DNode* getBottomTexture ();

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "bottomTexture". */
  void setBottomTexture (X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void setBottomTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "frontTexture". */
  X3DNode* getFrontTexture ();

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "frontTexture". */
  void setFrontTexture (X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void setFrontTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "leftTexture". */
  X3DNode* getLeftTexture ();

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "leftTexture". */
  void setLeftTexture (X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void setLeftTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "rightTexture". */
  X3DNode* getRightTexture ();

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "rightTexture". */
  void setRightTexture (X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void setRightTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "topTexture". */
  X3DNode* getTopTexture ();

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "topTexture". */
  void setTopTexture (X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void setTopTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float* value in radians (-inf,inf) from inputOutput MFFloat field named "groundAngle". */
  float* getGroundAngle ();

  /** Provide number of primitive values in "groundAngle" array */
  int getNumGroundAngle ();

  /** Assign float* value in radians (-inf,inf) to inputOutput MFFloat field named "groundAngle". */
  void setGroundAngle (float* angles);

  /** Assign single float* value in radians (-inf,inf) as the MFFloat array for inputOutput field named "groundAngle" */
  void setGroundAngle (float angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "groundColor". */
  float* getGroundColor ();

  /** Provide number of 3-tuple primitive values in "groundColor" array */
  int getNumGroundColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "groundColor". */
  void setGroundColor (float* colors) throw (InvalidFieldValueException);

  /** Provide float* value in radians (-inf,inf) from inputOutput MFFloat field named "skyAngle". */
  float* getSkyAngle ();

  /** Provide number of primitive values in "skyAngle" array */
  int getNumSkyAngle ();

  /** Assign float* value in radians (-inf,inf) to inputOutput MFFloat field named "skyAngle". */
  void setSkyAngle (float* angles);

  /** Assign single float* value in radians (-inf,inf) as the MFFloat array for inputOutput field named "skyAngle" */
  void setSkyAngle (float angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "skyColor". */
  float* getSkyColor ();

  /** Provide number of 3-tuple primitive values in "skyColor" array */
  int getNumSkyColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "skyColor". */
  void setSkyColor (float* colors) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float getTransparency ();

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void setTransparency (float value);

  /** Assign bool value to inputOnly SFBool field named "set_bind". */
  void setBind (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double getBindTime ();

  /** Provide bool value from outputOnly SFBool field named "isBound". */
  bool getIsBound ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureCoordinate defines a concrete node class that extends class X3DSingleTextureCoordinateNode. */

class TextureCoordinate : public X3DSingleTextureCoordinateNode
{
  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "point". */
  float* getPoint ();

  /** Provide number of 2-tuple primitive values in "point" array */
  int getNumPoint ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "point". */
  void setPoint (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "mapping". */
  MFString getMapping ();

  /** Assign MFString value to inputOutput SFString field named "mapping". */
  void setMapping (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureCoordinate3D defines a concrete node class that extends class X3DSingleTextureCoordinateNode. */

class TextureCoordinate3D : public X3DSingleTextureCoordinateNode
{
  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "point". */
  float* getPoint ();

  /** Provide number of 3-tuple primitive values in "point" array */
  int getNumPoint ();

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "point". */
  void setPoint (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "mapping". */
  MFString getMapping ();

  /** Assign MFString value to inputOutput SFString field named "mapping". */
  void setMapping (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureCoordinate4D defines a concrete node class that extends class X3DSingleTextureCoordinateNode. */

class TextureCoordinate4D : public X3DSingleTextureCoordinateNode
{
  /** Provide 4-tuple float* value from inputOutput MFVec4f field named "point". */
  float* getPoint ();

  /** Provide number of 4-tuple primitive values in "point" array */
  int getNumPoint ();

  /** Assign 4-tuple float* value to inputOutput MFVec4f field named "point". */
  void setPoint (float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "mapping". */
  MFString getMapping ();

  /** Assign MFString value to inputOutput SFString field named "mapping". */
  void setMapping (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureCoordinateGenerator defines a concrete node class that extends class X3DSingleTextureCoordinateNode. */

class TextureCoordinateGenerator : public X3DSingleTextureCoordinateNode
{
  /** Provide MFString value from inputOutput SFString field named "mode". */
  MFString getMode ();

  /** Assign MFString value to inputOutput SFString field named "mode". */
  void setMode (MFString value);

  /** Provide float* value from inputOutput MFFloat field named "parameter". */
  float* getParameter ();

  /** Provide number of primitive values in "parameter" array */
  int getNumParameter ();

  /** Assign float* value to inputOutput MFFloat field named "parameter". */
  void setParameter (float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "parameter" */
  void setParameter (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString value from inputOutput SFString field named "mapping". */
  MFString getMapping ();

  /** Assign MFString value to inputOutput SFString field named "mapping". */
  void setMapping (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureProjector defines a concrete node class that extends class X3DTextureProjectorNode. */

class TextureProjector : public X3DTextureProjectorNode
{
  /** Provide float value [0,3.1416) from inputOutput SFFloat field named "fieldOfView". */
  float getFieldOfView ();

  /** Assign float value [0,3.1416) to inputOutput SFFloat field named "fieldOfView". */
  void setFieldOfView (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "upVector". */
  float* getUpVector ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "upVector". */
  void setUpVector (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide bool value from inputOutput SFBool field named "shadows". */
  bool getShadows ();

  /** Assign bool value to inputOutput SFBool field named "shadows". */
  void setShadows (bool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float getShadowIntensity ();

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void setShadowIntensity (float value);

  /** Provide float value (0,inf) from outputOnly SFFloat field named "aspectRatio". */
  float getAspectRatio ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide float value [-1,inf) from inputOutput SFFloat field named "farDistance". */
  float getFarDistance ();

  /** Assign float value [-1,inf) to inputOutput SFFloat field named "farDistance". */
  void setFarDistance (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "global". */
  bool getGlobal ();

  /** Assign bool value to inputOutput SFBool field named "global". */
  void setGlobal (bool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  float* getLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void setLocation (float* value);

  /** Provide float value [-1,inf) from inputOutput SFFloat field named "nearDistance". */
  float getNearDistance ();

  /** Assign float value [-1,inf) to inputOutput SFFloat field named "nearDistance". */
  void setNearDistance (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "texture". */
  X3DNode* getTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "texture". */
  void setTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureProjectorParallel defines a concrete node class that extends class X3DTextureProjectorNode. */

class TextureProjectorParallel : public X3DTextureProjectorNode
{
  /** Provide 4-tuple float* value from inputOutput SFVec4f field named "fieldOfView". */
  float* getFieldOfView ();

  /** Assign 4-tuple float* value to inputOutput SFVec4f field named "fieldOfView". */
  void setFieldOfView (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  float* getColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void setColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "intensity". */
  float getIntensity ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "intensity". */
  void setIntensity (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide bool value from inputOutput SFBool field named "shadows". */
  bool getShadows ();

  /** Assign bool value to inputOutput SFBool field named "shadows". */
  void setShadows (bool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float getShadowIntensity ();

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void setShadowIntensity (float value);

  /** Provide float value (0,inf) from outputOnly SFFloat field named "aspectRatio". */
  float getAspectRatio ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide float value [-1,inf) from inputOutput SFFloat field named "farDistance". */
  float getFarDistance ();

  /** Assign float value [-1,inf) to inputOutput SFFloat field named "farDistance". */
  void setFarDistance (float value) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "global". */
  bool getGlobal ();

  /** Assign bool value to inputOutput SFBool field named "global". */
  void setGlobal (bool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  float* getLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void setLocation (float* value);

  /** Provide float value [-1,inf) from inputOutput SFFloat field named "nearDistance". */
  float getNearDistance ();

  /** Assign float value [-1,inf) to inputOutput SFFloat field named "nearDistance". */
  void setNearDistance (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "texture". */
  X3DNode* getTexture ();

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "texture". */
  void setTexture (X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void setTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureProperties defines a concrete node class that extends class X3DNode. */

class TextureProperties : public X3DNode
{
  /** Provide float value [1,inf) from inputOutput SFFloat field named "anisotropicDegree". */
  float getAnisotropicDegree ();

  /** Assign float value [1,inf) to inputOutput SFFloat field named "anisotropicDegree". */
  void setAnisotropicDegree (float value) throw (InvalidFieldValueException);

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "borderColor". */
  float* getBorderColor ();

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "borderColor". */
  void setBorderColor (float* color) throw (InvalidFieldValueException);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "borderWidth". */
  int getBorderWidth ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "borderWidth". */
  void setBorderWidth (int value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "boundaryModeS". */
  MFString getBoundaryModeS ();

  /** Assign MFString value to inputOutput SFString field named "boundaryModeS". */
  void setBoundaryModeS (MFString value);

  /** Provide MFString value from inputOutput SFString field named "boundaryModeT". */
  MFString getBoundaryModeT ();

  /** Assign MFString value to inputOutput SFString field named "boundaryModeT". */
  void setBoundaryModeT (MFString value);

  /** Provide MFString value from inputOutput SFString field named "boundaryModeR". */
  MFString getBoundaryModeR ();

  /** Assign MFString value to inputOutput SFString field named "boundaryModeR". */
  void setBoundaryModeR (MFString value);

  /** Provide MFString value from inputOutput SFString field named "magnificationFilter". */
  MFString getMagnificationFilter ();

  /** Assign MFString value to inputOutput SFString field named "magnificationFilter". */
  void setMagnificationFilter (MFString value);

  /** Provide MFString value from inputOutput SFString field named "minificationFilter". */
  MFString getMinificationFilter ();

  /** Assign MFString value to inputOutput SFString field named "minificationFilter". */
  void setMinificationFilter (MFString value);

  /** Provide MFString value from inputOutput SFString field named "textureCompression". */
  MFString getTextureCompression ();

  /** Assign MFString value to inputOutput SFString field named "textureCompression". */
  void setTextureCompression (MFString value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "texturePriority". */
  float getTexturePriority ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "texturePriority". */
  void setTexturePriority (float value) throw (InvalidFieldValueException);

  /** Provide bool value from initializeOnly SFBool field named "generateMipMaps". */
  bool getGenerateMipMaps ();

  /** Assign bool value to initializeOnly SFBool field named "generateMipMaps". */
  void setGenerateMipMaps (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureTransform defines a concrete node class that extends class X3DTextureTransformNode. */

class TextureTransform : public X3DTextureTransformNode
{
  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "center". */
  float* getCenter ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "center". */
  void setCenter (float* value);

  /** Provide float value in radians from inputOutput SFFloat field named "rotation". */
  float getRotation ();

  /** Assign float value in radians to inputOutput SFFloat field named "rotation". */
  void setRotation (float value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "scale". */
  float* getScale ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "scale". */
  void setScale (float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "translation". */
  float* getTranslation ();

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "translation". */
  void setTranslation (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureTransform3D defines a concrete node class that extends class X3DTextureTransformNode. */

class TextureTransform3D : public X3DTextureTransformNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TextureTransformMatrix3D defines a concrete node class that extends class X3DTextureTransformNode. */

class TextureTransformMatrix3D : public X3DTextureTransformNode
{
  /** Provide float* value from inputOutput SFMatrix4f field named "matrix". */
  float* getMatrix ();

  /** Assign float* value to inputOutput SFMatrix4f field named "matrix". */
  void setMatrix (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TimeSensor defines a concrete node class that extends classs X3DTimeDependentNode, X3DSensorNode. */

class TimeSensor : public X3DTimeDependentNode, X3DSensorNode
{
  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "cycleTime". */
  double getCycleTime ();

  /** Provide float value from outputOnly SFFloat field named "fraction_changed". */
  float getFraction ();

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "time". */
  double getTime ();

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "cycleInterval". */
  double getCycleInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "cycleInterval". */
  void setCycleInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide bool value from inputOutput SFBool field named "loop". */
  bool getLoop ();

  /** Assign bool value to inputOutput SFBool field named "loop". */
  void setLoop (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TimeTrigger defines a concrete node class that extends class X3DTriggerNode. */

class TimeTrigger : public X3DTriggerNode
{
  /** Assign bool value to inputOnly SFBool field named "set_boolean". */
  void setBoolean (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "triggerTime". */
  double getTriggerTime ();

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ToneMappedVolumeStyle defines a concrete node class that extends class X3DComposableVolumeRenderStyleNode. */

class ToneMappedVolumeStyle : public X3DComposableVolumeRenderStyleNode
{
  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "coolColor". */
  float* getCoolColor ();

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "coolColor". */
  void setCoolColor (float* color) throw (InvalidFieldValueException);

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "warmColor". */
  float* getWarmColor ();

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "warmColor". */
  void setWarmColor (float* color) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  X3DNode* getSurfaceNormals ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void setSurfaceNormals (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setSurfaceNormals (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TouchSensor defines a concrete node class that extends class X3DTouchSensorNode. */

class TouchSensor : public X3DTouchSensorNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitNormal_changed". */
  float* getHitNormal ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitPoint_changed". */
  float* getHitPoint ();

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "hitTexCoord_changed". */
  float* getHitTexCoord ();

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isOver". */
  bool getIsOver ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "touchTime". */
  double getTouchTime ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Transform defines a concrete node class that extends class X3DGroupingNode. */

class Transform : public X3DGroupingNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* getRotation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void setRotation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  float* getScale ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void setScale (float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* getScaleOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void setScaleOrientation (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  float* getTranslation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void setTranslation (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TransformSensor defines a concrete node class that extends class X3DEnvironmentalSensorNode. */

class TransformSensor : public X3DEnvironmentalSensorNode
{
  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double getEnterTime ();

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double getExitTime ();

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "orientation_changed". */
  float* getOrientation ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  float* getPosition ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide X3DGroupingNode|X3DShapeNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGroupingNode|X3DShapeNode type field named "targetObject". */
  X3DNode* getTargetObject ();

  /** Assign X3DGroupingNode|X3DShapeNode value (using a properly typed node) to inputOutput X3DGroupingNode|X3DShapeNode type field named "targetObject". */
  void setTargetObject (X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode value (using a properly typed protoInstance) */
  void setTargetObject (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-inf,inf) from initializeOnly SFVec3f field named "size". */
  float* getSize ();

  /** Assign 3-tuple float* value (-inf,inf) to initializeOnly SFVec3f field named "size". */
  void setSize (float* value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TransmitterPdu defines a concrete node class that extends classs X3DNetworkSensorNode, X3DBoundedObject. */

class TransmitterPdu : public X3DNetworkSensorNode, X3DBoundedObject
{
  /** Provide bool value from outputOnly SFBool field named "isNetworkReader". */
  bool getIsNetworkReader ();

  /** Provide bool value from outputOnly SFBool field named "isNetworkWriter". */
  bool getIsNetworkWriter ();

  /** Provide bool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  bool getIsRtpHeaderHeard ();

  /** Provide bool value from outputOnly SFBool field named "isStandAlone". */
  bool getIsStandAlone ();

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "timestamp". */
  double getTimestamp ();

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide int value from inputOutput SFInt32 field named "whichGeometry". */
  int getWhichGeometry ();

  /** Assign int value to inputOutput SFInt32 field named "whichGeometry". */
  void setWhichGeometry (int value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "readInterval". */
  double getReadInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "readInterval". */
  void setReadInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "writeInterval". */
  double getWriteInterval ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "writeInterval". */
  void setWriteInterval (double timestamp) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "networkMode". */
  MFString getNetworkMode ();

  /** Assign MFString value to inputOutput SFString field named "networkMode". */
  void setNetworkMode (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int getSiteID ();

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void setSiteID (int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int getApplicationID ();

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void setApplicationID (int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int getEntityID ();

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void setEntityID (int value);

  /** Provide MFString value from inputOutput SFString field named "address". */
  MFString getAddress ();

  /** Assign MFString value to inputOutput SFString field named "address". */
  void setAddress (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int getPort ();

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void setPort (int value);

  /** Provide MFString value from inputOutput SFString field named "multicastRelayHost". */
  MFString getMulticastRelayHost ();

  /** Assign MFString value to inputOutput SFString field named "multicastRelayHost". */
  void setMulticastRelayHost (MFString value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int getMulticastRelayPort ();

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void setMulticastRelayPort (int value);

  /** Provide bool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  bool getRtpHeaderExpected ();

  /** Assign bool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void setRtpHeaderExpected (bool value);

  /** Provide int value from inputOutput SFInt32 field named "radioID". */
  int getRadioID ();

  /** Assign int value to inputOutput SFInt32 field named "radioID". */
  void setRadioID (int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "antennaLocation". */
  float* getAntennaLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "antennaLocation". */
  void setAntennaLocation (float* value);

  /** Provide int value from inputOutput SFInt32 field named "antennaPatternLength". */
  int getAntennaPatternLength ();

  /** Assign int value to inputOutput SFInt32 field named "antennaPatternLength". */
  void setAntennaPatternLength (int value);

  /** Provide int value from inputOutput SFInt32 field named "antennaPatternType". */
  int getAntennaPatternType ();

  /** Assign int value to inputOutput SFInt32 field named "antennaPatternType". */
  void setAntennaPatternType (int value);

  /** Provide int value from inputOutput SFInt32 field named "cryptoKeyID". */
  int getCryptoKeyID ();

  /** Assign int value to inputOutput SFInt32 field named "cryptoKeyID". */
  void setCryptoKeyID (int value);

  /** Provide int value from inputOutput SFInt32 field named "cryptoSystem". */
  int getCryptoSystem ();

  /** Assign int value to inputOutput SFInt32 field named "cryptoSystem". */
  void setCryptoSystem (int value);

  /** Provide int value [0,inf) from inputOutput SFInt32 field named "frequency". */
  int getFrequency ();

  /** Assign int value [0,inf) to inputOutput SFInt32 field named "frequency". */
  void setFrequency (int value) throw (InvalidFieldValueException);

  /** Provide int value from inputOutput SFInt32 field named "inputSource". */
  int getInputSource ();

  /** Assign int value to inputOutput SFInt32 field named "inputSource". */
  void setInputSource (int value);

  /** Provide int value from inputOutput SFInt32 field named "lengthOfModulationParameters". */
  int getLengthOfModulationParameters ();

  /** Assign int value to inputOutput SFInt32 field named "lengthOfModulationParameters". */
  void setLengthOfModulationParameters (int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeDetail". */
  int getModulationTypeDetail ();

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeDetail". */
  void setModulationTypeDetail (int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeMajor". */
  int getModulationTypeMajor ();

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeMajor". */
  void setModulationTypeMajor (int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeSpreadSpectrum". */
  int getModulationTypeSpreadSpectrum ();

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeSpreadSpectrum". */
  void setModulationTypeSpreadSpectrum (int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeSystem". */
  int getModulationTypeSystem ();

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeSystem". */
  void setModulationTypeSystem (int value);

  /** Provide float value from inputOutput SFFloat field named "power". */
  float getPower ();

  /** Assign float value to inputOutput SFFloat field named "power". */
  void setPower (float value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeCategory". */
  int getRadioEntityTypeCategory ();

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeCategory". */
  void setRadioEntityTypeCategory (int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeCountry". */
  int getRadioEntityTypeCountry ();

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeCountry". */
  void setRadioEntityTypeCountry (int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeDomain". */
  int getRadioEntityTypeDomain ();

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeDomain". */
  void setRadioEntityTypeDomain (int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeKind". */
  int getRadioEntityTypeKind ();

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeKind". */
  void setRadioEntityTypeKind (int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeNomenclature". */
  int getRadioEntityTypeNomenclature ();

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeNomenclature". */
  void setRadioEntityTypeNomenclature (int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeNomenclatureVersion". */
  int getRadioEntityTypeNomenclatureVersion ();

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeNomenclatureVersion". */
  void setRadioEntityTypeNomenclatureVersion (int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "relativeAntennaLocation". */
  float* getRelativeAntennaLocation ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "relativeAntennaLocation". */
  void setRelativeAntennaLocation (float* value);

  /** Provide float value from inputOutput SFFloat field named "transmitFrequencyBandwidth". */
  float getTransmitFrequencyBandwidth ();

  /** Assign float value to inputOutput SFFloat field named "transmitFrequencyBandwidth". */
  void setTransmitFrequencyBandwidth (float value);

  /** Provide int value from inputOutput SFInt32 field named "transmitState". */
  int getTransmitState ();

  /** Assign int value to inputOutput SFInt32 field named "transmitState". */
  void setTransmitState (int value);

  /** Provide MFString* value from initializeOnly MFString field named "geoSystem". */
  MFString* getGeoSystem ();

  /** Provide number of primitive values in "geoSystem" array */
  int getNumGeoSystem ();

  /** Assign MFString* value to initializeOnly MFString field named "geoSystem". */
  void setGeoSystem (MFString* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  double* getGeoCoords ();

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void setGeoCoords (double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TriangleFanSet defines a concrete node class that extends class X3DComposedGeometryNode. */

class TriangleFanSet : public X3DComposedGeometryNode
{
  /** Provide MFInt32 value (-inf,inf) from inputOutput MFInt32 field named "fanCount". */
  MFInt32 getFanCount ();

  /** Provide number of primitive values in "fanCount" array */
  int getNumFanCount ();

  /** Assign MFInt32 value (-inf,inf) to inputOutput MFInt32 field named "fanCount". */
  void setFanCount (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOutput field named "fanCount" */
  void setFanCount (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TriangleSet defines a concrete node class that extends class X3DComposedGeometryNode. */

class TriangleSet : public X3DComposedGeometryNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TriangleSet2D defines a concrete node class that extends class X3DGeometryNode. */

class TriangleSet2D : public X3DGeometryNode
{
  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "vertices". */
  float* getVertices ();

  /** Provide number of 2-tuple primitive values in "vertices" array */
  int getNumVertices ();

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "vertices". */
  void setVertices (float* values);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TriangleStripSet defines a concrete node class that extends class X3DComposedGeometryNode. */

class TriangleStripSet : public X3DComposedGeometryNode
{
  /** Provide MFInt32 value (-inf,inf) from inputOutput MFInt32 field named "stripCount". */
  MFInt32 getStripCount ();

  /** Provide number of primitive values in "stripCount" array */
  int getNumStripCount ();

  /** Assign MFInt32 value (-inf,inf) to inputOutput MFInt32 field named "stripCount". */
  void setStripCount (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOutput field named "stripCount" */
  void setStripCount (SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from initializeOnly SFBool field named "ccw". */
  bool getCcw ();

  /** Assign bool value to initializeOnly SFBool field named "ccw". */
  void setCcw (bool value);

  /** Provide bool value from initializeOnly SFBool field named "colorPerVertex". */
  bool getColorPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "colorPerVertex". */
  void setColorPerVertex (bool color);

  /** Provide bool value from initializeOnly SFBool field named "normalPerVertex". */
  bool getNormalPerVertex ();

  /** Assign bool value to initializeOnly SFBool field named "normalPerVertex". */
  void setNormalPerVertex (bool value);

  /** Provide bool value from inputOutput SFBool field named "solid". */
  bool getSolid ();

  /** Assign bool value to inputOutput SFBool field named "solid". */
  void setSolid (bool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  X3DNode* getAttrib ();

  /** Provide number of nodes in "attrib" array */
  int getNumAttrib ();

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "attrib" */
  void setAttrib (X3DVertexAttributeNode node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void setAttrib (X3DNode nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  X3DNode* getColor ();

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void setColor (X3DColorNode color) throw (InvalidFieldValueException);

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void setColor (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  X3DNode* getFogCoord ();

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void setFogCoord (FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void setFogCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  X3DNode* getNormal ();

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void setNormal (X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void setNormal (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  X3DNode* getTexCoord ();

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void setTexCoord (X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void setTexCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** TwoSidedMaterial defines a concrete node class that extends class X3DMaterialNode. */

class TwoSidedMaterial : public X3DMaterialNode
{
  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float getAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void setAmbientIntensity (float value);

  /** Provide float value from inputOutput SFFloat field named "backAmbientIntensity". */
  float getBackAmbientIntensity ();

  /** Assign float value to inputOutput SFFloat field named "backAmbientIntensity". */
  void setBackAmbientIntensity (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "diffuseColor". */
  float* getDiffuseColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "diffuseColor". */
  void setDiffuseColor (float* color) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "backDiffuseColor". */
  float* getBackDiffuseColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "backDiffuseColor". */
  void setBackDiffuseColor (float* color) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  float* getEmissiveColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void setEmissiveColor (float* color) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "backEmissiveColor". */
  float* getBackEmissiveColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "backEmissiveColor". */
  void setBackEmissiveColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "shininess". */
  float getShininess ();

  /** Assign float value to inputOutput SFFloat field named "shininess". */
  void setShininess (float value);

  /** Provide float value from inputOutput SFFloat field named "backShininess". */
  float getBackShininess ();

  /** Assign float value to inputOutput SFFloat field named "backShininess". */
  void setBackShininess (float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "specularColor". */
  float* getSpecularColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "specularColor". */
  void setSpecularColor (float* color) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "backSpecularColor". */
  float* getBackSpecularColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "backSpecularColor". */
  void setBackSpecularColor (float* color) throw (InvalidFieldValueException);

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float getTransparency ();

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void setTransparency (float value);

  /** Provide float value from inputOutput SFFloat field named "backTransparency". */
  float getBackTransparency ();

  /** Assign float value to inputOutput SFFloat field named "backTransparency". */
  void setBackTransparency (float value);

  /** Provide bool value from inputOutput SFBool field named "separateBackColor". */
  bool getSeparateBackColor ();

  /** Assign bool value to inputOutput SFBool field named "separateBackColor". */
  void setSeparateBackColor (bool color);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** unit defines a concrete node class that extends class X3DStatement.
  * Functional summary: unit statement defines data-conversion factors for typed values defined in a scene. */

class unit : public X3DStatement
{
  /** Provide double value from inputOutput SFDouble field named "conversionFactor". */
  double getConversionFactor ();

  /** Assign double value to inputOutput SFDouble field named "conversionFactor". */
  void setConversionFactor (double value);

  /** Provide MFString value from initializeOnly SFString field named "category". */
  MFString getCategory ();

  /** Assign MFString value to initializeOnly SFString field named "category". */
  void setCategory (MFString value);

  /** Provide MFString value from inputOutput SFString field named "name". */
  MFString getName ();

  /** Assign MFString value to inputOutput SFString field named "name". */
  void setName (MFString value);

  /** Provide double value (0,inf) from inputOutput SFDouble field named "conversionFactor". */
  double getConversionFactor ();

  /** Assign double value (0,inf) to inputOutput SFDouble field named "conversionFactor". */
  void setConversionFactor (double value) throw (InvalidFieldValueException);
}
;/** UniversalJoint defines a concrete node class that extends class X3DRigidJointNode.
  * UniversalJoint is like a BallJoint that constrains an extra degree of rotational freedom. */

class UniversalJoint : public X3DRigidJointNode
{
  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  float* getBody1AnchorPoint ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1Axis". */
  float* getBody1Axis ();

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  float* getBody2AnchorPoint ();

  /** Provide float value from outputOnly SFFloat field named "body2Axis". */
  float getBody2Axis ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  float* getAnchorPoint ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void setAnchorPoint (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis1". */
  float* getAxis1 ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis1". */
  void setAxis1 (float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis2". */
  float* getAxis2 ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis2". */
  void setAxis2 (float* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop1Bounce". */
  float getStop1Bounce ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop1Bounce". */
  void setStop1Bounce (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop1ErrorCorrection". */
  float getStop1ErrorCorrection ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop1ErrorCorrection". */
  void setStop1ErrorCorrection (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop2Bounce". */
  float getStop2Bounce ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop2Bounce". */
  void setStop2Bounce (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop2ErrorCorrection". */
  float getStop2ErrorCorrection ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop2ErrorCorrection". */
  void setStop2ErrorCorrection (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Provide MFString* value from inputOutput MFString field named "forceOutput". */
  MFString* getForceOutput ();

  /** Provide number of primitive values in "forceOutput" array */
  int getNumForceOutput ();

  /** Assign MFString* value to inputOutput MFString field named "forceOutput". */
  void setForceOutput (MFString* values);

  /** Assign single MFString* value as the MFString array for inputOutput field named "forceOutput" */
  void setForceOutput (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  X3DNode* getBody1 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void setBody1 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody1 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  X3DNode* getBody2 ();

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void setBody2 (RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void setBody2 (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** UnlitMaterial defines a concrete node class that extends class X3DOneSidedMaterialNode. */

class UnlitMaterial : public X3DOneSidedMaterialNode
{
  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float getTransparency ();

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void setTransparency (float value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  X3DNode* getEmissiveTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void setEmissiveTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setEmissiveTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "normalTexture". */
  X3DNode* getNormalTexture ();

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void setNormalTexture (X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void setNormalTexture (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  float* getEmissiveColor ();

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void setEmissiveColor (float* color) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "emissiveTextureMapping". */
  MFString getEmissiveTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "emissiveTextureMapping". */
  void setEmissiveTextureMapping (MFString value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "normalScale". */
  float getNormalScale ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "normalScale". */
  void setNormalScale (float value) throw (InvalidFieldValueException);

  /** Provide MFString value from inputOutput SFString field named "normalTextureMapping". */
  MFString getNormalTextureMapping ();

  /** Assign MFString value to inputOutput SFString field named "normalTextureMapping". */
  void setNormalTextureMapping (MFString value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Viewpoint defines a concrete node class that extends class X3DViewpointNode. */

class Viewpoint : public X3DViewpointNode
{
  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "centerOfRotation". */
  float* getCenterOfRotation ();

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "centerOfRotation". */
  void setCenterOfRotation (float* value);

  /** Provide float value (0,3.1416) from inputOutput SFFloat field named "fieldOfView". */
  float getFieldOfView ();

  /** Assign float value (0,3.1416) to inputOutput SFFloat field named "fieldOfView". */
  void setFieldOfView (float value) throw (InvalidFieldValueException);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  float* getPosition ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void setPosition (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign bool value to inputOnly SFBool field named "set_bind". */
  void setBind (bool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double getBindTime ();

  /** Provide bool value from outputOnly SFBool field named "isBound". */
  bool getIsBound ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "jump". */
  bool getJump ();

  /** Assign bool value to inputOutput SFBool field named "jump". */
  void setJump (bool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* getOrientation ();

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void setOrientation (float* value);

  /** Provide bool value from inputOutput SFBool field named "retainUserOffsets". */
  bool getRetainUserOffsets ();

  /** Assign bool value to inputOutput SFBool field named "retainUserOffsets". */
  void setRetainUserOffsets (bool value);

  /** Provide float value from inputOutput SFFloat field named "farDistance". */
  float getFarDistance ();

  /** Assign float value to inputOutput SFFloat field named "farDistance". */
  void setFarDistance (float value);

  /** Provide float value from inputOutput SFFloat field named "nearDistance". */
  float getNearDistance ();

  /** Assign float value to inputOutput SFFloat field named "nearDistance". */
  void setNearDistance (float value);

  /** Provide bool value from inputOutput SFBool field named "viewAll". */
  bool getViewAll ();

  /** Assign bool value to inputOutput SFBool field named "viewAll". */
  void setViewAll (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide NavigationInfo value (using a properly typed node or X3DPrototypeInstance) from inputOutput NavigationInfo type field named "navigationInfo". */
  X3DNode* getNavigationInfo ();

  /** Assign NavigationInfo value (using a properly typed node) to inputOutput NavigationInfo type field named "navigationInfo". */
  void setNavigationInfo (NavigationInfo node);

  /** Assign NavigationInfo value (using a properly typed protoInstance) */
  void setNavigationInfo (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** ViewpointGroup defines a concrete node class that extends class X3DChildNode. */

class ViewpointGroup : public X3DChildNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide bool value from inputOutput SFBool field named "displayed". */
  bool getDisplayed ();

  /** Assign bool value to inputOutput SFBool field named "displayed". */
  void setDisplayed (bool value);

  /** Provide bool value from inputOutput SFBool field named "retainUserOffsets". */
  bool getRetainUserOffsets ();

  /** Assign bool value to inputOutput SFBool field named "retainUserOffsets". */
  void setRetainUserOffsets (bool value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "size". */
  float* getSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "size". */
  void setSize (float* value);

  /** Provide X3DViewpointNode|ViewpointGroup* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DViewpointNode|ViewpointGroup type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DViewpointNode|ViewpointGroup* value (using a properly typed node array) to inputOutput X3DViewpointNode|ViewpointGroup type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign X3DViewpointNode|ViewpointGroup* value (using a properly typed protoInstance array) to inputOutput X3DViewpointNode|ViewpointGroup type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** Viewport defines a concrete node class that extends class X3DViewportNode. */

class Viewport : public X3DViewportNode
{
  /** Provide float* value (-inf,inf) from inputOutput MFFloat field named "clipBoundary". */
  float* getClipBoundary ();

  /** Provide number of primitive values in "clipBoundary" array */
  int getNumClipBoundary ();

  /** Assign float* value (-inf,inf) to inputOutput MFFloat field named "clipBoundary". */
  void setClipBoundary (float* values);

  /** Assign single float* value (-inf,inf) as the MFFloat array for inputOutput field named "clipBoundary" */
  void setClipBoundary (float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (X3DNode nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (X3DNode nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DChildNode node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void setChildren (X3DNode nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** VisibilitySensor defines a concrete node class that extends class X3DEnvironmentalSensorNode. */

class VisibilitySensor : public X3DEnvironmentalSensorNode
{
  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double getEnterTime ();

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double getExitTime ();

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  float* getCenter ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void setCenter (float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-inf,inf) from initializeOnly SFVec3f field named "size". */
  float* getSize ();

  /** Assign 3-tuple float* value (-inf,inf) to initializeOnly SFVec3f field named "size". */
  void setSize (float* value);

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** VolumeData defines a concrete node class that extends class X3DVolumeDataNode. */

class VolumeData : public X3DVolumeDataNode
{
  /** Provide X3DVolumeRenderStyleNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  X3DNode* getRenderStyle ();

  /** Assign X3DVolumeRenderStyleNode value (using a properly typed node) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void setRenderStyle (X3DVolumeRenderStyleNode node);

  /** Assign X3DVolumeRenderStyleNode value (using a properly typed protoInstance) */
  void setRenderStyle (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  X3DNode* getVoxels ();

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void setVoxels (X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void setVoxels (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "dimensions". */
  float* getDimensions ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "dimensions". */
  void setDimensions (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  float* getBboxCenter ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void setBboxCenter (float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  float* getBboxSize ();

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void setBboxSize (float* value);

  /** Provide bool value from inputOutput SFBool field named "bboxDisplay". */
  bool getBboxDisplay ();

  /** Assign bool value to inputOutput SFBool field named "bboxDisplay". */
  void setBboxDisplay (bool value);

  /** Provide bool value from inputOutput SFBool field named "visible". */
  bool getVisible ();

  /** Assign bool value to inputOutput SFBool field named "visible". */
  void setVisible (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** VolumeEmitter defines a concrete node class that extends class X3DParticleEmitterNode. */

class VolumeEmitter : public X3DParticleEmitterNode
{
  /** Assign MFInt32 value (-inf,inf) to inputOnly MFInt32 field named "set_coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide MFInt32 value (-inf,inf) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 getCoordIndex ();

  /** Provide number of primitive values in "coordIndex" array */
  int getNumCoordIndex ();

  /** Assign MFInt32 value (-inf,inf) to initializeOnly MFInt32 field named "coordIndex". */
  void setCoordIndex (MFInt32 values);

  /** Assign single SFInt32 value (-inf,inf) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void setCoordIndex (SFInt32 value);

  /** Provide 3-tuple float* value (-inf,inf) from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value (-inf,inf) to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide bool value from initializeOnly SFBool field named "internal". */
  bool getInternal ();

  /** Assign bool value to initializeOnly SFBool field named "internal". */
  void setInternal (bool value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  X3DNode* getCoord ();

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void setCoord (X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void setCoord (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "on". */
  bool getOn ();

  /** Assign bool value to inputOutput SFBool field named "on". */
  void setOn (bool value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "variation". */
  float getVariation ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "variation". */
  void setVariation (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "mass". */
  float getMass ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "mass". */
  void setMass (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "surfaceArea". */
  float getSurfaceArea ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "surfaceArea". */
  void setSurfaceArea (float value) throw (InvalidFieldValueException);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** VolumePickSensor defines a concrete node class that extends class X3DPickSensorNode. */

class VolumePickSensor : public X3DPickSensorNode
{
  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values) throw (InvalidFieldValueException);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "intersectionType". */
  MFString getIntersectionType ();

  /** Assign MFString value to initializeOnly SFString field named "intersectionType". */
  void setIntersectionType (MFString value);

  /** Provide MFString value from inputOutput SFString field named "matchCriterion". */
  MFString getMatchCriterion ();

  /** Assign MFString value to inputOutput SFString field named "matchCriterion". */
  void setMatchCriterion (MFString value);

  /** Provide MFString* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  MFString* getObjectType ();

  /** Provide number of primitive values in "objectType" array */
  int getNumObjectType ();

  /** Assign MFString* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void setObjectType (MFString* values);

  /** Assign single MFString* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void setObjectType (MFString value);

  /** Provide MFString value from initializeOnly SFString field named "sortOrder". */
  MFString getSortOrder ();

  /** Assign MFString value to initializeOnly SFString field named "sortOrder". */
  void setSortOrder (MFString value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  X3DNode* getPickTarget ();

  /** Provide number of nodes in "pickTarget" array */
  int getNumPickTarget ();

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "pickTarget" */
  void setPickTarget (X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void setPickTarget (X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  X3DNode* getPickedGeometry ();

  /** Provide number of nodes in "pickedGeometry" array */
  int getNumPickedGeometry ();

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  X3DNode* getPickingGeometry ();

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void setPickingGeometry (X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void setPickingGeometry (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** WaveShaper defines a concrete node class that extends class X3DSoundProcessingNode. */

class WaveShaper : public X3DSoundProcessingNode
{
  /** Provide MFString value from inputOutput SFString field named "oversample". */
  MFString getOversample ();

  /** Assign MFString value to inputOutput SFString field named "oversample". */
  void setOversample (MFString value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  X3DNode* getChildren ();

  /** Provide number of nodes in "children" array */
  int getNumChildren ();

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DNode nodes);

  /** Assign single X3DNode value (using a properly typed node MFNode) as the MFNode array for inputOutput field named "children" */
  void setChildren (X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void setChildren (X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int getChannelCount ();

  /** Provide MFString value from inputOutput SFString field named "channelCountMode". */
  MFString getChannelCountMode ();

  /** Assign MFString value to inputOutput SFString field named "channelCountMode". */
  void setChannelCountMode (MFString value);

  /** Provide MFString value from inputOutput SFString field named "channelInterpretation". */
  MFString getChannelInterpretation ();

  /** Assign MFString value to inputOutput SFString field named "channelInterpretation". */
  void setChannelInterpretation (MFString value);

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float getGain ();

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void setGain (float value);

  /** Provide double value in seconds [0,inf) from inputOutput SFTime field named "tailTime". */
  double getTailTime ();

  /** Assign double value in seconds [0,inf) to inputOutput SFTime field named "tailTime". */
  void setTailTime (double timestamp) throw (InvalidFieldValueException);

  /** Provide double value in seconds [0,inf) from outputOnly SFTime field named "elapsedTime". */
  double getElapsedTime ();

  /** Provide bool value from outputOnly SFBool field named "isActive". */
  bool getIsActive ();

  /** Provide bool value from outputOnly SFBool field named "isPaused". */
  bool getIsPaused ();

  /** Provide MFString value from inputOutput SFString field named "description". */
  MFString getDescription ();

  /** Assign MFString value to inputOutput SFString field named "description". */
  void setDescription (MFString value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double getPauseTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void setPauseTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double getResumeTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void setResumeTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double getStartTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void setStartTime (double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double getStopTime ();

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void setStopTime (double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** WindPhysicsModel defines a concrete node class that extends class X3DParticlePhysicsModelNode. */

class WindPhysicsModel : public X3DParticlePhysicsModelNode
{
  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  float* getDirection ();

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void setDirection (float* value);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "gustiness". */
  float getGustiness ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "gustiness". */
  void setGustiness (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,inf) from inputOutput SFFloat field named "speed". */
  float getSpeed ();

  /** Assign float value [0,inf) to inputOutput SFFloat field named "speed". */
  void setSpeed (float value) throw (InvalidFieldValueException);

  /** Provide float value [0,1) from inputOutput SFFloat field named "turbulence". */
  float getTurbulence ();

  /** Assign float value [0,1) to inputOutput SFFloat field named "turbulence". */
  void setTurbulence (float value) throw (InvalidFieldValueException);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide bool value from inputOutput SFBool field named "enabled". */
  bool getEnabled ();

  /** Assign bool value to inputOutput SFBool field named "enabled". */
  void setEnabled (bool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** WorldInfo defines a concrete node class that extends class X3DInfoNode.
  * WorldInfo contains a title and simple persistent metadata information about an X3D scene. This node is strictly for documentation purposes and has no effect on the visual appearance or behaviour of the world. */

class WorldInfo : public X3DInfoNode
{
  /** Provide MFString* value from initializeOnly MFString field named "info". */
  MFString* getInfo ();

  /** Provide number of primitive values in "info" array */
  int getNumInfo ();

  /** Assign MFString* value to initializeOnly MFString field named "info". */
  void setInfo (MFString* values);

  /** Assign single MFString* value as the MFString array for initializeOnly field named "info" */
  void setInfo (MFString value);

  /** Provide MFString value from inputOutput SFString field named "title". */
  MFString getTitle ();

  /** Assign MFString value to inputOutput SFString field named "title". */
  void setTitle (MFString value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  X3DNode* getIS ();

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void setIS (IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void setIS (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  X3DNode* getMetadata ();

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void setMetadata (X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void setMetadata (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;/** X3D defines a concrete node class that extends class X3DStatement.
  * X3D is the root node for an Extensible 3D (X3D) Graphics model. */

class X3D : public X3DStatement
{
  /** Provide MFString value from inputOutput SFString field named "profile". */
  MFString getProfile ();

  /** Assign MFString value to inputOutput SFString field named "profile". */
  void setProfile (MFString value);

  /** Provide MFString value from inputOutput SFString field named "version". */
  MFString getVersion ();

  /** Assign MFString value to inputOutput SFString field named "version". */
  void setVersion (MFString value);

  /** Provide MFString value from inputOutput SFString field named "version". */
  MFString getVersion ();

  /** Assign MFString value to inputOutput SFString field named "version". */
  void setVersion (MFString value);

  /** Provide MFString value from inputOutput SFString field named "profile". */
  MFString getProfile ();

  /** Assign MFString value to inputOutput SFString field named "profile". */
  void setProfile (MFString value);

  /** Provide head value (using a properly typed node or X3DPrototypeInstance) from inputOutput head type field named "head". */
  X3DNode* getHead ();

  /** Assign head value (using a properly typed node) to inputOutput head type field named "head". */
  void setHead (head node);

  /** Assign head value (using a properly typed protoInstance) */
  void setHead (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);

  /** Provide Scene value (using a properly typed node or X3DPrototypeInstance) from inputOutput Scene type field named "Scene". */
  X3DNode* getScene ();

  /** Assign Scene value (using a properly typed node) to inputOutput Scene type field named "Scene". */
  void setScene (Scene node);

  /** Assign Scene value (using a properly typed protoInstance) */
  void setScene (X3DPrototypeInstance protoInstance) throw (InvalidFieldValueException);
}
;

	struct interface
	{
	    struct X3DChildNode;
	    struct X3DBoundedObject;
	    struct X3DUrlObject;
	...
	}
;/** AcousticProperties defines a node interface that extends interface X3DAppearanceChildNode. */

struct AcousticProperties
{
  struct X3DAppearanceChildNode*  extNode;

  /** Provide float value [0,1) from inputOutput SFFloat field named "absorption". */
  float (*getAbsorption) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "absorption". */
  void (*setAbsorption) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "diffuse". */
  float (*getDiffuse) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "diffuse". */
  void (*setDiffuse) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "refraction". */
  float (*getRefraction) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "refraction". */
  void (*setRefraction) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "specular". */
  float (*getSpecular) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "specular". */
  void (*setSpecular) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Analyser defines a node interface that extends interface X3DSoundProcessingNode. */

struct Analyser
{
  struct X3DSoundProcessingNode*  extNode;

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "fftSize". */
  int (*getFftSize) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "fftSize". */
  void (*setFftSize) (void* this, int value)

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "frequencyBinCount". */
  int (*getFrequencyBinCount) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "frequencyBinCount". */
  void (*setFrequencyBinCount) (void* this, int value)

  /** Provide float value from inputOutput SFFloat field named "minDecibels". */
  float (*getMinDecibels) (void* this);

  /** Assign float value to inputOutput SFFloat field named "minDecibels". */
  void (*setMinDecibels) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "maxDecibels". */
  float (*getMaxDecibels) (void* this);

  /** Assign float value to inputOutput SFFloat field named "maxDecibels". */
  void (*setMaxDecibels) (void* this, float value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "smoothingTimeConstant". */
  float (*getSmoothingTimeConstant) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "smoothingTimeConstant". */
  void (*setSmoothingTimeConstant) (void* this, float value)

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tailTime". */
  double (*getTailTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tailTime". */
  void (*setTailTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Anchor defines a node interface that extends interfaces X3DGroupingNode, X3DUrlObject. */

struct Anchor
{
  struct X3DGroupingNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "parameter". */
  string* (*getParameter) (void* this);

  /** Provide number of primitive values in "parameter" array */
  int (*getNumParameter) (void* this);

  /** Assign string* value to inputOutput MFString field named "parameter". */
  void (*setParameter) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "parameter" */
  void (*setParameter2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Appearance defines a node interface that extends interface X3DAppearanceNode. */

struct Appearance
{
  struct X3DAppearanceNode*  extNode;

  /** Provide float value from inputOutput SFFloat field named "alphaCutoff". */
  float (*getAlphaCutoff) (void* this);

  /** Assign float value to inputOutput SFFloat field named "alphaCutoff". */
  void (*setAlphaCutoff) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "alphaMode". */
  string (*getAlphaMode) (void* this);

  /** Assign string value to inputOutput SFString field named "alphaMode". */
  void (*setAlphaMode) (void* this, string value);

  /** Provide X3DShaderNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DShaderNode type field named "shaders". */
  void (*getShaders) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "shaders" array */
  int (*getNumShaders) (void* this);

  /** Assign X3DShaderNode* value (using a properly typed node array) to inputOutput X3DShaderNode type field named "shaders". */
  void (*setShaders) (void* this, X3DShaderNode* nodes);

  /** Assign single X3DShaderNode* value (using a properly typed node) as the MFNode array for inputOutput field named "shaders" */
  void (*setShaders2) (void* this, X3DShaderNode* node);

  /** Assign X3DShaderNode* value (using a properly typed protoInstance array) to inputOutput X3DShaderNode type field named "shaders". */
  void (*setShaders3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DShaderNode* value (using a properly typed node array) to inputOutput X3DShaderNode type field named "shaders". */
  void (*setShaders4) (void* this, struct X3DNode* nodes);

  /** Provide AcousticProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput AcousticProperties type field named "acousticProperties". */
  void (*getAcousticProperties) (void* this, struct X3DNode result);

  /** Assign AcousticProperties value (using a properly typed node) to inputOutput AcousticProperties type field named "acousticProperties". */
  void (*setAcousticProperties) (void* this, AcousticProperties node);

  /** Assign AcousticProperties value (using a properly typed protoInstance) */
  void (*setAcousticProperties2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FillProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput FillProperties type field named "fillProperties". */
  void (*getFillProperties) (void* this, struct X3DNode result);

  /** Assign FillProperties value (using a properly typed node) to inputOutput FillProperties type field named "fillProperties". */
  void (*setFillProperties) (void* this, FillProperties node);

  /** Assign FillProperties value (using a properly typed protoInstance) */
  void (*setFillProperties2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide LineProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput LineProperties type field named "lineProperties". */
  void (*getLineProperties) (void* this, struct X3DNode result);

  /** Assign LineProperties value (using a properly typed node) to inputOutput LineProperties type field named "lineProperties". */
  void (*setLineProperties) (void* this, LineProperties node);

  /** Assign LineProperties value (using a properly typed protoInstance) */
  void (*setLineProperties2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide PointProperties value (using a properly typed node or X3DPrototypeInstance) from inputOutput PointProperties type field named "pointProperties". */
  void (*getPointProperties) (void* this, struct X3DNode result);

  /** Assign PointProperties value (using a properly typed node) to inputOutput PointProperties type field named "pointProperties". */
  void (*setPointProperties) (void* this, PointProperties node);

  /** Assign PointProperties value (using a properly typed protoInstance) */
  void (*setPointProperties2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMaterialNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMaterialNode type field named "material". */
  void (*getMaterial) (void* this, struct X3DNode result);

  /** Assign X3DMaterialNode value (using a properly typed node) to inputOutput X3DMaterialNode type field named "material". */
  void (*setMaterial) (void* this, X3DMaterialNode node);

  /** Assign X3DMaterialNode value (using a properly typed protoInstance) */
  void (*setMaterial2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTextureNode type field named "texture". */
  void (*getTexture) (void* this, struct X3DNode result);

  /** Assign X3DTextureNode value (using a properly typed node) to inputOutput X3DTextureNode type field named "texture". */
  void (*setTexture) (void* this, X3DTextureNode node);

  /** Assign X3DTextureNode value (using a properly typed protoInstance) */
  void (*setTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTextureTransformNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTextureTransformNode type field named "textureTransform". */
  void (*getTextureTransform) (void* this, struct X3DNode result);

  /** Assign X3DTextureTransformNode value (using a properly typed node) to inputOutput X3DTextureTransformNode type field named "textureTransform". */
  void (*setTextureTransform) (void* this, X3DTextureTransformNode node);

  /** Assign X3DTextureTransformNode value (using a properly typed protoInstance) */
  void (*setTextureTransform2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Arc2D defines a node interface that extends interface X3DGeometryNode. */

struct Arc2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "radius". */
  float (*getRadius) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "radius". */
  void (*setRadius) (void* this, float value)

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "startAngle". */
  float (*getStartAngle) (void* this);

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "startAngle". */
  void (*setStartAngle) (void* this, float angle)

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "endAngle". */
  float (*getEndAngle) (void* this);

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "endAngle". */
  void (*setEndAngle) (void* this, float angle)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ArcClose2D defines a node interface that extends interface X3DGeometryNode. */

struct ArcClose2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "radius". */
  float (*getRadius) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "radius". */
  void (*setRadius) (void* this, float value)

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "startAngle". */
  float (*getStartAngle) (void* this);

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "startAngle". */
  void (*setStartAngle) (void* this, float angle)

  /** Provide float value in radians (-6.2832,6.2832) from initializeOnly SFFloat field named "endAngle". */
  float (*getEndAngle) (void* this);

  /** Assign float value in radians (-6.2832,6.2832) to initializeOnly SFFloat field named "endAngle". */
  void (*setEndAngle) (void* this, float angle)

  /** Provide string value from initializeOnly SFString field named "closureType". */
  string (*getClosureType) (void* this);

  /** Assign string value to initializeOnly SFString field named "closureType". */
  void (*setClosureType) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** AudioClip defines a node interface that extends interfaces X3DSoundSourceNode, X3DUrlObject. */

struct AudioClip
{
  struct X3DSoundSourceNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide double value in seconds [-1,∞) from outputOnly SFTime field named "duration_changed". */
  double (*getDuration) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "loop". */
  SFBool (*getLoop) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "loop". */
  void (*setLoop) (void* this, SFBool value);

  /** Provide float value (0,∞) from inputOutput SFFloat field named "pitch". */
  float (*getPitch) (void* this);

  /** Assign float value (0,∞) to inputOutput SFFloat field named "pitch". */
  void (*setPitch) (void* this, float value)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** AudioDestination defines a node interface that extends interface X3DSoundDestinationNode. */

struct AudioDestination
{
  struct X3DSoundDestinationNode*  extNode;

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "maxChannelCount". */
  int (*getMaxChannelCount) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "maxChannelCount". */
  void (*setMaxChannelCount) (void* this, int value)

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "mediaDeviceID". */
  string (*getMediaDeviceID) (void* this);

  /** Assign string value to inputOutput SFString field named "mediaDeviceID". */
  void (*setMediaDeviceID) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Background defines a node interface that extends interface X3DBackgroundNode. */

struct Background
{
  struct X3DBackgroundNode*  extNode;

  /** Provide string* value from inputOutput MFString field named "backUrl". */
  string* (*getBackUrl) (void* this);

  /** Provide number of primitive values in "backUrl" array */
  int (*getNumBackUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "backUrl". */
  void (*setBackUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "backUrl" */
  void (*setBackUrl2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "bottomUrl". */
  string* (*getBottomUrl) (void* this);

  /** Provide number of primitive values in "bottomUrl" array */
  int (*getNumBottomUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "bottomUrl". */
  void (*setBottomUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "bottomUrl" */
  void (*setBottomUrl2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "frontUrl". */
  string* (*getFrontUrl) (void* this);

  /** Provide number of primitive values in "frontUrl" array */
  int (*getNumFrontUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "frontUrl". */
  void (*setFrontUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "frontUrl" */
  void (*setFrontUrl2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "leftUrl". */
  string* (*getLeftUrl) (void* this);

  /** Provide number of primitive values in "leftUrl" array */
  int (*getNumLeftUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "leftUrl". */
  void (*setLeftUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "leftUrl" */
  void (*setLeftUrl2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "rightUrl". */
  string* (*getRightUrl) (void* this);

  /** Provide number of primitive values in "rightUrl" array */
  int (*getNumRightUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "rightUrl". */
  void (*setRightUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "rightUrl" */
  void (*setRightUrl2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "topUrl". */
  string* (*getTopUrl) (void* this);

  /** Provide number of primitive values in "topUrl" array */
  int (*getNumTopUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "topUrl". */
  void (*setTopUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "topUrl" */
  void (*setTopUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float* value in radians (-∞,∞) from inputOutput MFFloat field named "groundAngle". */
  float* (*getGroundAngle) (void* this);

  /** Provide number of primitive values in "groundAngle" array */
  int (*getNumGroundAngle) (void* this);

  /** Assign float* value in radians (-∞,∞) to inputOutput MFFloat field named "groundAngle". */
  void (*setGroundAngle) (void* this, float* angles);

  /** Assign single float* value in radians (-∞,∞) as the MFFloat array for inputOutput field named "groundAngle" */
  void (*setGroundAngle2) (void* this, float* angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "groundColor". */
  void (*getGroundColor) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "groundColor" array */
  int (*getNumGroundColor) (void* this);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "groundColor". */
  void (*setGroundColor) (void* this, float* colors)

  /** Provide float* value in radians (-∞,∞) from inputOutput MFFloat field named "skyAngle". */
  float* (*getSkyAngle) (void* this);

  /** Provide number of primitive values in "skyAngle" array */
  int (*getNumSkyAngle) (void* this);

  /** Assign float* value in radians (-∞,∞) to inputOutput MFFloat field named "skyAngle". */
  void (*setSkyAngle) (void* this, float* angles);

  /** Assign single float* value in radians (-∞,∞) as the MFFloat array for inputOutput field named "skyAngle" */
  void (*setSkyAngle2) (void* this, float* angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "skyColor". */
  void (*getSkyColor) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "skyColor" array */
  int (*getNumSkyColor) (void* this);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "skyColor". */
  void (*setSkyColor) (void* this, float* colors)

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float (*getTransparency) (void* this);

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void (*setTransparency) (void* this, float value);

  /** Assign SFBool value to inputOnly SFBool field named "set_bind". */
  void (*setBind) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double (*getBindTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isBound". */
  SFBool (*getIsBound) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BallJoint defines a node interface that extends interface X3DRigidJointNode.
  * BallJoint represents an unconstrained joint between two bodies that pivot about a common anchor point. */

struct BallJoint
{
  struct X3DRigidJointNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  void (*getBody1AnchorPoint) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  void (*getBody2AnchorPoint) (void* this, float* result);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  void (*getAnchorPoint) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void (*setAnchorPoint) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "forceOutput" */
  void (*setForceOutput2) (void* this, string* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  void (*getBody1) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void (*setBody1) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  void (*getBody2) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void (*setBody2) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody22) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Billboard defines a node interface that extends interface X3DGroupingNode. */

struct Billboard
{
  struct X3DGroupingNode*  extNode;

  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "axisOfRotation". */
  void (*getAxisOfRotation) (void* this, float* result);

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "axisOfRotation". */
  void (*setAxisOfRotation) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BiquadFilter defines a node interface that extends interface X3DSoundProcessingNode. */

struct BiquadFilter
{
  struct X3DSoundProcessingNode*  extNode;

  /** Provide float value [0,∞) from inputOutput SFFloat field named "detune". */
  float (*getDetune) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "detune". */
  void (*setDetune) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "frequency". */
  float (*getFrequency) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "frequency". */
  void (*setFrequency) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "qualityFactor". */
  float (*getQualityFactor) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "qualityFactor". */
  void (*setQualityFactor) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to inputOutput SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tailTime". */
  double (*getTailTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tailTime". */
  void (*setTailTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BlendedVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct BlendedVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide float value [0,1) from inputOutput SFFloat field named "weightConstant1". */
  float (*getWeightConstant1) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "weightConstant1". */
  void (*setWeightConstant1) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "weightConstant2". */
  float (*getWeightConstant2) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "weightConstant2". */
  void (*setWeightConstant2) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "weightFunction1". */
  string (*getWeightFunction1) (void* this);

  /** Assign string value to inputOutput SFString field named "weightFunction1". */
  void (*setWeightFunction1) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "weightFunction2". */
  string (*getWeightFunction2) (void* this);

  /** Assign string value to inputOutput SFString field named "weightFunction2". */
  void (*setWeightFunction2) (void* this, string value);

  /** Provide X3DComposableVolumeRenderStyleNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void (*getRenderStyle) (void* this, struct X3DNode result);

  /** Assign X3DComposableVolumeRenderStyleNode value (using a properly typed node) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle) (void* this, X3DComposableVolumeRenderStyleNode node);

  /** Assign X3DComposableVolumeRenderStyleNode value (using a properly typed protoInstance) */
  void (*setRenderStyle2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  void (*getVoxels) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void (*setVoxels) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setVoxels2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "weightTransferFunction1". */
  void (*getWeightTransferFunction1) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "weightTransferFunction1". */
  void (*setWeightTransferFunction1) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setWeightTransferFunction12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "weightTransferFunction2". */
  void (*getWeightTransferFunction2) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "weightTransferFunction2". */
  void (*setWeightTransferFunction2) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setWeightTransferFunction22) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BooleanFilter defines a node interface that extends interface X3DChildNode. */

struct BooleanFilter
{
  struct X3DChildNode*  extNode;

  /** Assign SFBool value to inputOnly SFBool field named "set_boolean". */
  void (*setBoolean) (void* this, SFBool value);

  /** Provide SFBool value from outputOnly SFBool field named "inputFalse". */
  SFBool (*getInputFalse) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "inputNegate". */
  SFBool (*getInputNegate) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "inputTrue". */
  SFBool (*getInputTrue) (void* this);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BooleanSequencer defines a node interface that extends interface X3DSequencerNode. */

struct BooleanSequencer
{
  struct X3DSequencerNode*  extNode;

  /** Provide SFBool value from outputOnly SFBool field named "value_changed". */
  SFBool (*getValue) (void* this);

  /** Provide SFBool* value from inputOutput MFBool field named "keyValue". */
  SFBool* (*getKeyValue) (void* this);

  /** Provide number of primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign SFBool* value to inputOutput MFBool field named "keyValue". */
  void (*setKeyValue) (void* this, SFBool* values);

  /** Assign single SFBool* value as the MFBool array for inputOutput field named "keyValue" */
  void (*setKeyValue2) (void* this, SFBool* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign SFBool value to inputOnly SFBool field named "next". */
  void (*setNext) (void* this, SFBool value);

  /** Assign SFBool value to inputOnly SFBool field named "previous". */
  void (*setPrevious) (void* this, SFBool value);

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BooleanToggle defines a node interface that extends interface X3DChildNode. */

struct BooleanToggle
{
  struct X3DChildNode*  extNode;

  /** Assign SFBool value to inputOnly SFBool field named "set_boolean". */
  void (*setBoolean) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "toggle". */
  SFBool (*getToggle) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "toggle". */
  void (*setToggle) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BooleanTrigger defines a node interface that extends interface X3DTriggerNode. */

struct BooleanTrigger
{
  struct X3DTriggerNode*  extNode;

  /** Assign double value in seconds to inputOnly SFTime field named "set_triggerTime". */
  void (*setTriggerTime) (void* this, double timestamp);

  /** Provide SFBool value from outputOnly SFBool field named "triggerTrue". */
  SFBool (*getTriggerTrue) (void* this);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BoundaryEnhancementVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct BoundaryEnhancementVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide float value [0,1) from inputOutput SFFloat field named "boundaryOpacity". */
  float (*getBoundaryOpacity) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "boundaryOpacity". */
  void (*setBoundaryOpacity) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "opacityFactor". */
  float (*getOpacityFactor) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "opacityFactor". */
  void (*setOpacityFactor) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "retainedOpacity". */
  float (*getRetainedOpacity) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "retainedOpacity". */
  void (*setRetainedOpacity) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BoundedPhysicsModel defines a node interface that extends interface X3DParticlePhysicsModelNode. */

struct BoundedPhysicsModel
{
  struct X3DParticlePhysicsModelNode*  extNode;

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  void (*getGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void (*setGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Box defines a node interface that extends interface X3DGeometryNode. */

struct Box
{
  struct X3DGeometryNode*  extNode;

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "size". */
  void (*getSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "size". */
  void (*setSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** BufferAudioSource defines a node interface that extends interfaces X3DSoundSourceNode, X3DUrlObject. */

struct BufferAudioSource
{
  struct X3DSoundSourceNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide float* value [-1,1) from inputOutput MFFloat field named "buffer". */
  float* (*getBuffer) (void* this);

  /** Provide number of primitive values in "buffer" array */
  int (*getNumBuffer) (void* this);

  /** Assign float* value [-1,1) to inputOutput MFFloat field named "buffer". */
  void (*setBuffer) (void* this, float* values)

  /** Provide int value from outputOnly SFInt32 field named "bufferlength". */
  int (*getBufferlength) (void* this);

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide int value [0,∞) from outputOnly SFInt32 field named "length". */
  int (*getLength) (void* this);

  /** Provide float* value from inputOutput MFFloat field named "buffer". */
  float* (*getBuffer) (void* this);

  /** Provide number of primitive values in "buffer" array */
  int (*getNumBuffer) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "buffer". */
  void (*setBuffer) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "buffer" */
  void (*setBuffer2) (void* this, float* value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "bufferDuration". */
  double (*getBufferDuration) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "bufferDuration". */
  void (*setBufferDuration) (void* this, double timestamp)

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "detune". */
  float (*getDetune) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "detune". */
  void (*setDetune) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "loop". */
  SFBool (*getLoop) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "loop". */
  void (*setLoop) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "loopEnd". */
  float (*getLoopEnd) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "loopEnd". */
  void (*setLoopEnd) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "loopStart". */
  float (*getLoopStart) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "loopStart". */
  void (*setLoopStart) (void* this, float value)

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "numberOfChannels". */
  int (*getNumberOfChannels) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "numberOfChannels". */
  void (*setNumberOfChannels) (void* this, int value)

  /** Provide float value from inputOutput SFFloat field named "playbackRate". */
  float (*getPlaybackRate) (void* this);

  /** Assign float value to inputOutput SFFloat field named "playbackRate". */
  void (*setPlaybackRate) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "sampleRate". */
  float (*getSampleRate) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "sampleRate". */
  void (*setSampleRate) (void* this, float value)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CADAssembly defines a node interface that extends interfaces X3DGroupingNode, X3DProductStructureChildNode. */

struct CADAssembly
{
  struct X3DGroupingNode*  extNode;
  struct X3DProductStructureChildNode*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CADFace defines a node interface that extends interfaces X3DProductStructureChildNode, X3DBoundedObject. */

struct CADFace
{
  struct X3DProductStructureChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide Shape|LOD|Transform value (using a properly typed node or X3DPrototypeInstance) from inputOutput Shape|LOD|Transform type field named "shape". */
  void (*getShape) (void* this, struct X3DNode result);

  /** Assign Shape|LOD|Transform value (using a properly typed node) to inputOutput Shape|LOD|Transform type field named "shape". */
  void (*setShape) (void* this, struct X3DNode node);

  /** Assign Shape|LOD|Transform value (using a properly typed protoInstance) */
  void (*setShape2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CADLayer defines a node interface that extends interface X3DGroupingNode. */

struct CADLayer
{
  struct X3DGroupingNode*  extNode;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CADPart defines a node interface that extends interfaces X3DProductStructureChildNode, X3DGroupingNode. */

struct CADPart
{
  struct X3DProductStructureChildNode*  extNode;
  struct X3DGroupingNode*  extNode1;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* (*getScaleOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void (*setScaleOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "addChildren". */
  void addChildren (void* this, CADFace* nodes);

  /** Assign single CADFace* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, CADFace* node);

  /** Assign CADFace* value (using a properly typed protoInstance array) to inputOnly CADFace type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "removeChildren". */
  void removeChildren (void* this, CADFace* nodes);

  /** Assign single CADFace* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, CADFace* node);

  /** Assign CADFace* value (using a properly typed protoInstance array) to inputOnly CADFace type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign CADFace* value (using a properly typed node array) to inputOnly CADFace type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide CADFace* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput CADFace type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign CADFace* value (using a properly typed node array) to inputOutput CADFace type field named "children". */
  void (*setChildren) (void* this, CADFace* nodes);

  /** Assign single CADFace* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, CADFace* node);

  /** Assign CADFace* value (using a properly typed protoInstance array) to inputOutput CADFace type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign CADFace* value (using a properly typed node array) to inputOutput CADFace type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CartoonVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct CartoonVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide int value using RGB values [0..1] from inputOutput SFInt32 field named "colorSteps". */
  int (*getColorSteps) (void* this);

  /** Assign int value using RGB values [0..1] to inputOutput SFInt32 field named "colorSteps". */
  void (*setColorSteps) (void* this, int color)

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "orthogonalColor". */
  void (*getOrthogonalColor) (void* this, float* result);

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "orthogonalColor". */
  void (*setOrthogonalColor) (void* this, float* color)

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "parallelColor". */
  void (*getParallelColor) (void* this, float* result);

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "parallelColor". */
  void (*setParallelColor) (void* this, float* color)

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*getSurfaceNormals) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*setSurfaceNormals) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setSurfaceNormals2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ChannelMerger defines a node interface that extends interface X3DSoundChannelNode. */

struct ChannelMerger
{
  struct X3DSoundChannelNode*  extNode;

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ChannelSelector defines a node interface that extends interface X3DSoundChannelNode. */

struct ChannelSelector
{
  struct X3DSoundChannelNode*  extNode;

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "channelSelection". */
  int (*getChannelSelection) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "channelSelection". */
  void (*setChannelSelection) (void* this, int value)

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ChannelSplitter defines a node interface that extends interface X3DSoundChannelNode. */

struct ChannelSplitter
{
  struct X3DSoundChannelNode*  extNode;

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Provide X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode type field named "outputs". */
  void (*getOutputs) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "outputs" array */
  int (*getNumOutputs) (void* this);

  /** Assign X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode* value (using a properly typed node array) to inputOutput X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode type field named "outputs". */
  void (*setOutputs) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "outputs" */
  void (*setOutputs2) (void* this, struct X3DNode node);

  /** Assign X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode* value (using a properly typed protoInstance array) to inputOutput X3DSoundChannelNode|X3DSoundProcessingNode|X3DSoundSourceNode type field named "outputs". */
  void (*setOutputs3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Circle2D defines a node interface that extends interface X3DGeometryNode. */

struct Circle2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "radius". */
  float (*getRadius) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "radius". */
  void (*setRadius) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ClipPlane defines a node interface that extends interface X3DChildNode. */

struct ClipPlane
{
  struct X3DChildNode*  extNode;

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide 4-tuple float* value (-∞,∞) from inputOutput SFVec4f field named "plane". */
  void (*getPlane) (void* this, float* result);

  /** Assign 4-tuple float* value (-∞,∞) to inputOutput SFVec4f field named "plane". */
  void (*setPlane) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CollidableOffset defines a node interface that extends interface X3DNBodyCollidableNode.
  * CollidableOffset repositions geometry relative to center of owning body. */

struct CollidableOffset
{
  struct X3DNBodyCollidableNode*  extNode;

  /** Provide X3DNBodyCollidableNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DNBodyCollidableNode type field named "collidable". */
  void (*getCollidable) (void* this, struct X3DNode result);

  /** Assign X3DNBodyCollidableNode value (using a properly typed node) to initializeOnly X3DNBodyCollidableNode type field named "collidable". */
  void (*setCollidable) (void* this, X3DNBodyCollidableNode node);

  /** Assign X3DNBodyCollidableNode value (using a properly typed protoInstance) */
  void (*setCollidable2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CollidableShape defines a node interface that extends interface X3DNBodyCollidableNode.
  * CollidableShape connects the collision detection system, the rigid body model, and the renderable scene graph. */

struct CollidableShape
{
  struct X3DNBodyCollidableNode*  extNode;

  /** Provide Shape value (using a properly typed node or X3DPrototypeInstance) from initializeOnly Shape type field named "shape". */
  void (*getShape) (void* this, struct X3DNode result);

  /** Assign Shape value (using a properly typed node) to initializeOnly Shape type field named "shape". */
  void (*setShape) (void* this, Shape node);

  /** Assign Shape value (using a properly typed protoInstance) */
  void (*setShape2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Collision defines a node interface that extends interfaces X3DGroupingNode, X3DSensorNode. */

struct Collision
{
  struct X3DGroupingNode*  extNode;
  struct X3DSensorNode*  extNode1;

  /** Provide double value in seconds from outputOnly SFTime field named "collideTime". */
  double (*getCollideTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide X3DChildNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DChildNode type field named "proxy". */
  void (*getProxy) (void* this, struct X3DNode result);

  /** Assign X3DChildNode value (using a properly typed node) to initializeOnly X3DChildNode type field named "proxy". */
  void (*setProxy) (void* this, X3DChildNode node);

  /** Assign X3DChildNode value (using a properly typed protoInstance) */
  void (*setProxy2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CollisionCollection defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject.
  * CollisionCollection holds a collection of objects that can be managed as a single entity for resolution of inter-object collisions. */

struct CollisionCollection
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide string* value from inputOutput MFString field named "appliedParameters". */
  string* (*getAppliedParameters) (void* this);

  /** Provide number of primitive values in "appliedParameters" array */
  int (*getNumAppliedParameters) (void* this);

  /** Assign string* value to inputOutput MFString field named "appliedParameters". */
  void (*setAppliedParameters) (void* this, string* values);

  /** Provide string* value Array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. from inputOutput MFString field named "appliedParameters". */
  string* (*getAppliedParameters) (void* this);

  /** Provide number of primitive values in "appliedParameters" array */
  int (*getNumAppliedParameters) (void* this);

  /** Assign string* value Array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. to inputOutput MFString field named "appliedParameters". */
  void (*setAppliedParameters) (void* this, string* values);

  /** Assign single string* value Array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. as the MFString array for inputOutput field named "appliedParameters" */
  void (*setAppliedParameters2) (void* this, string* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "bounce". */
  float (*getBounce) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "bounce". */
  void (*setBounce) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide 2-tuple float* value (-∞,∞) from inputOutput SFVec2f field named "frictionCoefficients". */
  void (*getFrictionCoefficients) (void* this, float* result);

  /** Assign 2-tuple float* value (-∞,∞) to inputOutput SFVec2f field named "frictionCoefficients". */
  void (*setFrictionCoefficients) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "minBounceSpeed". */
  float (*getMinBounceSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "minBounceSpeed". */
  void (*setMinBounceSpeed) (void* this, float value)

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "slipFactors". */
  void (*getSlipFactors) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "slipFactors". */
  void (*setSlipFactors) (void* this, float* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessConstantForceMix". */
  float (*getSoftnessConstantForceMix) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessConstantForceMix". */
  void (*setSoftnessConstantForceMix) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessErrorCorrection". */
  float (*getSoftnessErrorCorrection) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessErrorCorrection". */
  void (*setSoftnessErrorCorrection) (void* this, float value)

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "surfaceSpeed". */
  void (*getSurfaceSpeed) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "surfaceSpeed". */
  void (*setSurfaceSpeed) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void (*getCollidables) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "collidables" array */
  int (*getNumCollidables) (void* this);

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void (*setCollidables) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "collidables" */
  void (*setCollidables2) (void* this, struct X3DNode node);

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed protoInstance array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void (*setCollidables3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CollisionSensor defines a node interface that extends interface X3DSensorNode.
  * CollisionSensor generates collision-detection events. */

struct CollisionSensor
{
  struct X3DSensorNode*  extNode;

  /** Provide X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DNBodyCollidableNode type field named "intersections". */
  void (*getIntersections) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "intersections" array */
  int (*getNumIntersections) (void* this);

  /** Provide Contact* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly Contact type field named "contacts". */
  void (*getContacts) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "contacts" array */
  int (*getNumContacts) (void* this);

  /** Provide CollisionCollection value (using a properly typed node or X3DPrototypeInstance) from inputOutput CollisionCollection type field named "collider". */
  void (*getCollider) (void* this, struct X3DNode result);

  /** Assign CollisionCollection value (using a properly typed node) to inputOutput CollisionCollection type field named "collider". */
  void (*setCollider) (void* this, CollisionCollection node);

  /** Assign CollisionCollection value (using a properly typed protoInstance) */
  void (*setCollider2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CollisionSpace defines a node interface that extends interface X3DNBodyCollisionSpaceNode.
  * CollisionSpace holds collection of objects considered together for resolution of inter-object collisions. */

struct CollisionSpace
{
  struct X3DNBodyCollisionSpaceNode*  extNode;

  /** Provide SFBool value from inputOutput SFBool field named "useGeometry". */
  SFBool (*getUseGeometry) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "useGeometry". */
  void (*setUseGeometry) (void* this, SFBool value);

  /** Provide X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void (*getCollidables) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "collidables" array */
  int (*getNumCollidables) (void* this);

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void (*setCollidables) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "collidables" */
  void (*setCollidables2) (void* this, struct X3DNode node);

  /** Assign X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode* value (using a properly typed protoInstance array) to inputOutput X3DNBodyCollisionSpaceNode|X3DNBodyCollidableNode type field named "collidables". */
  void (*setCollidables3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Color defines a node interface that extends interface X3DColorNode. */

struct Color
{
  struct X3DColorNode*  extNode;

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "color" array */
  int (*getNumColor) (void* this);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "color". */
  void (*setColor) (void* this, float* colors)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ColorChaser defines a node interface that extends interface X3DChaserNode. */

struct ColorChaser
{
  struct X3DChaserNode*  extNode;

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_destination". */
  void (*setDestination) (void* this, float* value)

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_value". */
  void (*setValue) (void* this, float* value)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from outputOnly SFColor field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialValue". */
  void (*setInitialValue) (void* this, float* value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from initializeOnly SFTime field named "duration". */
  double (*getDuration) (void* this);

  /** Assign double value in seconds [0,∞) to initializeOnly SFTime field named "duration". */
  void (*setDuration) (void* this, double timestamp)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ColorDamper defines a node interface that extends interface X3DDamperNode. */

struct ColorDamper
{
  struct X3DDamperNode*  extNode;

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_destination". */
  void (*setDestination) (void* this, float* value)

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOnly SFColor field named "set_value". */
  void (*setValue) (void* this, float* value)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from outputOnly SFColor field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from initializeOnly SFColor field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to initializeOnly SFColor field named "initialValue". */
  void (*setInitialValue) (void* this, float* value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tau". */
  double (*getTau) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tau". */
  void (*setTau) (void* this, double timestamp)

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float (*getTolerance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void (*setTolerance) (void* this, float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ColorInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct ColorInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from outputOnly SFColor field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "keyValue". */
  void (*setKeyValue) (void* this, float* values)

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ColorRGBA defines a node interface that extends interface X3DColorNode. */

struct ColorRGBA
{
  struct X3DColorNode*  extNode;

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput MFColorRGBA field named "color". */
  void (*getColor) (void* this, float* result);

  /** Provide number of 4-tuple primitive values in "color" array */
  int (*getNumColor) (void* this);

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput MFColorRGBA field named "color". */
  void (*setColor) (void* this, float* colors)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** component defines a node interface that extends interface X3DStatement.
  * Functional summary: each added component statement indicates needed scene functionality support above the given X3D profile. */

struct component
{
  struct X3DStatement*  extNode;

  /** Provide int value from inputOutput SFInt32 field named "level". */
  int (*getLevel) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "level". */
  void (*setLevel) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide int value [1,5) from inputOutput SFInt32 field named "level". */
  int (*getLevel) (void* this);

  /** Assign int value [1,5) to inputOutput SFInt32 field named "level". */
  void (*setLevel) (void* this, int value)
}
;/** ComposedCubeMapTexture defines a node interface that extends interface X3DEnvironmentTextureNode. */

struct ComposedCubeMapTexture
{
  struct X3DEnvironmentTextureNode*  extNode;

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "backTexture". */
  void (*getBackTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "backTexture". */
  void (*setBackTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setBackTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "bottomTexture". */
  void (*getBottomTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "bottomTexture". */
  void (*setBottomTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setBottomTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "frontTexture". */
  void (*getFrontTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "frontTexture". */
  void (*setFrontTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setFrontTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "leftTexture". */
  void (*getLeftTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "leftTexture". */
  void (*setLeftTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setLeftTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "rightTexture". */
  void (*getRightTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "rightTexture". */
  void (*setRightTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setRightTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "topTexture". */
  void (*getTopTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "topTexture". */
  void (*setTopTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setTopTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ComposedShader defines a node interface that extends interfaces , X3DShaderNode, X3DProgrammableShaderObject.
  * ComposedShader can contain field declarations, but no CDATA section of plain-text source code, since programs are composed from child ShaderPart nodes. */

struct ComposedShader
{
  /** Assign SFBool value to inputOnly SFBool field named "activate". */
  void (*setActivate) (void* this, SFBool value);

  /** Provide SFBool value from outputOnly SFBool field named "isSelected". */
  SFBool (*getIsSelected) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isValid". */
  SFBool (*getIsValid) (void* this);

  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  void (*getField) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "field" array */
  int (*getNumField) (void* this);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField) (void* this, field* nodes);

  /** Assign single field* value (using a properly typed node) as the MFNode array for inputOutput field named "field" */
  void (*setField2) (void* this, field* node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void (*setField3) (void* this, struct X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField4) (void* this, struct X3DNode* nodes);

  /** Provide ShaderPart* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput ShaderPart type field named "parts". */
  void (*getParts) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "parts" array */
  int (*getNumParts) (void* this);

  /** Assign ShaderPart* value (using a properly typed node array) to inputOutput ShaderPart type field named "parts". */
  void (*setParts) (void* this, ShaderPart* nodes);

  /** Assign single ShaderPart* value (using a properly typed node) as the MFNode array for inputOutput field named "parts" */
  void (*setParts2) (void* this, ShaderPart* node);

  /** Assign ShaderPart* value (using a properly typed protoInstance array) to inputOutput ShaderPart type field named "parts". */
  void (*setParts3) (void* this, struct X3DPrototypeInstance node);

  /** Assign ShaderPart* value (using a properly typed node array) to inputOutput ShaderPart type field named "parts". */
  void (*setParts4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ComposedTexture3D defines a node interface that extends interface X3DTexture3DNode. */

struct ComposedTexture3D
{
  struct X3DTexture3DNode*  extNode;

  /** Provide X3DTexture2DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DTexture2DNode type field named "texture". */
  void (*getTexture) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "texture" array */
  int (*getNumTexture) (void* this);

  /** Assign X3DTexture2DNode* value (using a properly typed node array) to inputOutput X3DTexture2DNode type field named "texture". */
  void (*setTexture) (void* this, X3DTexture2DNode* nodes);

  /** Assign single X3DTexture2DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "texture" */
  void (*setTexture2) (void* this, X3DTexture2DNode* node);

  /** Assign X3DTexture2DNode* value (using a properly typed protoInstance array) to inputOutput X3DTexture2DNode type field named "texture". */
  void (*setTexture3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DTexture2DNode* value (using a properly typed node array) to inputOutput X3DTexture2DNode type field named "texture". */
  void (*setTexture4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatS". */
  SFBool (*getRepeatS) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatS". */
  void (*setRepeatS) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatT". */
  SFBool (*getRepeatT) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatT". */
  void (*setRepeatT) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatR". */
  SFBool (*getRepeatR) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatR". */
  void (*setRepeatR) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ComposedVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct ComposedVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide X3DComposableVolumeRenderStyleNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void (*getRenderStyle) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "renderStyle" array */
  int (*getNumRenderStyle) (void* this);

  /** Assign X3DComposableVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle) (void* this, X3DComposableVolumeRenderStyleNode* nodes);

  /** Assign single X3DComposableVolumeRenderStyleNode* value (using a properly typed node) as the MFNode array for inputOutput field named "renderStyle" */
  void (*setRenderStyle2) (void* this, X3DComposableVolumeRenderStyleNode* node);

  /** Assign X3DComposableVolumeRenderStyleNode* value (using a properly typed protoInstance array) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DComposableVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DComposableVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Cone defines a node interface that extends interface X3DGeometryNode. */

struct Cone
{
  struct X3DGeometryNode*  extNode;

  /** Provide SFBool value from inputOutput SFBool field named "bottom". */
  SFBool (*getBottom) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bottom". */
  void (*setBottom) (void* this, SFBool value);

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "bottomRadius". */
  float (*getBottomRadius) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "bottomRadius". */
  void (*setBottomRadius) (void* this, float value)

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "height". */
  float (*getHeight) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "height". */
  void (*setHeight) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "side". */
  SFBool (*getSide) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "side". */
  void (*setSide) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ConeEmitter defines a node interface that extends interface X3DParticleEmitterNode. */

struct ConeEmitter
{
  struct X3DParticleEmitterNode*  extNode;

  /** Provide float value in radians [0,3.1416) from inputOutput SFFloat field named "angle". */
  float (*getAngle) (void* this);

  /** Assign float value in radians [0,3.1416) to inputOutput SFFloat field named "angle". */
  void (*setAngle) (void* this, float angle)

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "variation". */
  float (*getVariation) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "variation". */
  void (*setVariation) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "surfaceArea". */
  float (*getSurfaceArea) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "surfaceArea". */
  void (*setSurfaceArea) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** connect defines a node interface that extends interface X3DStatement.
  * Functional summary: connect statements define event-routing connections between node fields defined inside a ProtoBody declaration back to corresponding ProtoInterface fields. */

struct connect
{
  struct X3DStatement*  extNode;

  /** Provide string value from inputOutput SFString field named "nodeField". */
  string (*getNodeField) (void* this);

  /** Assign string value to inputOutput SFString field named "nodeField". */
  void (*setNodeField) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "protoField". */
  string (*getProtoField) (void* this);

  /** Assign string value to inputOutput SFString field named "protoField". */
  void (*setProtoField) (void* this, string value);
}
;/** Contact defines a node interface that extends interface X3DNode.
  * Contact nodes are produced as output events when two collidable objects or spaces make contact. */

struct Contact
{
  struct X3DNode*  extNode;

  /** Provide string* value from inputOutput MFString field named "appliedParameters". */
  string* (*getAppliedParameters) (void* this);

  /** Provide number of primitive values in "appliedParameters" array */
  int (*getNumAppliedParameters) (void* this);

  /** Assign string* value to inputOutput MFString field named "appliedParameters". */
  void (*setAppliedParameters) (void* this, string* values);

  /** Provide string* value array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. from inputOutput MFString field named "appliedParameters". */
  string* (*getAppliedParameters) (void* this);

  /** Provide number of primitive values in "appliedParameters" array */
  int (*getNumAppliedParameters) (void* this);

  /** Assign string* value array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. to inputOutput MFString field named "appliedParameters". */
  void (*setAppliedParameters) (void* this, string* values);

  /** Assign single string* value array of appliedParametersChoices. Note that strict validation of appliedParameters enumeration values does not occur via schema since MFString allows any value in any order. as the MFString array for inputOutput field named "appliedParameters" */
  void (*setAppliedParameters2) (void* this, string* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "bounce". */
  float (*getBounce) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "bounce". */
  void (*setBounce) (void* this, float value)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "contactNormal". */
  void (*getContactNormal) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "contactNormal". */
  void (*setContactNormal) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "depth". */
  float (*getDepth) (void* this);

  /** Assign float value to inputOutput SFFloat field named "depth". */
  void (*setDepth) (void* this, float value);

  /** Provide 2-tuple float* value (-∞,∞) from inputOutput SFVec2f field named "frictionCoefficients". */
  void (*getFrictionCoefficients) (void* this, float* result);

  /** Assign 2-tuple float* value (-∞,∞) to inputOutput SFVec2f field named "frictionCoefficients". */
  void (*setFrictionCoefficients) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "frictionDirection". */
  void (*getFrictionDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "frictionDirection". */
  void (*setFrictionDirection) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "minBounceSpeed". */
  float (*getMinBounceSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "minBounceSpeed". */
  void (*setMinBounceSpeed) (void* this, float value)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "slipCoefficients". */
  void (*getSlipCoefficients) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "slipCoefficients". */
  void (*setSlipCoefficients) (void* this, float* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessConstantForceMix". */
  float (*getSoftnessConstantForceMix) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessConstantForceMix". */
  void (*setSoftnessConstantForceMix) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "softnessErrorCorrection". */
  float (*getSoftnessErrorCorrection) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "softnessErrorCorrection". */
  void (*setSoftnessErrorCorrection) (void* this, float value)

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "surfaceSpeed". */
  void (*getSurfaceSpeed) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "surfaceSpeed". */
  void (*setSurfaceSpeed) (void* this, float* value);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  void (*getBody1) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void (*setBody1) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  void (*getBody2) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void (*setBody2) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody22) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNBodyCollidableNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNBodyCollidableNode type field named "geometry1". */
  void (*getGeometry1) (void* this, struct X3DNode result);

  /** Assign X3DNBodyCollidableNode value (using a properly typed node) to inputOutput X3DNBodyCollidableNode type field named "geometry1". */
  void (*setGeometry1) (void* this, X3DNBodyCollidableNode node);

  /** Assign X3DNBodyCollidableNode value (using a properly typed protoInstance) */
  void (*setGeometry12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNBodyCollidableNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNBodyCollidableNode type field named "geometry2". */
  void (*getGeometry2) (void* this, struct X3DNode result);

  /** Assign X3DNBodyCollidableNode value (using a properly typed node) to inputOutput X3DNBodyCollidableNode type field named "geometry2". */
  void (*setGeometry2) (void* this, X3DNBodyCollidableNode node);

  /** Assign X3DNBodyCollidableNode value (using a properly typed protoInstance) */
  void (*setGeometry22) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Contour2D defines a node interface that extends interface X3DNode. */

struct Contour2D
{
  struct X3DNode*  extNode;

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "addChildren". */
  void addChildren (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, struct X3DNode node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed protoInstance array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "removeChildren". */
  void removeChildren (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, struct X3DNode node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed protoInstance array) to inputOnly NurbsCurve2D|ContourPolyline2D type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Provide NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput NurbsCurve2D|ContourPolyline2D type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed node array) to inputOutput NurbsCurve2D|ContourPolyline2D type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign NurbsCurve2D|ContourPolyline2D* value (using a properly typed protoInstance array) to inputOutput NurbsCurve2D|ContourPolyline2D type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ContourPolyline2D defines a node interface that extends interface X3DNurbsControlCurveNode. */

struct ContourPolyline2D
{
  struct X3DNurbsControlCurveNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 2-tuple double* value from inputOutput MFVec2d field named "controlPoint". */
  void (*getControlPoint) (void* this, double* result);

  /** Provide number of 2-tuple primitive values in "controlPoint" array */
  int (*getNumControlPoint) (void* this);

  /** Assign 2-tuple double* value to inputOutput MFVec2d field named "controlPoint". */
  void (*setControlPoint) (void* this, double* values);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Convolver defines a node interface that extends interface X3DSoundProcessingNode. */

struct Convolver
{
  struct X3DSoundProcessingNode*  extNode;

  /** Provide float* value [-1,1) from inputOutput MFFloat field named "buffer". */
  float* (*getBuffer) (void* this);

  /** Provide number of primitive values in "buffer" array */
  int (*getNumBuffer) (void* this);

  /** Assign float* value [-1,1) to inputOutput MFFloat field named "buffer". */
  void (*setBuffer) (void* this, float* values)

  /** Provide float* value from inputOutput MFFloat field named "buffer". */
  float* (*getBuffer) (void* this);

  /** Provide number of primitive values in "buffer" array */
  int (*getNumBuffer) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "buffer". */
  void (*setBuffer) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "buffer" */
  void (*setBuffer2) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "normalize". */
  SFBool (*getNormalize) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "normalize". */
  void (*setNormalize) (void* this, SFBool value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tailTime". */
  double (*getTailTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tailTime". */
  void (*setTailTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Coordinate defines a node interface that extends interface X3DCoordinateNode. */

struct Coordinate
{
  struct X3DCoordinateNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "point". */
  void (*getPoint) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "point" array */
  int (*getNumPoint) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "point". */
  void (*setPoint) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CoordinateChaser defines a node interface that extends interface X3DChaserNode. */

struct CoordinateChaser
{
  struct X3DChaserNode*  extNode;

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_destination". */
  void (*setDestination) (void* this, float* values);

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_value". */
  void (*setValue) (void* this, float* values);

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int (*getNumValue) (void* this);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "initialDestination" array */
  int (*getNumInitialDestination) (void* this);

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* values);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "initialValue" array */
  int (*getNumInitialValue) (void* this);

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialValue". */
  void (*setInitialValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from initializeOnly SFTime field named "duration". */
  double (*getDuration) (void* this);

  /** Assign double value in seconds [0,∞) to initializeOnly SFTime field named "duration". */
  void (*setDuration) (void* this, double timestamp)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CoordinateDamper defines a node interface that extends interface X3DDamperNode. */

struct CoordinateDamper
{
  struct X3DDamperNode*  extNode;

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_destination". */
  void (*setDestination) (void* this, float* values);

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_value". */
  void (*setValue) (void* this, float* values);

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int (*getNumValue) (void* this);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "initialDestination" array */
  int (*getNumInitialDestination) (void* this);

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* values);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "initialValue" array */
  int (*getNumInitialValue) (void* this);

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "initialValue". */
  void (*setInitialValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tau". */
  double (*getTau) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tau". */
  void (*setTau) (void* this, double timestamp)

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float (*getTolerance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void (*setTolerance) (void* this, float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CoordinateDouble defines a node interface that extends interface X3DCoordinateNode. */

struct CoordinateDouble
{
  struct X3DCoordinateNode*  extNode;

  /** Provide 3-tuple double* value from inputOutput MFVec3d field named "point". */
  void (*getPoint) (void* this, double* result);

  /** Provide number of 3-tuple primitive values in "point" array */
  int (*getNumPoint) (void* this);

  /** Assign 3-tuple double* value to inputOutput MFVec3d field named "point". */
  void (*setPoint) (void* this, double* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CoordinateInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct CoordinateInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int (*getNumValue) (void* this);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CoordinateInterpolator2D defines a node interface that extends interface X3DInterpolatorNode. */

struct CoordinateInterpolator2D
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "value_changed" array */
  int (*getNumValue) (void* this);

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Cylinder defines a node interface that extends interface X3DGeometryNode. */

struct Cylinder
{
  struct X3DGeometryNode*  extNode;

  /** Provide SFBool value from inputOutput SFBool field named "bottom". */
  SFBool (*getBottom) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bottom". */
  void (*setBottom) (void* this, SFBool value);

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "height". */
  float (*getHeight) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "height". */
  void (*setHeight) (void* this, float value)

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "radius". */
  float (*getRadius) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "radius". */
  void (*setRadius) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "side". */
  SFBool (*getSide) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "side". */
  void (*setSide) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "top". */
  SFBool (*getTop) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "top". */
  void (*setTop) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** CylinderSensor defines a node interface that extends interface X3DDragSensorNode. */

struct CylinderSensor
{
  struct X3DDragSensorNode*  extNode;

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "rotation_changed". */
  float* (*getRotation) (void* this);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "axisRotation". */
  float* (*getAxisRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "axisRotation". */
  void (*setAxisRotation) (void* this, float* value);

  /** Provide float value in radians [0,1.5708) from inputOutput SFFloat field named "diskAngle". */
  float (*getDiskAngle) (void* this);

  /** Assign float value in radians [0,1.5708) to inputOutput SFFloat field named "diskAngle". */
  void (*setDiskAngle) (void* this, float angle)

  /** Provide float value in radians (-6.2832,6.2832) from inputOutput SFFloat field named "maxAngle". */
  float (*getMaxAngle) (void* this);

  /** Assign float value in radians (-6.2832,6.2832) to inputOutput SFFloat field named "maxAngle". */
  void (*setMaxAngle) (void* this, float angle)

  /** Provide float value in radians (-6.2832,6.2832) from inputOutput SFFloat field named "minAngle". */
  float (*getMinAngle) (void* this);

  /** Assign float value in radians (-6.2832,6.2832) to inputOutput SFFloat field named "minAngle". */
  void (*setMinAngle) (void* this, float angle)

  /** Provide float value from inputOutput SFFloat field named "offset". */
  float (*getOffset) (void* this);

  /** Assign float value to inputOutput SFFloat field named "offset". */
  void (*setOffset) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "trackPoint_changed". */
  void (*getTrackPoint) (void* this, float* result);

  /** Provide SFBool value from inputOutput SFBool field named "autoOffset". */
  SFBool (*getAutoOffset) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "autoOffset". */
  void (*setAutoOffset) (void* this, SFBool value);

  /** Provide SFBool value from outputOnly SFBool field named "isOver". */
  SFBool (*getIsOver) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Delay defines a node interface that extends interface X3DSoundProcessingNode. */

struct Delay
{
  struct X3DSoundProcessingNode*  extNode;

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "delayTime". */
  double (*getDelayTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "delayTime". */
  void (*setDelayTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "maxDelayTime". */
  double (*getMaxDelayTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "maxDelayTime". */
  void (*setMaxDelayTime) (void* this, double timestamp)

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tailTime". */
  double (*getTailTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tailTime". */
  void (*setTailTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** DirectionalLight defines a node interface that extends interface X3DLightNode.
  * DirectionalLight might not be scoped by parent Group or Transform at levels 1 or 2. */

struct DirectionalLight
{
  struct X3DLightNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "global". */
  SFBool (*getGlobal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "global". */
  void (*setGlobal) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "shadows". */
  SFBool (*getShadows) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "shadows". */
  void (*setShadows) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float (*getShadowIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void (*setShadowIntensity) (void* this, float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** DISEntityManager defines a node interface that extends interface X3DChildNode. */

struct DISEntityManager
{
  struct X3DChildNode*  extNode;

  /** Provide string value from inputOutput SFString field named "address". */
  string (*getAddress) (void* this);

  /** Assign string value to inputOutput SFString field named "address". */
  void (*setAddress) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int (*getApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void (*setApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int (*getPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void (*setPort) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int (*getSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void (*setSiteID) (void* this, int value);

  /** Provide EspduTransform* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly EspduTransform type field named "addedEntities". */
  void (*getAddedEntities) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "addedEntities" array */
  int (*getNumAddedEntities) (void* this);

  /** Provide EspduTransform* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly EspduTransform type field named "removedEntities". */
  void (*getRemovedEntities) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "removedEntities" array */
  int (*getNumRemovedEntities) (void* this);

  /** Provide DISEntityTypeMapping* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput DISEntityTypeMapping type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign DISEntityTypeMapping* value (using a properly typed node array) to inputOutput DISEntityTypeMapping type field named "children". */
  void (*setChildren) (void* this, DISEntityTypeMapping* nodes);

  /** Assign single DISEntityTypeMapping* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, DISEntityTypeMapping* node);

  /** Assign DISEntityTypeMapping* value (using a properly typed protoInstance array) to inputOutput DISEntityTypeMapping type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign DISEntityTypeMapping* value (using a properly typed node array) to inputOutput DISEntityTypeMapping type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** DISEntityTypeMapping defines a node interface that extends interfaces X3DInfoNode, X3DUrlObject. */

struct DISEntityTypeMapping
{
  struct X3DInfoNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "category". */
  int (*getCategory) (void* this);

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "category". */
  void (*setCategory) (void* this, int value)

  /** Provide int value [0,65535) from initializeOnly SFInt32 field named "country". */
  int (*getCountry) (void* this);

  /** Assign int value [0,65535) to initializeOnly SFInt32 field named "country". */
  void (*setCountry) (void* this, int value)

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "domain". */
  int (*getDomain) (void* this);

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "domain". */
  void (*setDomain) (void* this, int value)

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "extra". */
  int (*getExtra) (void* this);

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "extra". */
  void (*setExtra) (void* this, int value)

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "kind". */
  int (*getKind) (void* this);

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "kind". */
  void (*setKind) (void* this, int value)

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "specific". */
  int (*getSpecific) (void* this);

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "specific". */
  void (*setSpecific) (void* this, int value)

  /** Provide int value [0,255) from initializeOnly SFInt32 field named "subcategory". */
  int (*getSubcategory) (void* this);

  /** Assign int value [0,255) to initializeOnly SFInt32 field named "subcategory". */
  void (*setSubcategory) (void* this, int value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Disk2D defines a node interface that extends interface X3DGeometryNode. */

struct Disk2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide float value [0,∞) from initializeOnly SFFloat field named "innerRadius". */
  float (*getInnerRadius) (void* this);

  /** Assign float value [0,∞) to initializeOnly SFFloat field named "innerRadius". */
  void (*setInnerRadius) (void* this, float value)

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "outerRadius". */
  float (*getOuterRadius) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "outerRadius". */
  void (*setOuterRadius) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** DoubleAxisHingeJoint defines a node interface that extends interface X3DRigidJointNode.
  * DoubleAxisHingeJoint has two independent axes located around a common anchor point. */

struct DoubleAxisHingeJoint
{
  struct X3DRigidJointNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  void (*getBody1AnchorPoint) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1Axis". */
  void (*getBody1Axis) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  void (*getBody2AnchorPoint) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2Axis". */
  void (*getBody2Axis) (void* this, float* result);

  /** Provide float value in radians from outputOnly SFFloat field named "hinge1Angle". */
  float (*getHinge1Angle) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "hinge1AngleRate". */
  float (*getHinge1AngleRate) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "hinge2Angle". */
  float (*getHinge2Angle) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "hinge2AngleRate". */
  float (*getHinge2AngleRate) (void* this);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  void (*getAnchorPoint) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void (*setAnchorPoint) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis1". */
  void (*getAxis1) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis1". */
  void (*setAxis1) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis2". */
  void (*getAxis2) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis2". */
  void (*setAxis2) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "desiredAngularVelocity1". */
  float (*getDesiredAngularVelocity1) (void* this);

  /** Assign float value to inputOutput SFFloat field named "desiredAngularVelocity1". */
  void (*setDesiredAngularVelocity1) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "desiredAngularVelocity2". */
  float (*getDesiredAngularVelocity2) (void* this);

  /** Assign float value to inputOutput SFFloat field named "desiredAngularVelocity2". */
  void (*setDesiredAngularVelocity2) (void* this, float value);

  /** Provide float value in radians from inputOutput SFFloat field named "maxAngle1". */
  float (*getMaxAngle1) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "maxAngle1". */
  void (*setMaxAngle1) (void* this, float angle);

  /** Provide float value from inputOutput SFFloat field named "maxTorque1". */
  float (*getMaxTorque1) (void* this);

  /** Assign float value to inputOutput SFFloat field named "maxTorque1". */
  void (*setMaxTorque1) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "maxTorque2". */
  float (*getMaxTorque2) (void* this);

  /** Assign float value to inputOutput SFFloat field named "maxTorque2". */
  void (*setMaxTorque2) (void* this, float value);

  /** Provide float value in radians from inputOutput SFFloat field named "minAngle1". */
  float (*getMinAngle1) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "minAngle1". */
  void (*setMinAngle1) (void* this, float angle);

  /** Provide float value from inputOutput SFFloat field named "stop1Bounce". */
  float (*getStop1Bounce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop1Bounce". */
  void (*setStop1Bounce) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stop1ConstantForceMix". */
  float (*getStop1ConstantForceMix) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop1ConstantForceMix". */
  void (*setStop1ConstantForceMix) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stop1ErrorCorrection". */
  float (*getStop1ErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop1ErrorCorrection". */
  void (*setStop1ErrorCorrection) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "suspensionErrorCorrection". */
  float (*getSuspensionErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "suspensionErrorCorrection". */
  void (*setSuspensionErrorCorrection) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "suspensionForce". */
  float (*getSuspensionForce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "suspensionForce". */
  void (*setSuspensionForce) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "forceOutput" */
  void (*setForceOutput2) (void* this, string* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  void (*getBody1) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void (*setBody1) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  void (*getBody2) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void (*setBody2) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody22) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** DynamicsCompressor defines a node interface that extends interface X3DSoundProcessingNode. */

struct DynamicsCompressor
{
  struct X3DSoundProcessingNode*  extNode;

  /** Provide float value (-∞,0) from outputOnly SFFloat field named "reduction". */
  float (*getReduction) (void* this);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "attack". */
  float (*getAttack) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "attack". */
  void (*setAttack) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "knee". */
  float (*getKnee) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "knee". */
  void (*setKnee) (void* this, float value)

  /** Provide float value [1,20) from inputOutput SFFloat field named "ratio". */
  float (*getRatio) (void* this);

  /** Assign float value [1,20) to inputOutput SFFloat field named "ratio". */
  void (*setRatio) (void* this, float value)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "release". */
  double (*getRelease) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "release". */
  void (*setRelease) (void* this, double timestamp)

  /** Provide float value [-100,0) from inputOutput SFFloat field named "threshold". */
  float (*getThreshold) (void* this);

  /** Assign float value [-100,0) to inputOutput SFFloat field named "threshold". */
  void (*setThreshold) (void* this, float value)

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tailTime". */
  double (*getTailTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tailTime". */
  void (*setTailTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** EaseInEaseOut defines a node interface that extends interface X3DChildNode. */

struct EaseInEaseOut
{
  struct X3DChildNode*  extNode;

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float value from outputOnly SFFloat field named "modifiedFraction_changed". */
  float (*getModifiedFraction) (void* this);

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "easeInEaseOut". */
  void (*getEaseInEaseOut) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "easeInEaseOut" array */
  int (*getNumEaseInEaseOut) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "easeInEaseOut". */
  void (*setEaseInEaseOut) (void* this, float* values);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** EdgeEnhancementVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct EdgeEnhancementVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "edgeColor". */
  void (*getEdgeColor) (void* this, float* result);

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "edgeColor". */
  void (*setEdgeColor) (void* this, float* color)

  /** Provide float value [0,3.1416) from inputOutput SFFloat field named "gradientThreshold". */
  float (*getGradientThreshold) (void* this);

  /** Assign float value [0,3.1416) to inputOutput SFFloat field named "gradientThreshold". */
  void (*setGradientThreshold) (void* this, float value)

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*getSurfaceNormals) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*setSurfaceNormals) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setSurfaceNormals2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ElevationGrid defines a node interface that extends interface X3DGeometryNode. */

struct ElevationGrid
{
  struct X3DGeometryNode*  extNode;

  /** Assign float* value to inputOnly MFFloat field named "set_height". */
  void (*setHeight) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOnly field named "set_height" */
  void (*setHeight2) (void* this, float* value);

  /** Provide float* value from initializeOnly MFFloat field named "height". */
  float* (*getHeight) (void* this);

  /** Provide number of primitive values in "height" array */
  int (*getNumHeight) (void* this);

  /** Assign float* value to initializeOnly MFFloat field named "height". */
  void (*setHeight) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for initializeOnly field named "height" */
  void (*setHeight2) (void* this, float* value);

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide float value in radians [0,∞) from initializeOnly SFFloat field named "creaseAngle". */
  float (*getCreaseAngle) (void* this);

  /** Assign float value in radians [0,∞) to initializeOnly SFFloat field named "creaseAngle". */
  void (*setCreaseAngle) (void* this, float angle)

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "xDimension". */
  int (*getXDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "xDimension". */
  void (*setXDimension) (void* this, int value)

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "xSpacing". */
  float (*getXSpacing) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "xSpacing". */
  void (*setXSpacing) (void* this, float value)

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "zDimension". */
  int (*getZDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "zDimension". */
  void (*setZDimension) (void* this, int value)

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "zSpacing". */
  float (*getZSpacing) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "zSpacing". */
  void (*setZSpacing) (void* this, float value)

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*setTexCoord) (void* this, X3DSingleTextureCoordinateNode node);

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** EnvironmentLight defines a node interface that extends interface X3DLightNode.
  * TODO add contained nodes. */

struct EnvironmentLight
{
  struct X3DLightNode*  extNode;

  /** Provide float* value from inputOutput MFFloat field named "diffuseCoefficients". */
  float* (*getDiffuseCoefficients) (void* this);

  /** Provide number of primitive values in "diffuseCoefficients" array */
  int (*getNumDiffuseCoefficients) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "diffuseCoefficients". */
  void (*setDiffuseCoefficients) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "diffuseCoefficients" */
  void (*setDiffuseCoefficients2) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "global". */
  SFBool (*getGlobal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "global". */
  void (*setGlobal) (void* this, SFBool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "diffuse". */
  void (*getDiffuse) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "diffuse". */
  void (*setDiffuse) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setDiffuse2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DEnvironmentTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DEnvironmentTextureNode type field named "diffuseTexture". */
  void (*getDiffuseTexture) (void* this, struct X3DNode result);

  /** Assign X3DEnvironmentTextureNode value (using a properly typed node) to inputOutput X3DEnvironmentTextureNode type field named "diffuseTexture". */
  void (*setDiffuseTexture) (void* this, X3DEnvironmentTextureNode node);

  /** Assign X3DEnvironmentTextureNode value (using a properly typed protoInstance) */
  void (*setDiffuseTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DEnvironmentTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DEnvironmentTextureNode type field named "specularTexture". */
  void (*getSpecularTexture) (void* this, struct X3DNode result);

  /** Assign X3DEnvironmentTextureNode value (using a properly typed node) to inputOutput X3DEnvironmentTextureNode type field named "specularTexture". */
  void (*setSpecularTexture) (void* this, X3DEnvironmentTextureNode node);

  /** Assign X3DEnvironmentTextureNode value (using a properly typed protoInstance) */
  void (*setSpecularTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "shadows". */
  SFBool (*getShadows) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "shadows". */
  void (*setShadows) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float (*getShadowIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void (*setShadowIntensity) (void* this, float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** EspduTransform defines a node interface that extends interfaces X3DGroupingNode, X3DNetworkSensorNode. */

struct EspduTransform
{
  struct X3DGroupingNode*  extNode;
  struct X3DNetworkSensorNode*  extNode1;

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue0". */
  void (*setArticulationParameterValue0) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue1". */
  void (*setArticulationParameterValue1) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue2". */
  void (*setArticulationParameterValue2) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue3". */
  void (*setArticulationParameterValue3) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue4". */
  void (*setArticulationParameterValue4) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue5". */
  void (*setArticulationParameterValue5) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue6". */
  void (*setArticulationParameterValue6) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_articulationParameterValue7". */
  void (*setArticulationParameterValue7) (void* this, float value);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue0_changed". */
  float (*getArticulationParameterValue0) (void* this);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue1_changed". */
  float (*getArticulationParameterValue1) (void* this);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue2_changed". */
  float (*getArticulationParameterValue2) (void* this);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue3_changed". */
  float (*getArticulationParameterValue3) (void* this);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue4_changed". */
  float (*getArticulationParameterValue4) (void* this);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue5_changed". */
  float (*getArticulationParameterValue5) (void* this);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue6_changed". */
  float (*getArticulationParameterValue6) (void* this);

  /** Provide float value from outputOnly SFFloat field named "articulationParameterValue7_changed". */
  float (*getArticulationParameterValue7) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "collideTime". */
  double (*getCollideTime) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "detonateTime". */
  double (*getDetonateTime) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "firedTime". */
  double (*getFiredTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isCollided". */
  SFBool (*getIsCollided) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isDetonated". */
  SFBool (*getIsDetonated) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkReader". */
  SFBool (*getIsNetworkReader) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkWriter". */
  SFBool (*getIsNetworkWriter) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  SFBool (*getIsRtpHeaderHeard) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isStandAlone". */
  SFBool (*getIsStandAlone) (void* this);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "timestamp". */
  double (*getTimestamp) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide string value from inputOutput SFString field named "marking". */
  string (*getMarking) (void* this);

  /** Assign string value to inputOutput SFString field named "marking". */
  void (*setMarking) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int (*getSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void (*setSiteID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int (*getApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void (*setApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int (*getEntityID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void (*setEntityID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "forceID". */
  int (*getForceID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "forceID". */
  void (*setForceID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityKind". */
  int (*getEntityKind) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityKind". */
  void (*setEntityKind) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityDomain". */
  int (*getEntityDomain) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityDomain". */
  void (*setEntityDomain) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityCountry". */
  int (*getEntityCountry) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityCountry". */
  void (*setEntityCountry) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityCategory". */
  int (*getEntityCategory) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityCategory". */
  void (*setEntityCategory) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entitySubcategory". */
  int (*getEntitySubcategory) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entitySubcategory". */
  void (*setEntitySubcategory) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entitySpecific". */
  int (*getEntitySpecific) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entitySpecific". */
  void (*setEntitySpecific) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityExtra". */
  int (*getEntityExtra) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityExtra". */
  void (*setEntityExtra) (void* this, int value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "readInterval". */
  double (*getReadInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "readInterval". */
  void (*setReadInterval) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "writeInterval". */
  double (*getWriteInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "writeInterval". */
  void (*setWriteInterval) (void* this, double timestamp)

  /** Provide string value from inputOutput SFString field named "networkMode". */
  string (*getNetworkMode) (void* this);

  /** Assign string value to inputOutput SFString field named "networkMode". */
  void (*setNetworkMode) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* (*getScaleOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void (*setScaleOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "address". */
  string (*getAddress) (void* this);

  /** Assign string value to inputOutput SFString field named "address". */
  void (*setAddress) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int (*getPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void (*setPort) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "multicastRelayHost". */
  string (*getMulticastRelayHost) (void* this);

  /** Assign string value to inputOutput SFString field named "multicastRelayHost". */
  void (*setMulticastRelayHost) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int (*getMulticastRelayPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void (*setMulticastRelayPort) (void* this, int value);

  /** Provide SFBool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  SFBool (*getRtpHeaderExpected) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void (*setRtpHeaderExpected) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "deadReckoning". */
  int (*getDeadReckoning) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "deadReckoning". */
  void (*setDeadReckoning) (void* this, int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "linearVelocity". */
  void (*getLinearVelocity) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "linearVelocity". */
  void (*setLinearVelocity) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "linearAcceleration". */
  void (*getLinearAcceleration) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "linearAcceleration". */
  void (*setLinearAcceleration) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "fired1". */
  SFBool (*getFired1) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "fired1". */
  void (*setFired1) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "fired2". */
  SFBool (*getFired2) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "fired2". */
  void (*setFired2) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "collisionType". */
  int (*getCollisionType) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "collisionType". */
  void (*setCollisionType) (void* this, int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "detonationLocation". */
  void (*getDetonationLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "detonationLocation". */
  void (*setDetonationLocation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "detonationRelativeLocation". */
  void (*getDetonationRelativeLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "detonationRelativeLocation". */
  void (*setDetonationRelativeLocation) (void* this, float* value);

  /** Provide int value from inputOutput SFInt32 field named "detonationResult". */
  int (*getDetonationResult) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "detonationResult". */
  void (*setDetonationResult) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "eventApplicationID". */
  int (*getEventApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "eventApplicationID". */
  void (*setEventApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "eventEntityID". */
  int (*getEventEntityID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "eventEntityID". */
  void (*setEventEntityID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "eventNumber". */
  int (*getEventNumber) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "eventNumber". */
  void (*setEventNumber) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "eventSiteID". */
  int (*getEventSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "eventSiteID". */
  void (*setEventSiteID) (void* this, int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "munitionStartPoint". */
  void (*getMunitionStartPoint) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "munitionStartPoint". */
  void (*setMunitionStartPoint) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "munitionEndPoint". */
  void (*getMunitionEndPoint) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "munitionEndPoint". */
  void (*setMunitionEndPoint) (void* this, float* value);

  /** Provide int value from inputOutput SFInt32 field named "munitionSiteID". */
  int (*getMunitionSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "munitionSiteID". */
  void (*setMunitionSiteID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "munitionApplicationID". */
  int (*getMunitionApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "munitionApplicationID". */
  void (*setMunitionApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "munitionEntityID". */
  int (*getMunitionEntityID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "munitionEntityID". */
  void (*setMunitionEntityID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "fireMissionIndex". */
  int (*getFireMissionIndex) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "fireMissionIndex". */
  void (*setFireMissionIndex) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "warhead". */
  int (*getWarhead) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "warhead". */
  void (*setWarhead) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "fuse". */
  int (*getFuse) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "fuse". */
  void (*setFuse) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "munitionQuantity". */
  int (*getMunitionQuantity) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "munitionQuantity". */
  void (*setMunitionQuantity) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "firingRate". */
  int (*getFiringRate) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "firingRate". */
  void (*setFiringRate) (void* this, int value);

  /** Provide float value from inputOutput SFFloat field named "firingRange". */
  float (*getFiringRange) (void* this);

  /** Assign float value to inputOutput SFFloat field named "firingRange". */
  void (*setFiringRange) (void* this, float value);

  /** Provide int value from inputOutput SFInt32 field named "articulationParameterCount". */
  int (*getArticulationParameterCount) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "articulationParameterCount". */
  void (*setArticulationParameterCount) (void* this, int value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterDesignatorArray". */
  MFInt32 (*getArticulationParameterDesignatorArray) (void* this);

  /** Provide number of primitive values in "articulationParameterDesignatorArray" array */
  int (*getNumArticulationParameterDesignatorArray) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterDesignatorArray". */
  void (*setArticulationParameterDesignatorArray) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterDesignatorArray" */
  void (*setArticulationParameterDesignatorArray2) (void* this, SFInt32 value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterChangeIndicatorArray". */
  MFInt32 (*getArticulationParameterChangeIndicatorArray) (void* this);

  /** Provide number of primitive values in "articulationParameterChangeIndicatorArray" array */
  int (*getNumArticulationParameterChangeIndicatorArray) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterChangeIndicatorArray". */
  void (*setArticulationParameterChangeIndicatorArray) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterChangeIndicatorArray" */
  void (*setArticulationParameterChangeIndicatorArray2) (void* this, SFInt32 value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterIdPartAttachedToArray". */
  MFInt32 (*getArticulationParameterIdPartAttachedToArray) (void* this);

  /** Provide number of primitive values in "articulationParameterIdPartAttachedToArray" array */
  int (*getNumArticulationParameterIdPartAttachedToArray) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterIdPartAttachedToArray". */
  void (*setArticulationParameterIdPartAttachedToArray) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterIdPartAttachedToArray" */
  void (*setArticulationParameterIdPartAttachedToArray2) (void* this, SFInt32 value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "articulationParameterTypeArray". */
  MFInt32 (*getArticulationParameterTypeArray) (void* this);

  /** Provide number of primitive values in "articulationParameterTypeArray" array */
  int (*getNumArticulationParameterTypeArray) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "articulationParameterTypeArray". */
  void (*setArticulationParameterTypeArray) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "articulationParameterTypeArray" */
  void (*setArticulationParameterTypeArray2) (void* this, SFInt32 value);

  /** Provide float* value from inputOutput MFFloat field named "articulationParameterArray". */
  float* (*getArticulationParameterArray) (void* this);

  /** Provide number of primitive values in "articulationParameterArray" array */
  int (*getNumArticulationParameterArray) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "articulationParameterArray". */
  void (*setArticulationParameterArray) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "articulationParameterArray" */
  void (*setArticulationParameterArray2) (void* this, float* value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  void (*getGeoCoords) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void (*setGeoCoords) (void* this, double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ExplosionEmitter defines a node interface that extends interface X3DParticleEmitterNode. */

struct ExplosionEmitter
{
  struct X3DParticleEmitterNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "variation". */
  float (*getVariation) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "variation". */
  void (*setVariation) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "surfaceArea". */
  float (*getSurfaceArea) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "surfaceArea". */
  void (*setSurfaceArea) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** EXPORT defines a node interface that extends interface X3DStatement.
  * Functional summary: EXPORT exposes a local node for ROUTE passing of event values when the current Scene is included via Inline by a parent external world. These connections allow event values to be exchanged via ROUTE statements between a parent model and a child Inline model. */

struct EXPORT
{
  struct X3DStatement*  extNode;

  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "localDEF". */
  xs:IDREF (*getLocalDEF) (void* this);

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "localDEF". */
  void (*setLocalDEF) (void* this, xs:IDREF value);

  /** Provide string value from inputOutput SFString field named "AS". */
  string (*getAS) (void* this);

  /** Assign string value to inputOutput SFString field named "AS". */
  void (*setAS) (void* this, string value);
}
;/** ExternProtoDeclare defines a node interface that extends interfaces X3DStatement, X3DChildNode.
  * ExternProtoDeclare refers to a ProtoDeclare node declaration provided in another file. ExternProtoDeclare interfaces are defined by field statements (and without IS/connect statements). */

struct ExternProtoDeclare
{
  struct X3DStatement*  extNode;
  struct X3DChildNode*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  /** Provide string value from inputOutput SFString field named "appinfo". */
  string (*getAppinfo) (void* this);

  /** Assign string value to inputOutput SFString field named "appinfo". */
  void (*setAppinfo) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "documentation". */
  string (*getDocumentation) (void* this);

  /** Assign string value to inputOutput SFString field named "documentation". */
  void (*setDocumentation) (void* this, string value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  void (*getField) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "field" array */
  int (*getNumField) (void* this);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField) (void* this, field* nodes);

  /** Assign single field* value (using a properly typed node) as the MFNode array for inputOutput field named "field" */
  void (*setField2) (void* this, field* node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void (*setField3) (void* this, struct X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField4) (void* this, struct X3DNode* nodes);
}
;/** Extrusion defines a node interface that extends interface X3DGeometryNode. */

struct Extrusion
{
  struct X3DGeometryNode*  extNode;

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_crossSection". */
  void (*setCrossSection) (void* this, float* values);

  /** Assign 4-tuple float* value in radians to inputOnly MFRotation field named "set_orientation". */
  void (*setOrientation) (void* this, float* values);

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_scale". */
  void (*setScale) (void* this, float* values);

  /** Assign 3-tuple float* value to inputOnly MFVec3f field named "set_spine". */
  void (*setSpine) (void* this, float* values);

  /** Provide SFBool value from initializeOnly SFBool field named "beginCap". */
  SFBool (*getBeginCap) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "beginCap". */
  void (*setBeginCap) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "convex". */
  SFBool (*getConvex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "convex". */
  void (*setConvex) (void* this, SFBool value);

  /** Provide float value in radians [0,∞) from initializeOnly SFFloat field named "creaseAngle". */
  float (*getCreaseAngle) (void* this);

  /** Assign float value in radians [0,∞) to initializeOnly SFFloat field named "creaseAngle". */
  void (*setCreaseAngle) (void* this, float angle)

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "crossSection". */
  void (*getCrossSection) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "crossSection" array */
  int (*getNumCrossSection) (void* this);

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "crossSection". */
  void (*setCrossSection) (void* this, float* values);

  /** Provide SFBool value from initializeOnly SFBool field named "endCap". */
  SFBool (*getEndCap) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "endCap". */
  void (*setEndCap) (void* this, SFBool value);

  /** Provide 4-tuple float* value in radians from initializeOnly MFRotation field named "orientation". */
  float* (*getOrientation) (void* this);

  /** Provide number of 4-tuple primitive values in "orientation" array */
  int (*getNumOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to initializeOnly MFRotation field named "orientation". */
  void (*setOrientation) (void* this, float* values);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "scale" array */
  int (*getNumScale) (void* this);

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "scale". */
  void (*setScale) (void* this, float* values);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide 3-tuple float* value from initializeOnly MFVec3f field named "spine". */
  void (*getSpine) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "spine" array */
  int (*getNumSpine) (void* this);

  /** Assign 3-tuple float* value to initializeOnly MFVec3f field named "spine". */
  void (*setSpine) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** field defines a node interface that extends interface X3DStatement.
  * Functional summary: a field statement defines an interface attribute or node. Each field statement can contain either attribute-value or node content. */

struct field
{
  struct X3DStatement*  extNode;

  /** Provide string value from inputOutput SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to inputOutput SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "accessType". */
  string (*getAccessType) (void* this);

  /** Assign string value to inputOutput SFString field named "accessType". */
  void (*setAccessType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to inputOutput SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "value". */
  string (*getValue) (void* this);

  /** Assign string value to inputOutput SFString field named "value". */
  void (*setValue) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "appinfo". */
  string (*getAppinfo) (void* this);

  /** Assign string value to inputOutput SFString field named "appinfo". */
  void (*setAppinfo) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "documentation". */
  string (*getDocumentation) (void* this);

  /** Assign string value to inputOutput SFString field named "documentation". */
  void (*setDocumentation) (void* this, string value);

  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void (*setChildren) (void* this, X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DNode* node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);
}
;/** fieldValue defines a node interface that extends interface X3DStatement.
  * Functional summary: a fieldValue statement re-initializes the default value of a field in a ProtoInstance. Each fieldValue statement can contain either attribute-value or node content. */

struct fieldValue
{
  struct X3DStatement*  extNode;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "value". */
  string (*getValue) (void* this);

  /** Assign string value to inputOutput SFString field named "value". */
  void (*setValue) (void* this, string value);

  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void (*setChildren) (void* this, X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DNode* node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);
}
;/** FillProperties defines a node interface that extends interface X3DAppearanceChildNode. */

struct FillProperties
{
  struct X3DAppearanceChildNode*  extNode;

  /** Provide SFBool value from inputOutput SFBool field named "filled". */
  SFBool (*getFilled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "filled". */
  void (*setFilled) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "hatched". */
  SFBool (*getHatched) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "hatched". */
  void (*setHatched) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "hatchStyle". */
  int (*getHatchStyle) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "hatchStyle". */
  void (*setHatchStyle) (void* this, int value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "hatchColor". */
  void (*getHatchColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "hatchColor". */
  void (*setHatchColor) (void* this, float* color)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** FloatVertexAttribute defines a node interface that extends interface X3DVertexAttributeNode. */

struct FloatVertexAttribute
{
  struct X3DVertexAttributeNode*  extNode;

  /** Provide float* value from inputOutput MFFloat field named "value". */
  float* (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "value". */
  void (*setValue) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "value" */
  void (*setValue2) (void* this, float* value);

  /** Provide int value [1,4) from initializeOnly SFInt32 field named "numComponents". */
  int (*getNumComponents) (void* this);

  /** Assign int value [1,4) to initializeOnly SFInt32 field named "numComponents". */
  void (*setNumComponents) (void* this, int value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Fog defines a node interface that extends interfaces X3DBindableNode, X3DFogObject. */

struct Fog
{
  struct X3DBindableNode*  extNode;
  struct X3DFogObject*  extNode1;

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "fogType". */
  string (*getFogType) (void* this);

  /** Assign string value to inputOutput SFString field named "fogType". */
  void (*setFogType) (void* this, string value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "visibilityRange". */
  float (*getVisibilityRange) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "visibilityRange". */
  void (*setVisibilityRange) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign SFBool value to inputOnly SFBool field named "set_bind". */
  void (*setBind) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double (*getBindTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isBound". */
  SFBool (*getIsBound) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** FogCoordinate defines a node interface that extends interface X3DGeometricPropertyNode. */

struct FogCoordinate
{
  struct X3DGeometricPropertyNode*  extNode;

  /** Provide float* value (-∞,∞) from inputOutput MFFloat field named "depth". */
  float* (*getDepth) (void* this);

  /** Provide number of primitive values in "depth" array */
  int (*getNumDepth) (void* this);

  /** Assign float* value (-∞,∞) to inputOutput MFFloat field named "depth". */
  void (*setDepth) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for inputOutput field named "depth" */
  void (*setDepth2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** FontStyle defines a node interface that extends interface X3DFontStyleNode. */

struct FontStyle
{
  struct X3DFontStyleNode*  extNode;

  /** Provide string value from inputOutput SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to inputOutput SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "size". */
  float (*getSize) (void* this);

  /** Assign float value to inputOutput SFFloat field named "size". */
  void (*setSize) (void* this, float value);

  /** Provide string* value from inputOutput MFString field named "family". */
  string* (*getFamily) (void* this);

  /** Provide number of primitive values in "family" array */
  int (*getNumFamily) (void* this);

  /** Assign string* value to inputOutput MFString field named "family". */
  void (*setFamily) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "family". */
  string* (*getFamily) (void* this);

  /** Provide number of primitive values in "family" array */
  int (*getNumFamily) (void* this);

  /** Assign string* value to inputOutput MFString field named "family". */
  void (*setFamily) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "family" */
  void (*setFamily2) (void* this, string* value);

  /** Provide SFBool value from inputOutput SFBool field named "horizontal". */
  SFBool (*getHorizontal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "horizontal". */
  void (*setHorizontal) (void* this, SFBool value);

  /** Provide string* value from inputOutput MFString field named "justify". */
  string* (*getJustify) (void* this);

  /** Provide number of primitive values in "justify" array */
  int (*getNumJustify) (void* this);

  /** Assign string* value to inputOutput MFString field named "justify". */
  void (*setJustify) (void* this, string* values);

  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "leftToRight". */
  SFBool (*getLeftToRight) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "leftToRight". */
  void (*setLeftToRight) (void* this, SFBool value);

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "size". */
  float (*getSize) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "size". */
  void (*setSize) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "spacing". */
  float (*getSpacing) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "spacing". */
  void (*setSpacing) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "style". */
  string (*getStyle) (void* this);

  /** Assign string value to inputOutput SFString field named "style". */
  void (*setStyle) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "topToBottom". */
  SFBool (*getTopToBottom) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "topToBottom". */
  void (*setTopToBottom) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ForcePhysicsModel defines a node interface that extends interface X3DParticlePhysicsModelNode. */

struct ForcePhysicsModel
{
  struct X3DParticlePhysicsModelNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "force". */
  void (*getForce) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "force". */
  void (*setForce) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Gain defines a node interface that extends interface X3DSoundProcessingNode. */

struct Gain
{
  struct X3DSoundProcessingNode*  extNode;

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tailTime". */
  double (*getTailTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tailTime". */
  void (*setTailTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeneratedCubeMapTexture defines a node interface that extends interface X3DEnvironmentTextureNode. */

struct GeneratedCubeMapTexture
{
  struct X3DEnvironmentTextureNode*  extNode;

  /** Provide int value (0,∞) from initializeOnly SFInt32 field named "size". */
  int (*getSize) (void* this);

  /** Assign int value (0,∞) to initializeOnly SFInt32 field named "size". */
  void (*setSize) (void* this, int value)

  /** Provide string value from inputOutput SFString field named "update". */
  string (*getUpdate) (void* this);

  /** Assign string value to inputOutput SFString field named "update". */
  void (*setUpdate) (void* this, string value);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoCoordinate defines a node interface that extends interface X3DCoordinateNode. */

struct GeoCoordinate
{
  struct X3DCoordinateNode*  extNode;

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from initializeOnly MFVec3d field named "point". */
  void (*getPoint) (void* this, double* result);

  /** Provide number of 3-tuple primitive values in "point" array */
  int (*getNumPoint) (void* this);

  /** Assign 3-tuple double* value to initializeOnly MFVec3d field named "point". */
  void (*setPoint) (void* this, double* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoElevationGrid defines a node interface that extends interface X3DGeometryNode. */

struct GeoElevationGrid
{
  struct X3DGeometryNode*  extNode;

  /** Assign float* value to inputOnly MFFloat field named "set_height". */
  void (*setHeight) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOnly field named "set_height" */
  void (*setHeight2) (void* this, float* value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from initializeOnly SFVec3d field named "geoGridOrigin". */
  void (*getGeoGridOrigin) (void* this, double* result);

  /** Assign 3-tuple double* value to initializeOnly SFVec3d field named "geoGridOrigin". */
  void (*setGeoGridOrigin) (void* this, double* value);

  /** Provide double* value from initializeOnly MFDouble field named "height". */
  double* (*getHeight) (void* this);

  /** Provide number of primitive values in "height" array */
  int (*getNumHeight) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "height". */
  void (*setHeight) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "height" */
  void (*setHeight2) (void* this, double* value);

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide double value in radians [0,∞) from initializeOnly SFDouble field named "creaseAngle". */
  double (*getCreaseAngle) (void* this);

  /** Assign double value in radians [0,∞) to initializeOnly SFDouble field named "creaseAngle". */
  void (*setCreaseAngle) (void* this, double angle)

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "xDimension". */
  int (*getXDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "xDimension". */
  void (*setXDimension) (void* this, int value)

  /** Provide double value (0,∞) from initializeOnly SFDouble field named "xSpacing". */
  double (*getXSpacing) (void* this);

  /** Assign double value (0,∞) to initializeOnly SFDouble field named "xSpacing". */
  void (*setXSpacing) (void* this, double value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "yScale". */
  float (*getYScale) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "yScale". */
  void (*setYScale) (void* this, float value)

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "zDimension". */
  int (*getZDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "zDimension". */
  void (*setZDimension) (void* this, int value)

  /** Provide double value (0,∞) from initializeOnly SFDouble field named "zSpacing". */
  double (*getZSpacing) (void* this);

  /** Assign double value (0,∞) to initializeOnly SFDouble field named "zSpacing". */
  void (*setZSpacing) (void* this, double value)

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*setTexCoord) (void* this, X3DSingleTextureCoordinateNode node);

  /** Assign X3DSingleTextureCoordinateNode value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoLocation defines a node interface that extends interface X3DGroupingNode. */

struct GeoLocation
{
  struct X3DGroupingNode*  extNode;

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  void (*getGeoCoords) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void (*setGeoCoords) (void* this, double* value);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoLOD defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject.
  * Note that MFNode rootNode field can contain multiple nodes and has accessType inputOutput. Meanwhile MFNode children field is outputOnly, unlike other X3DGroupingNode exemplars. */

struct GeoLOD
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide 3-tuple double* value from initializeOnly SFVec3d field named "center". */
  void (*getCenter) (void* this, double* result);

  /** Assign 3-tuple double* value to initializeOnly SFVec3d field named "center". */
  void (*setCenter) (void* this, double* value);

  /** Provide int value [0,1) from outputOnly SFInt32 field named "level_changed". */
  int (*getLevel) (void* this);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide string* value from initializeOnly MFString field named "rootUrl". */
  string* (*getRootUrl) (void* this);

  /** Provide number of primitive values in "rootUrl" array */
  int (*getNumRootUrl) (void* this);

  /** Assign string* value to initializeOnly MFString field named "rootUrl". */
  void (*setRootUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for initializeOnly field named "rootUrl" */
  void (*setRootUrl2) (void* this, string* value);

  /** Provide string* value from initializeOnly MFString field named "child1Url". */
  string* (*getChild1Url) (void* this);

  /** Provide number of primitive values in "child1Url" array */
  int (*getNumChild1Url) (void* this);

  /** Assign string* value to initializeOnly MFString field named "child1Url". */
  void (*setChild1Url) (void* this, string* values);

  /** Assign single string* value as the MFString array for initializeOnly field named "child1Url" */
  void (*setChild1Url2) (void* this, string* value);

  /** Provide string* value from initializeOnly MFString field named "child2Url". */
  string* (*getChild2Url) (void* this);

  /** Provide number of primitive values in "child2Url" array */
  int (*getNumChild2Url) (void* this);

  /** Assign string* value to initializeOnly MFString field named "child2Url". */
  void (*setChild2Url) (void* this, string* values);

  /** Assign single string* value as the MFString array for initializeOnly field named "child2Url" */
  void (*setChild2Url2) (void* this, string* value);

  /** Provide string* value from initializeOnly MFString field named "child3Url". */
  string* (*getChild3Url) (void* this);

  /** Provide number of primitive values in "child3Url" array */
  int (*getNumChild3Url) (void* this);

  /** Assign string* value to initializeOnly MFString field named "child3Url". */
  void (*setChild3Url) (void* this, string* values);

  /** Assign single string* value as the MFString array for initializeOnly field named "child3Url" */
  void (*setChild3Url2) (void* this, string* value);

  /** Provide string* value from initializeOnly MFString field named "child4Url". */
  string* (*getChild4Url) (void* this);

  /** Provide number of primitive values in "child4Url" array */
  int (*getNumChild4Url) (void* this);

  /** Assign string* value to initializeOnly MFString field named "child4Url". */
  void (*setChild4Url) (void* this, string* values);

  /** Assign single string* value as the MFString array for initializeOnly field named "child4Url" */
  void (*setChild4Url2) (void* this, string* value);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "center". */
  void (*getCenter) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "center". */
  void (*setCenter) (void* this, double* value);

  /** Provide float value [0,∞) from initializeOnly SFFloat field named "range". */
  float (*getRange) (void* this);

  /** Assign float value [0,∞) to initializeOnly SFFloat field named "range". */
  void (*setRange) (void* this, float value)

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from initializeOnly X3DChildNode type field named "rootNode". */
  void (*getRootNode) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "rootNode" array */
  int (*getNumRootNode) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "rootNode". */
  void (*setRootNode) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for initializeOnly field named "rootNode" */
  void (*setRootNode2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to initializeOnly X3DChildNode type field named "rootNode". */
  void (*setRootNode3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "rootNode". */
  void (*setRootNode4) (void* this, struct X3DNode* nodes);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoMetadata defines a node interface that extends interfaces X3DInfoNode, X3DUrlObject. */

struct GeoMetadata
{
  struct X3DInfoNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "summary". */
  string* (*getSummary) (void* this);

  /** Provide number of primitive values in "summary" array */
  int (*getNumSummary) (void* this);

  /** Assign string* value to inputOutput MFString field named "summary". */
  void (*setSummary) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "summary" */
  void (*setSummary2) (void* this, string* value);

  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "data". */
  void (*getData) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "data" array */
  int (*getNumData) (void* this);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "data". */
  void (*setData) (void* this, X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "data" */
  void (*setData2) (void* this, X3DNode* node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "data". */
  void (*setData3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "data". */
  void (*setData4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoOrigin defines a node interface that extends interface X3DNode.
  * GeoOrigin is deprecated and discouraged (but nevertheless allowed) in X3D version 3.3. GeoOrigin is restored in X3D version 4.0 for special use on devices with limited floating-point resolution. */

@Deprecated struct GeoOrigin
{
  struct X3DNode*  extNode;

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  void (*getGeoCoords) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void (*setGeoCoords) (void* this, double* value);

  /** Provide SFBool value from initializeOnly SFBool field named "rotateYUp". */
  SFBool (*getRotateYUp) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "rotateYUp". */
  void (*setRotateYUp) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoPositionInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct GeoPositionInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 3-tuple double* value from outputOnly SFVec3d field named "geovalue_changed". */
  void (*getGeovalue) (void* this, double* result);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from inputOutput MFVec3d field named "keyValue". */
  void (*getKeyValue) (void* this, double* result);

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 3-tuple double* value to inputOutput MFVec3d field named "keyValue". */
  void (*setKeyValue) (void* this, double* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoProximitySensor defines a node interface that extends interface X3DEnvironmentalSensorNode. */

struct GeoProximitySensor
{
  struct X3DEnvironmentalSensorNode*  extNode;

  /** Provide 3-tuple float* value in radians from outputOnly SFVec3f field named "centerOfRotation_changed". */
  void (*getCenterOfRotation) (void* this, float* result);

  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double (*getEnterTime) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double (*getExitTime) (void* this);

  /** Provide 3-tuple double* value from outputOnly SFVec3d field named "geoCoord_changed". */
  void (*getGeoCoord) (void* this, double* result);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "orientation_changed". */
  float* (*getOrientation) (void* this);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  void (*getPosition) (void* this, float* result);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "center". */
  void (*getCenter) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "center". */
  void (*setCenter) (void* this, double* value);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCenter". */
  void (*getGeoCenter) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCenter". */
  void (*setGeoCenter) (void* this, double* value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-∞,∞) from initializeOnly SFVec3f field named "size". */
  void (*getSize) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to initializeOnly SFVec3f field named "size". */
  void (*setSize) (void* this, float* value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoTouchSensor defines a node interface that extends interface X3DTouchSensorNode. */

struct GeoTouchSensor
{
  struct X3DTouchSensorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitNormal_changed". */
  void (*getHitNormal) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitPoint_changed". */
  void (*getHitPoint) (void* this, float* result);

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "hitTexCoord_changed". */
  void (*getHitTexCoord) (void* this, float* result);

  /** Provide 3-tuple double* value from outputOnly SFVec3d field named "hitGeoCoord_changed". */
  void (*getHitGeoCoord) (void* this, double* result);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isOver". */
  SFBool (*getIsOver) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "touchTime". */
  double (*getTouchTime) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoTransform defines a node interface that extends interface X3DGroupingNode. */

struct GeoTransform
{
  struct X3DGroupingNode*  extNode;

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCenter". */
  void (*getGeoCenter) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCenter". */
  void (*setGeoCenter) (void* this, double* value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* (*getScaleOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void (*setScaleOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** GeoViewpoint defines a node interface that extends interface X3DViewpointNode. */

struct GeoViewpoint
{
  struct X3DViewpointNode*  extNode;

  /** Provide 3-tuple double* value in radians from inputOutput SFVec3d field named "centerOfRotation". */
  void (*getCenterOfRotation) (void* this, double* result);

  /** Assign 3-tuple double* value in radians to inputOutput SFVec3d field named "centerOfRotation". */
  void (*setCenterOfRotation) (void* this, double* value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide float value (0,3.1416) from inputOutput SFFloat field named "fieldOfView". */
  float (*getFieldOfView) (void* this);

  /** Assign float value (0,3.1416) to inputOutput SFFloat field named "fieldOfView". */
  void (*setFieldOfView) (void* this, float value)

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "position". */
  void (*getPosition) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "position". */
  void (*setPosition) (void* this, double* value);

  /** Provide float value [0,∞) from initializeOnly SFFloat field named "speedFactor". */
  float (*getSpeedFactor) (void* this);

  /** Assign float value [0,∞) to initializeOnly SFFloat field named "speedFactor". */
  void (*setSpeedFactor) (void* this, float value)

  /** Provide GeoOrigin value (deprecated node, optional) (deprecated node, optional) from initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*getGeoOrigin) (void* this, struct X3DNode result);

  /** Assign GeoOrigin value (deprecated node, optional) (deprecated node, optional) to initializeOnly GeoOrigin type field named "geoOrigin". */
  @Deprecated void (*setGeoOrigin) (void* this, GeoOrigin node)

  /** Assign GeoOrigin value (deprecated protoInstance) */
  @Deprecated void (*setGeoOrigin2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign SFBool value to inputOnly SFBool field named "set_bind". */
  void (*setBind) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double (*getBindTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isBound". */
  SFBool (*getIsBound) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "jump". */
  SFBool (*getJump) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "jump". */
  void (*setJump) (void* this, SFBool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* (*getOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void (*setOrientation) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "retainUserOffsets". */
  SFBool (*getRetainUserOffsets) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "retainUserOffsets". */
  void (*setRetainUserOffsets) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "farDistance". */
  float (*getFarDistance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "farDistance". */
  void (*setFarDistance) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "nearDistance". */
  float (*getNearDistance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "nearDistance". */
  void (*setNearDistance) (void* this, float value);

  /** Provide SFBool value from inputOutput SFBool field named "viewAll". */
  SFBool (*getViewAll) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "viewAll". */
  void (*setViewAll) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide NavigationInfo value (using a properly typed node or X3DPrototypeInstance) from inputOutput NavigationInfo type field named "navigationInfo". */
  void (*getNavigationInfo) (void* this, struct X3DNode result);

  /** Assign NavigationInfo value (using a properly typed node) to inputOutput NavigationInfo type field named "navigationInfo". */
  void (*setNavigationInfo) (void* this, NavigationInfo node);

  /** Assign NavigationInfo value (using a properly typed protoInstance) */
  void (*setNavigationInfo2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Group defines a node interface that extends interface X3DGroupingNode. */

struct Group
{
  struct X3DGroupingNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** HAnimDisplacer defines a node interface that extends interface X3DGeometricPropertyNode. */

struct HAnimDisplacer
{
  struct X3DGeometricPropertyNode*  extNode;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide MFInt32 value (-∞,∞) from inputOutput MFInt32 field named "coordIndex". */
  MFInt32 (*getCoordIndex) (void* this);

  /** Provide number of primitive values in "coordIndex" array */
  int (*getNumCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to inputOutput MFInt32 field named "coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOutput field named "coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "displacements". */
  void (*getDisplacements) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "displacements" array */
  int (*getNumDisplacements) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "displacements". */
  void (*setDisplacements) (void* this, float* values);

  /** Provide float value from inputOutput SFFloat field named "weight". */
  float (*getWeight) (void* this);

  /** Assign float value to inputOutput SFFloat field named "weight". */
  void (*setWeight) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** HAnimHumanoid defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject. */

struct HAnimHumanoid
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide string* value from inputOutput MFString field named "info". */
  string* (*getInfo) (void* this);

  /** Provide number of primitive values in "info" array */
  int (*getNumInfo) (void* this);

  /** Assign string* value to inputOutput MFString field named "info". */
  void (*setInfo) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "info" */
  void (*setInfo2) (void* this, string* value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "jointBindingPositions". */
  void (*getJointBindingPositions) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "jointBindingPositions" array */
  int (*getNumJointBindingPositions) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "jointBindingPositions". */
  void (*setJointBindingPositions) (void* this, float* values);

  /** Provide 4-tuple float* value in radians from inputOutput MFRotation field named "jointBindingRotations". */
  float* (*getJointBindingRotations) (void* this);

  /** Provide number of 4-tuple primitive values in "jointBindingRotations" array */
  int (*getNumJointBindingRotations) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput MFRotation field named "jointBindingRotations". */
  void (*setJointBindingRotations) (void* this, float* values);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "jointBindingScales". */
  void (*getJointBindingScales) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "jointBindingScales" array */
  int (*getNumJointBindingScales) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "jointBindingScales". */
  void (*setJointBindingScales) (void* this, float* values);

  /** Provide int value from inputOutput SFInt32 field named "loa". */
  int (*getLoa) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "loa". */
  void (*setLoa) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* (*getScaleOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void (*setScaleOrientation) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "skeletalConfiguration". */
  string (*getSkeletalConfiguration) (void* this);

  /** Assign string value to inputOutput SFString field named "skeletalConfiguration". */
  void (*setSkeletalConfiguration) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "version". */
  string (*getVersion) (void* this);

  /** Assign string value to inputOutput SFString field named "version". */
  void (*setVersion) (void* this, string value);

  /** Provide HAnimJoint* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimJoint type field named "joints". */
  void (*getJoints) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "joints" array */
  int (*getNumJoints) (void* this);

  /** Assign HAnimJoint* value (using a properly typed node array) to inputOutput HAnimJoint type field named "joints". */
  void (*setJoints) (void* this, HAnimJoint* nodes);

  /** Assign single HAnimJoint* value (using a properly typed node) as the MFNode array for inputOutput field named "joints" */
  void (*setJoints2) (void* this, HAnimJoint* node);

  /** Assign HAnimJoint* value (using a properly typed protoInstance array) to inputOutput HAnimJoint type field named "joints". */
  void (*setJoints3) (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimJoint* value (using a properly typed node array) to inputOutput HAnimJoint type field named "joints". */
  void (*setJoints4) (void* this, struct X3DNode* nodes);

  /** Provide HAnimSegment* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimSegment type field named "segments". */
  void (*getSegments) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "segments" array */
  int (*getNumSegments) (void* this);

  /** Assign HAnimSegment* value (using a properly typed node array) to inputOutput HAnimSegment type field named "segments". */
  void (*setSegments) (void* this, HAnimSegment* nodes);

  /** Assign single HAnimSegment* value (using a properly typed node) as the MFNode array for inputOutput field named "segments" */
  void (*setSegments2) (void* this, HAnimSegment* node);

  /** Assign HAnimSegment* value (using a properly typed protoInstance array) to inputOutput HAnimSegment type field named "segments". */
  void (*setSegments3) (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimSegment* value (using a properly typed node array) to inputOutput HAnimSegment type field named "segments". */
  void (*setSegments4) (void* this, struct X3DNode* nodes);

  /** Provide HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimSite type field named "sites". */
  void (*getSites) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "sites" array */
  int (*getNumSites) (void* this);

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "sites". */
  void (*setSites) (void* this, HAnimSite* nodes);

  /** Assign single HAnimSite* value (using a properly typed node) as the MFNode array for inputOutput field named "sites" */
  void (*setSites2) (void* this, HAnimSite* node);

  /** Assign HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimSite type field named "sites". */
  void (*setSites3) (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "sites". */
  void (*setSites4) (void* this, struct X3DNode* nodes);

  /** Provide HAnimJoint|HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimJoint|HAnimSite type field named "skeleton". */
  void (*getSkeleton) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "skeleton" array */
  int (*getNumSkeleton) (void* this);

  /** Assign HAnimJoint|HAnimSite* value (using a properly typed node array) to inputOutput HAnimJoint|HAnimSite type field named "skeleton". */
  void (*setSkeleton) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "skeleton" */
  void (*setSkeleton2) (void* this, struct X3DNode node);

  /** Assign HAnimJoint|HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimJoint|HAnimSite type field named "skeleton". */
  void (*setSkeleton3) (void* this, struct X3DPrototypeInstance node);

  /** Provide Group|Transform|Shape|IndexedFaceSet* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Group|Transform|Shape|IndexedFaceSet type field named "skin". */
  void (*getSkin) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "skin" array */
  int (*getNumSkin) (void* this);

  /** Assign Group|Transform|Shape|IndexedFaceSet* value (using a properly typed node array) to inputOutput Group|Transform|Shape|IndexedFaceSet type field named "skin". */
  void (*setSkin) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "skin" */
  void (*setSkin2) (void* this, struct X3DNode node);

  /** Assign Group|Transform|Shape|IndexedFaceSet* value (using a properly typed protoInstance array) to inputOutput Group|Transform|Shape|IndexedFaceSet type field named "skin". */
  void (*setSkin3) (void* this, struct X3DPrototypeInstance node);

  /** Provide HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimSite type field named "viewpoints". */
  void (*getViewpoints) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "viewpoints" array */
  int (*getNumViewpoints) (void* this);

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "viewpoints". */
  void (*setViewpoints) (void* this, HAnimSite* nodes);

  /** Assign single HAnimSite* value (using a properly typed node) as the MFNode array for inputOutput field named "viewpoints" */
  void (*setViewpoints2) (void* this, HAnimSite* node);

  /** Assign HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimSite type field named "viewpoints". */
  void (*setViewpoints3) (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimSite* value (using a properly typed node array) to inputOutput HAnimSite type field named "viewpoints". */
  void (*setViewpoints4) (void* this, struct X3DNode* nodes);

  /** Provide HAnimMotion* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimMotion type field named "motions". */
  void (*getMotions) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "motions" array */
  int (*getNumMotions) (void* this);

  /** Assign HAnimMotion* value (using a properly typed node array) to inputOutput HAnimMotion type field named "motions". */
  void (*setMotions) (void* this, HAnimMotion* nodes);

  /** Assign single HAnimMotion* value (using a properly typed node) as the MFNode array for inputOutput field named "motions" */
  void (*setMotions2) (void* this, HAnimMotion* node);

  /** Assign HAnimMotion* value (using a properly typed protoInstance array) to inputOutput HAnimMotion type field named "motions". */
  void (*setMotions3) (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimMotion* value (using a properly typed node array) to inputOutput HAnimMotion type field named "motions". */
  void (*setMotions4) (void* this, struct X3DNode* nodes);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "skinCoord". */
  void (*getSkinCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "skinCoord". */
  void (*setSkinCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setSkinCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "skinNormal". */
  void (*getSkinNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "skinNormal". */
  void (*setSkinNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setSkinNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "skinBindingCoord". */
  void (*getSkinBindingCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "skinBindingCoord". */
  void (*setSkinBindingCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setSkinBindingCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "skinBindingNormal". */
  void (*getSkinBindingNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "skinBindingNormal". */
  void (*setSkinBindingNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setSkinBindingNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** HAnimJoint defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject. */

struct HAnimJoint
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* (*getScaleOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void (*setScaleOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  /** Provide MFInt32 value (-∞,∞) from inputOutput MFInt32 field named "skinCoordIndex". */
  MFInt32 (*getSkinCoordIndex) (void* this);

  /** Provide number of primitive values in "skinCoordIndex" array */
  int (*getNumSkinCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to inputOutput MFInt32 field named "skinCoordIndex". */
  void (*setSkinCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOutput field named "skinCoordIndex" */
  void (*setSkinCoordIndex2) (void* this, SFInt32 value);

  /** Provide float* value from inputOutput MFFloat field named "skinCoordWeight". */
  float* (*getSkinCoordWeight) (void* this);

  /** Provide number of primitive values in "skinCoordWeight" array */
  int (*getNumSkinCoordWeight) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "skinCoordWeight". */
  void (*setSkinCoordWeight) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "skinCoordWeight" */
  void (*setSkinCoordWeight2) (void* this, float* value);

  /** Provide float* value from inputOutput MFFloat field named "llimit". */
  float* (*getLlimit) (void* this);

  /** Provide number of primitive values in "llimit" array */
  int (*getNumLlimit) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "llimit". */
  void (*setLlimit) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "llimit" */
  void (*setLlimit2) (void* this, float* value);

  /** Provide float* value from inputOutput MFFloat field named "ulimit". */
  float* (*getUlimit) (void* this);

  /** Provide number of primitive values in "ulimit" array */
  int (*getNumUlimit) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "ulimit". */
  void (*setUlimit) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "ulimit" */
  void (*setUlimit2) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "limitOrientation". */
  float* (*getLimitOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "limitOrientation". */
  void (*setLimitOrientation) (void* this, float* value);

  /** Provide float* value (-∞,∞) from inputOutput MFFloat field named "stiffness". */
  float* (*getStiffness) (void* this);

  /** Provide number of primitive values in "stiffness" array */
  int (*getNumStiffness) (void* this);

  /** Assign float* value (-∞,∞) to inputOutput MFFloat field named "stiffness". */
  void (*setStiffness) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for inputOutput field named "stiffness" */
  void (*setStiffness2) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "addChildren". */
  void addChildren (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, struct X3DNode node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed protoInstance array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "removeChildren". */
  void removeChildren (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, struct X3DNode node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed protoInstance array) to inputOnly HAnimJoint|HAnimSegment|HAnimSite type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Provide HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimJoint|HAnimSegment|HAnimSite type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed node array) to inputOutput HAnimJoint|HAnimSegment|HAnimSite type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign HAnimJoint|HAnimSegment|HAnimSite* value (using a properly typed protoInstance array) to inputOutput HAnimJoint|HAnimSegment|HAnimSite type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Provide HAnimDisplacer* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimDisplacer type field named "displacers". */
  void (*getDisplacers) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "displacers" array */
  int (*getNumDisplacers) (void* this);

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void (*setDisplacers) (void* this, HAnimDisplacer* nodes);

  /** Assign single HAnimDisplacer* value (using a properly typed node) as the MFNode array for inputOutput field named "displacers" */
  void (*setDisplacers2) (void* this, HAnimDisplacer* node);

  /** Assign HAnimDisplacer* value (using a properly typed protoInstance array) to inputOutput HAnimDisplacer type field named "displacers". */
  void (*setDisplacers3) (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void (*setDisplacers4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** HAnimMotion defines a node interface that extends interface X3DChildNode. */

struct HAnimMotion
{
  struct X3DChildNode*  extNode;

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "cycleTime". */
  double (*getCycleTime) (void* this);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide string* value from inputOutput MFString field named "channels". */
  string* (*getChannels) (void* this);

  /** Provide number of primitive values in "channels" array */
  int (*getNumChannels) (void* this);

  /** Assign string* value to inputOutput MFString field named "channels". */
  void (*setChannels) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "channels" */
  void (*setChannels2) (void* this, string* value);

  /** Provide SFBool* value from inputOutput MFBool field named "channelsEnabled". */
  SFBool* (*getChannelsEnabled) (void* this);

  /** Provide number of primitive values in "channelsEnabled" array */
  int (*getNumChannelsEnabled) (void* this);

  /** Assign SFBool* value to inputOutput MFBool field named "channelsEnabled". */
  void (*setChannelsEnabled) (void* this, SFBool* values);

  /** Assign single SFBool* value as the MFBool array for inputOutput field named "channelsEnabled" */
  void (*setChannelsEnabled2) (void* this, SFBool* value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "endFrame". */
  int (*getEndFrame) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "endFrame". */
  void (*setEndFrame) (void* this, int value)

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "frameCount". */
  int (*getFrameCount) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "frameCount". */
  void (*setFrameCount) (void* this, int value)

  /** Provide double value in seconds (0,∞) from inputOutput SFTime field named "frameDuration". */
  double (*getFrameDuration) (void* this);

  /** Assign double value in seconds (0,∞) to inputOutput SFTime field named "frameDuration". */
  void (*setFrameDuration) (void* this, double timestamp)

  /** Provide int value from inputOutput SFInt32 field named "frameIncrement". */
  int (*getFrameIncrement) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "frameIncrement". */
  void (*setFrameIncrement) (void* this, int value);

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "frameIndex". */
  int (*getFrameIndex) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "frameIndex". */
  void (*setFrameIndex) (void* this, int value)

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "startFrame". */
  int (*getStartFrame) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "startFrame". */
  void (*setStartFrame) (void* this, int value)

  /** Provide string* value from inputOutput MFString field named "joints". */
  string* (*getJoints) (void* this);

  /** Provide number of primitive values in "joints" array */
  int (*getNumJoints) (void* this);

  /** Assign string* value to inputOutput MFString field named "joints". */
  void (*setJoints) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "joints" */
  void (*setJoints2) (void* this, string* value);

  /** Provide int value from inputOutput SFInt32 field named "loa". */
  int (*getLoa) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "loa". */
  void (*setLoa) (void* this, int value);

  /** Provide SFBool value from inputOutput SFBool field named "loop". */
  SFBool (*getLoop) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "loop". */
  void (*setLoop) (void* this, SFBool value);

  /** Provide float* value from inputOutput MFFloat field named "values". */
  float* (*getValues) (void* this);

  /** Provide number of primitive values in "values" array */
  int (*getNumValues) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "values". */
  void (*setValues) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "values" */
  void (*setValues2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** HAnimSegment defines a node interface that extends interface X3DGroupingNode. */

struct HAnimSegment
{
  struct X3DGroupingNode*  extNode;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "centerOfMass". */
  void (*getCenterOfMass) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "centerOfMass". */
  void (*setCenterOfMass) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide float* value (-∞,∞) from inputOutput MFFloat field named "momentsOfInertia". */
  float* (*getMomentsOfInertia) (void* this);

  /** Provide number of primitive values in "momentsOfInertia" array */
  int (*getNumMomentsOfInertia) (void* this);

  /** Assign float* value (-∞,∞) to inputOutput MFFloat field named "momentsOfInertia". */
  void (*setMomentsOfInertia) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for inputOutput field named "momentsOfInertia" */
  void (*setMomentsOfInertia2) (void* this, float* value);

  /** Provide HAnimDisplacer* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput HAnimDisplacer type field named "displacers". */
  void (*getDisplacers) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "displacers" array */
  int (*getNumDisplacers) (void* this);

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void (*setDisplacers) (void* this, HAnimDisplacer* nodes);

  /** Assign single HAnimDisplacer* value (using a properly typed node) as the MFNode array for inputOutput field named "displacers" */
  void (*setDisplacers2) (void* this, HAnimDisplacer* node);

  /** Assign HAnimDisplacer* value (using a properly typed protoInstance array) to inputOutput HAnimDisplacer type field named "displacers". */
  void (*setDisplacers3) (void* this, struct X3DPrototypeInstance node);

  /** Assign HAnimDisplacer* value (using a properly typed node array) to inputOutput HAnimDisplacer type field named "displacers". */
  void (*setDisplacers4) (void* this, struct X3DNode* nodes);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** HAnimSite defines a node interface that extends interface X3DGroupingNode. */

struct HAnimSite
{
  struct X3DGroupingNode*  extNode;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* (*getScaleOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void (*setScaleOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** head defines a node interface that extends interface X3DStatement.
  * Functional summary: each X3D scene includes a head statement that can contain component, unit and meta statements. */

struct head
{
  struct X3DStatement*  extNode;

  /** Provide component* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput component type field named "component". */
  void (*getComponent) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "component" array */
  int (*getNumComponent) (void* this);

  /** Assign component* value (using a properly typed node array) to inputOutput component type field named "component". */
  void (*setComponent) (void* this, component* nodes);

  /** Assign single component* value (using a properly typed node) as the MFNode array for inputOutput field named "component" */
  void (*setComponent2) (void* this, component* node);

  /** Assign component* value (using a properly typed protoInstance array) to inputOutput component type field named "component". */
  void (*setComponent3) (void* this, struct X3DPrototypeInstance node);

  /** Assign component* value (using a properly typed node array) to inputOutput component type field named "component". */
  void (*setComponent4) (void* this, struct X3DNode* nodes);

  /** Provide unit* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput unit type field named "unit". */
  void (*getUnit) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "unit" array */
  int (*getNumUnit) (void* this);

  /** Assign unit* value (using a properly typed node array) to inputOutput unit type field named "unit". */
  void (*setUnit) (void* this, unit* nodes);

  /** Assign single unit* value (using a properly typed node) as the MFNode array for inputOutput field named "unit" */
  void (*setUnit2) (void* this, unit* node);

  /** Assign unit* value (using a properly typed protoInstance array) to inputOutput unit type field named "unit". */
  void (*setUnit3) (void* this, struct X3DPrototypeInstance node);

  /** Assign unit* value (using a properly typed node array) to inputOutput unit type field named "unit". */
  void (*setUnit4) (void* this, struct X3DNode* nodes);

  /** Provide meta* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput meta type field named "meta". */
  void (*getMeta) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "meta" array */
  int (*getNumMeta) (void* this);

  /** Assign meta* value (using a properly typed node array) to inputOutput meta type field named "meta". */
  void (*setMeta) (void* this, meta* nodes);

  /** Assign single meta* value (using a properly typed node) as the MFNode array for inputOutput field named "meta" */
  void (*setMeta2) (void* this, meta* node);

  /** Assign meta* value (using a properly typed protoInstance array) to inputOutput meta type field named "meta". */
  void (*setMeta3) (void* this, struct X3DPrototypeInstance node);

  /** Assign meta* value (using a properly typed node array) to inputOutput meta type field named "meta". */
  void (*setMeta4) (void* this, struct X3DNode* nodes);
}
;/** ImageCubeMapTexture defines a node interface that extends interfaces X3DEnvironmentTextureNode, X3DUrlObject. */

struct ImageCubeMapTexture
{
  struct X3DEnvironmentTextureNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ImageTexture defines a node interface that extends interfaces X3DTexture2DNode, X3DUrlObject. */

struct ImageTexture
{
  struct X3DTexture2DNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatS". */
  SFBool (*getRepeatS) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatS". */
  void (*setRepeatS) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatT". */
  SFBool (*getRepeatT) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatT". */
  void (*setRepeatT) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ImageTexture3D defines a node interface that extends interfaces X3DTexture3DNode, X3DUrlObject. */

struct ImageTexture3D
{
  struct X3DTexture3DNode*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatS". */
  SFBool (*getRepeatS) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatS". */
  void (*setRepeatS) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatT". */
  SFBool (*getRepeatT) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatT". */
  void (*setRepeatT) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatR". */
  SFBool (*getRepeatR) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatR". */
  void (*setRepeatR) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IMPORT defines a node interface that extends interface X3DStatement.
  * Functional summary: IMPORT provides ROUTE access to a node that has a corresponding EXPORT statement within an Inline scene. These connections allow event values to be exchanged via ROUTE statements between a parent model and a child Inline model. */

struct IMPORT
{
  struct X3DStatement*  extNode;

  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "inlineDEF". */
  xs:IDREF (*getInlineDEF) (void* this);

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "inlineDEF". */
  void (*setInlineDEF) (void* this, xs:IDREF value);

  /** Provide string value from inputOutput SFString field named "importedDEF". */
  string (*getImportedDEF) (void* this);

  /** Assign string value to inputOutput SFString field named "importedDEF". */
  void (*setImportedDEF) (void* this, string value);

  /** Provide xs:ID value from inputOutput xs:ID type field named "AS". */
  xs:ID (*getAS) (void* this);

  /** Assign xs:ID value to inputOutput xs:ID type field named "AS". */
  void (*setAS) (void* this, xs:ID value);
}
;/** IndexedFaceSet defines a node interface that extends interface X3DComposedGeometryNode. */

struct IndexedFaceSet
{
  struct X3DComposedGeometryNode*  extNode;

  /** Assign MFInt32 value using RGB values [0..1] to inputOnly MFInt32 field named "set_colorIndex". */
  void (*setColorIndex) (void* this, MFInt32 colors)

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for inputOnly field named "set_colorIndex" */
  void (*setColorIndex2) (void* this, SFInt32 color)

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_normalIndex". */
  void (*setNormalIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_normalIndex" */
  void (*setNormalIndex2) (void* this, SFInt32 value);

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_texCoordIndex". */
  void (*setTexCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_texCoordIndex" */
  void (*setTexCoordIndex2) (void* this, SFInt32 value);

  /** Provide SFBool value from initializeOnly SFBool field named "convex". */
  SFBool (*getConvex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "convex". */
  void (*setConvex) (void* this, SFBool value);

  /** Provide float value in radians [0,∞) from initializeOnly SFFloat field named "creaseAngle". */
  float (*getCreaseAngle) (void* this);

  /** Assign float value in radians [0,∞) to initializeOnly SFFloat field named "creaseAngle". */
  void (*setCreaseAngle) (void* this, float angle)

  /** Provide MFInt32 value using RGB values [0..1] from initializeOnly MFInt32 field named "colorIndex". */
  MFInt32 (*getColorIndex) (void* this);

  /** Provide number of primitive values in "colorIndex" array */
  int (*getNumColorIndex) (void* this);

  /** Assign MFInt32 value using RGB values [0..1] to initializeOnly MFInt32 field named "colorIndex". */
  void (*setColorIndex) (void* this, MFInt32 colors)

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for initializeOnly field named "colorIndex" */
  void (*setColorIndex2) (void* this, SFInt32 color)

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 (*getCoordIndex) (void* this);

  /** Provide number of primitive values in "coordIndex" array */
  int (*getNumCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "normalIndex". */
  MFInt32 (*getNormalIndex) (void* this);

  /** Provide number of primitive values in "normalIndex" array */
  int (*getNumNormalIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "normalIndex". */
  void (*setNormalIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "normalIndex" */
  void (*setNormalIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "texCoordIndex". */
  MFInt32 (*getTexCoordIndex) (void* this);

  /** Provide number of primitive values in "texCoordIndex" array */
  int (*getNumTexCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "texCoordIndex". */
  void (*setTexCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "texCoordIndex" */
  void (*setTexCoordIndex2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IndexedLineSet defines a node interface that extends interface X3DGeometryNode. */

struct IndexedLineSet
{
  struct X3DGeometryNode*  extNode;

  /** Assign MFInt32 value using RGB values [0..1] to inputOnly MFInt32 field named "set_colorIndex". */
  void (*setColorIndex) (void* this, MFInt32 colors)

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for inputOnly field named "set_colorIndex" */
  void (*setColorIndex2) (void* this, SFInt32 color)

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide MFInt32 value using RGB values [0..1] from initializeOnly MFInt32 field named "colorIndex". */
  MFInt32 (*getColorIndex) (void* this);

  /** Provide number of primitive values in "colorIndex" array */
  int (*getNumColorIndex) (void* this);

  /** Assign MFInt32 value using RGB values [0..1] to initializeOnly MFInt32 field named "colorIndex". */
  void (*setColorIndex) (void* this, MFInt32 colors)

  /** Assign single SFInt32 value using RGB values [0..1] as the MFInt32 array for initializeOnly field named "colorIndex" */
  void (*setColorIndex2) (void* this, SFInt32 color)

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 (*getCoordIndex) (void* this);

  /** Provide number of primitive values in "coordIndex" array */
  int (*getNumCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IndexedQuadSet defines a node interface that extends interface X3DComposedGeometryNode.
  * IndexedQuadSet is a geometry node that defines quadrilaterals. */

struct IndexedQuadSet
{
  struct X3DComposedGeometryNode*  extNode;

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_index" */
  void (*setIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "index". */
  MFInt32 (*getIndex) (void* this);

  /** Provide number of primitive values in "index" array */
  int (*getNumIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "index" */
  void (*setIndex2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IndexedTriangleFanSet defines a node interface that extends interface X3DComposedGeometryNode. */

struct IndexedTriangleFanSet
{
  struct X3DComposedGeometryNode*  extNode;

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_index" */
  void (*setIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "index". */
  MFInt32 (*getIndex) (void* this);

  /** Provide number of primitive values in "index" array */
  int (*getNumIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "index" */
  void (*setIndex2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IndexedTriangleSet defines a node interface that extends interface X3DComposedGeometryNode. */

struct IndexedTriangleSet
{
  struct X3DComposedGeometryNode*  extNode;

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_index" */
  void (*setIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "index". */
  MFInt32 (*getIndex) (void* this);

  /** Provide number of primitive values in "index" array */
  int (*getNumIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "index" */
  void (*setIndex2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IndexedTriangleStripSet defines a node interface that extends interface X3DComposedGeometryNode. */

struct IndexedTriangleStripSet
{
  struct X3DComposedGeometryNode*  extNode;

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_index" */
  void (*setIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "index". */
  MFInt32 (*getIndex) (void* this);

  /** Provide number of primitive values in "index" array */
  int (*getNumIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "index". */
  void (*setIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "index" */
  void (*setIndex2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Inline defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject, X3DUrlObject. */

struct Inline
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;
  struct X3DUrlObject*  extNode2;

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "global". */
  SFBool (*getGlobal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "global". */
  void (*setGlobal) (void* this, SFBool value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IntegerSequencer defines a node interface that extends interface X3DSequencerNode. */

struct IntegerSequencer
{
  struct X3DSequencerNode*  extNode;

  /** Provide int value from outputOnly SFInt32 field named "value_changed". */
  int (*getValue) (void* this);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "keyValue". */
  MFInt32 (*getKeyValue) (void* this);

  /** Provide number of primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "keyValue". */
  void (*setKeyValue) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "keyValue" */
  void (*setKeyValue2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign SFBool value to inputOnly SFBool field named "next". */
  void (*setNext) (void* this, SFBool value);

  /** Assign SFBool value to inputOnly SFBool field named "previous". */
  void (*setPrevious) (void* this, SFBool value);

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IntegerTrigger defines a node interface that extends interface X3DTriggerNode. */

struct IntegerTrigger
{
  struct X3DTriggerNode*  extNode;

  /** Assign SFBool value to inputOnly SFBool field named "set_boolean". */
  void (*setBoolean) (void* this, SFBool value);

  /** Provide int value from outputOnly SFInt32 field named "triggerValue". */
  int (*getTriggerValue) (void* this);

  /** Provide int value from inputOutput SFInt32 field named "integerKey". */
  int (*getIntegerKey) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "integerKey". */
  void (*setIntegerKey) (void* this, int value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** IS defines a node interface that extends interface X3DStatement.
  * Functional summary: the IS statement connects node fields defined inside a ProtoBody declaration back to corresponding ProtoInterface fields. IS/connect statements can be added if the parent node is within a ProtoBody and connect statements define correspondences between prototype fields and built-in node fields. */

struct IS
{
  struct X3DStatement*  extNode;

  /** Provide connect* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput connect type field named "connect". */
  void (*getConnect) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "connect" array */
  int (*getNumConnect) (void* this);

  /** Assign connect* value (using a properly typed node array) to inputOutput connect type field named "connect". */
  void (*setConnect) (void* this, connect* nodes);

  /** Assign single connect* value (using a properly typed node) as the MFNode array for inputOutput field named "connect" */
  void (*setConnect2) (void* this, connect* node);

  /** Assign connect* value (using a properly typed protoInstance array) to inputOutput connect type field named "connect". */
  void (*setConnect3) (void* this, struct X3DPrototypeInstance node);

  /** Assign connect* value (using a properly typed node array) to inputOutput connect type field named "connect". */
  void (*setConnect4) (void* this, struct X3DNode* nodes);
}
;/** IsoSurfaceVolumeData defines a node interface that extends interface X3DVolumeDataNode. */

struct IsoSurfaceVolumeData
{
  struct X3DVolumeDataNode*  extNode;

  /** Provide float value from inputOutput SFFloat field named "contourStepSize". */
  float (*getContourStepSize) (void* this);

  /** Assign float value to inputOutput SFFloat field named "contourStepSize". */
  void (*setContourStepSize) (void* this, float value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "surfaceTolerance". */
  float (*getSurfaceTolerance) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "surfaceTolerance". */
  void (*setSurfaceTolerance) (void* this, float value)

  /** Provide float* value from inputOutput MFFloat field named "surfaceValues". */
  float* (*getSurfaceValues) (void* this);

  /** Provide number of primitive values in "surfaceValues" array */
  int (*getNumSurfaceValues) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "surfaceValues". */
  void (*setSurfaceValues) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "surfaceValues" */
  void (*setSurfaceValues2) (void* this, float* value);

  /** Provide X3DVolumeRenderStyleNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*getRenderStyle) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "renderStyle" array */
  int (*getNumRenderStyle) (void* this);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle) (void* this, X3DVolumeRenderStyleNode* nodes);

  /** Assign single X3DVolumeRenderStyleNode* value (using a properly typed node) as the MFNode array for inputOutput field named "renderStyle" */
  void (*setRenderStyle2) (void* this, X3DVolumeRenderStyleNode* node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed protoInstance array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle4) (void* this, struct X3DNode* nodes);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "gradients". */
  void (*getGradients) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "gradients". */
  void (*setGradients) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setGradients2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  void (*getVoxels) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void (*setVoxels) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setVoxels2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "dimensions". */
  void (*getDimensions) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "dimensions". */
  void (*setDimensions) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** KeySensor defines a node interface that extends interface X3DKeyDeviceSensorNode. */

struct KeySensor
{
  struct X3DKeyDeviceSensorNode*  extNode;

  /** Provide int value from outputOnly SFInt32 field named "actionKeyPress". */
  int (*getActionKeyPress) (void* this);

  /** Provide int value from outputOnly SFInt32 field named "actionKeyRelease". */
  int (*getActionKeyRelease) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "altKey". */
  SFBool (*getAltKey) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "controlKey". */
  SFBool (*getControlKey) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "shiftKey". */
  SFBool (*getShiftKey) (void* this);

  /** Provide string value from outputOnly SFString field named "keyPress". */
  string (*getKeyPress) (void* this);

  /** Provide string value from outputOnly SFString field named "keyRelease". */
  string (*getKeyRelease) (void* this);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Layer defines a node interface that extends interface X3DLayerNode. */

struct Layer
{
  struct X3DLayerNode*  extNode;

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values)

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values);

  /** Assign single string* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void (*setObjectType2) (void* this, string* value);

  /** Provide SFBool value from inputOutput SFBool field named "pickable". */
  SFBool (*getPickable) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "pickable". */
  void (*setPickable) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DViewportNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DViewportNode type field named "viewport". */
  void (*getViewport) (void* this, struct X3DNode result);

  /** Assign X3DViewportNode value (using a properly typed node) to inputOutput X3DViewportNode type field named "viewport". */
  void (*setViewport) (void* this, X3DViewportNode node);

  /** Assign X3DViewportNode value (using a properly typed protoInstance) */
  void (*setViewport2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LayerSet defines a node interface that extends interface X3DNode. */

struct LayerSet
{
  struct X3DNode*  extNode;

  /** Provide int value (-∞,∞) from inputOutput SFInt32 field named "activeLayer". */
  int (*getActiveLayer) (void* this);

  /** Assign int value (-∞,∞) to inputOutput SFInt32 field named "activeLayer". */
  void (*setActiveLayer) (void* this, int value);

  /** Provide MFInt32 value (-∞,∞) from inputOutput MFInt32 field named "order". */
  MFInt32 (*getOrder) (void* this);

  /** Provide number of primitive values in "order" array */
  int (*getNumOrder) (void* this);

  /** Assign MFInt32 value (-∞,∞) to inputOutput MFInt32 field named "order". */
  void (*setOrder) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOutput field named "order" */
  void (*setOrder2) (void* this, SFInt32 value);

  /** Provide X3DLayerNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DLayerNode type field named "layers". */
  void (*getLayers) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "layers" array */
  int (*getNumLayers) (void* this);

  /** Assign X3DLayerNode* value (using a properly typed node array) to inputOutput X3DLayerNode type field named "layers". */
  void (*setLayers) (void* this, X3DLayerNode* nodes);

  /** Assign single X3DLayerNode* value (using a properly typed node) as the MFNode array for inputOutput field named "layers" */
  void (*setLayers2) (void* this, X3DLayerNode* node);

  /** Assign X3DLayerNode* value (using a properly typed protoInstance array) to inputOutput X3DLayerNode type field named "layers". */
  void (*setLayers3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DLayerNode* value (using a properly typed node array) to inputOutput X3DLayerNode type field named "layers". */
  void (*setLayers4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Layout defines a node interface that extends interface X3DLayoutNode. */

struct Layout
{
  struct X3DLayoutNode*  extNode;

  /** Provide string* value from inputOutput MFString field named "align". */
  string* (*getAlign) (void* this);

  /** Provide number of primitive values in "align" array */
  int (*getNumAlign) (void* this);

  /** Assign string* value to inputOutput MFString field named "align". */
  void (*setAlign) (void* this, string* values);

  /** Provide float* value from inputOutput MFFloat field named "offset". */
  float* (*getOffset) (void* this);

  /** Provide number of primitive values in "offset" array */
  int (*getNumOffset) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "offset". */
  void (*setOffset) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "offset" */
  void (*setOffset2) (void* this, float* value);

  /** Provide string* value from inputOutput MFString field named "offsetUnits". */
  string* (*getOffsetUnits) (void* this);

  /** Provide number of primitive values in "offsetUnits" array */
  int (*getNumOffsetUnits) (void* this);

  /** Assign string* value to inputOutput MFString field named "offsetUnits". */
  void (*setOffsetUnits) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "scaleMode". */
  string* (*getScaleMode) (void* this);

  /** Provide number of primitive values in "scaleMode" array */
  int (*getNumScaleMode) (void* this);

  /** Assign string* value to inputOutput MFString field named "scaleMode". */
  void (*setScaleMode) (void* this, string* values);

  /** Provide float* value from initializeOnly MFFloat field named "size". */
  float* (*getSize) (void* this);

  /** Provide number of primitive values in "size" array */
  int (*getNumSize) (void* this);

  /** Assign float* value to initializeOnly MFFloat field named "size". */
  void (*setSize) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for initializeOnly field named "size" */
  void (*setSize2) (void* this, float* value);

  /** Provide string* value from inputOutput MFString field named "sizeUnits". */
  string* (*getSizeUnits) (void* this);

  /** Provide number of primitive values in "sizeUnits" array */
  int (*getNumSizeUnits) (void* this);

  /** Assign string* value to inputOutput MFString field named "sizeUnits". */
  void (*setSizeUnits) (void* this, string* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LayoutGroup defines a node interface that extends interfaces X3DNode, X3DGroupingNode. */

struct LayoutGroup
{
  struct X3DNode*  extNode;
  struct X3DGroupingNode*  extNode1;

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide X3DLayoutNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DLayoutNode type field named "layout". */
  void (*getLayout) (void* this, struct X3DNode result);

  /** Assign X3DLayoutNode value (using a properly typed node) to inputOutput X3DLayoutNode type field named "layout". */
  void (*setLayout) (void* this, X3DLayoutNode node);

  /** Assign X3DLayoutNode value (using a properly typed protoInstance) */
  void (*setLayout2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DViewportNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DViewportNode type field named "viewport". */
  void (*getViewport) (void* this, struct X3DNode result);

  /** Assign X3DViewportNode value (using a properly typed node) to inputOutput X3DViewportNode type field named "viewport". */
  void (*setViewport) (void* this, X3DViewportNode node);

  /** Assign X3DViewportNode value (using a properly typed protoInstance) */
  void (*setViewport2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LayoutLayer defines a node interface that extends interface X3DLayerNode. */

struct LayoutLayer
{
  struct X3DLayerNode*  extNode;

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide X3DLayoutNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DLayoutNode type field named "layout". */
  void (*getLayout) (void* this, struct X3DNode result);

  /** Assign X3DLayoutNode value (using a properly typed node) to inputOutput X3DLayoutNode type field named "layout". */
  void (*setLayout) (void* this, X3DLayoutNode node);

  /** Assign X3DLayoutNode value (using a properly typed protoInstance) */
  void (*setLayout2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values)

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values);

  /** Assign single string* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void (*setObjectType2) (void* this, string* value);

  /** Provide SFBool value from inputOutput SFBool field named "pickable". */
  SFBool (*getPickable) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "pickable". */
  void (*setPickable) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DViewportNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DViewportNode type field named "viewport". */
  void (*getViewport) (void* this, struct X3DNode result);

  /** Assign X3DViewportNode value (using a properly typed node) to inputOutput X3DViewportNode type field named "viewport". */
  void (*setViewport) (void* this, X3DViewportNode node);

  /** Assign X3DViewportNode value (using a properly typed protoInstance) */
  void (*setViewport2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LinePickSensor defines a node interface that extends interface X3DPickSensorNode. */

struct LinePickSensor
{
  struct X3DPickSensorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedNormal". */
  void (*getPickedNormal) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "pickedNormal" array */
  int (*getNumPickedNormal) (void* this);

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedPoint". */
  void (*getPickedPoint) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "pickedPoint" array */
  int (*getNumPickedPoint) (void* this);

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedTextureCoordinate". */
  void (*getPickedTextureCoordinate) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "pickedTextureCoordinate" array */
  int (*getNumPickedTextureCoordinate) (void* this);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values)

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values);

  /** Assign single string* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void (*setObjectType2) (void* this, string* value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*getPickTarget) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickTarget" array */
  int (*getNumPickTarget) (void* this);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "pickTarget" */
  void (*setPickTarget2) (void* this, struct X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget3) (void* this, struct X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  void (*getPickedGeometry) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickedGeometry" array */
  int (*getNumPickedGeometry) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*getPickingGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*setPickingGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setPickingGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LineProperties defines a node interface that extends interface X3DAppearanceChildNode. */

struct LineProperties
{
  struct X3DAppearanceChildNode*  extNode;

  /** Provide SFBool value from inputOutput SFBool field named "applied". */
  SFBool (*getApplied) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "applied". */
  void (*setApplied) (void* this, SFBool value);

  /** Provide int value [1,∞) from inputOutput SFInt32 field named "linetype". */
  int (*getLinetype) (void* this);

  /** Assign int value [1,∞) to inputOutput SFInt32 field named "linetype". */
  void (*setLinetype) (void* this, int value)

  /** Provide float value from inputOutput SFFloat field named "linewidthScaleFactor". */
  float (*getLinewidthScaleFactor) (void* this);

  /** Assign float value to inputOutput SFFloat field named "linewidthScaleFactor". */
  void (*setLinewidthScaleFactor) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LineSet defines a node interface that extends interface X3DGeometryNode. */

struct LineSet
{
  struct X3DGeometryNode*  extNode;

  /** Provide MFInt32 value (-∞,∞) from inputOutput MFInt32 field named "vertexCount". */
  MFInt32 (*getVertexCount) (void* this);

  /** Provide number of primitive values in "vertexCount" array */
  int (*getNumVertexCount) (void* this);

  /** Assign MFInt32 value (-∞,∞) to inputOutput MFInt32 field named "vertexCount". */
  void (*setVertexCount) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOutput field named "vertexCount" */
  void (*setVertexCount2) (void* this, SFInt32 value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ListenerPointSource defines a node interface that extends interface X3DSoundSourceNode. */

struct ListenerPointSource
{
  struct X3DSoundSourceNode*  extNode;

  /** Provide SFBool value from inputOutput SFBool field named "dopplerEnabled". */
  SFBool (*getDopplerEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "dopplerEnabled". */
  void (*setDopplerEnabled) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "interauralDistance". */
  float (*getInterauralDistance) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "interauralDistance". */
  void (*setInterauralDistance) (void* this, float value)

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* (*getOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void (*setOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "trackCurrentView". */
  SFBool (*getTrackCurrentView) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "trackCurrentView". */
  void (*setTrackCurrentView) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LoadSensor defines a node interface that extends interface X3DNetworkSensorNode. */

struct LoadSensor
{
  struct X3DNetworkSensorNode*  extNode;

  /** Provide SFBool value from outputOnly SFBool field named "isLoaded". */
  SFBool (*getIsLoaded) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "loadTime". */
  double (*getLoadTime) (void* this);

  /** Provide float value from outputOnly SFFloat field named "progress". */
  float (*getProgress) (void* this);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "timeOut". */
  double (*getTimeOut) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "timeOut". */
  void (*setTimeOut) (void* this, double timestamp)

  /** Provide X3DUrlObject* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DUrlObject type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DUrlObject* value (using a properly typed node array) to inputOutput X3DUrlObject type field named "children". */
  void (*setChildren) (void* this, X3DUrlObject* nodes);

  /** Assign single X3DUrlObject* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DUrlObject* node);

  /** Assign X3DUrlObject* value (using a properly typed protoInstance array) to inputOutput X3DUrlObject type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DUrlObject* value (using a properly typed node array) to inputOutput X3DUrlObject type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LocalFog defines a node interface that extends interfaces X3DChildNode, X3DFogObject. */

struct LocalFog
{
  struct X3DChildNode*  extNode;
  struct X3DFogObject*  extNode1;

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "fogType". */
  string (*getFogType) (void* this);

  /** Assign string value to inputOutput SFString field named "fogType". */
  void (*setFogType) (void* this, string value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "visibilityRange". */
  float (*getVisibilityRange) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "visibilityRange". */
  void (*setVisibilityRange) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** LOD defines a node interface that extends interface X3DGroupingNode. */

struct LOD
{
  struct X3DGroupingNode*  extNode;

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide int value [0,∞) from outputOnly SFInt32 field named "level_changed". */
  int (*getLevel) (void* this);

  /** Provide SFBool value from initializeOnly SFBool field named "forceTransitions". */
  SFBool (*getForceTransitions) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "forceTransitions". */
  void (*setForceTransitions) (void* this, SFBool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide float* value from initializeOnly MFFloat field named "range". */
  float* (*getRange) (void* this);

  /** Provide number of primitive values in "range" array */
  int (*getNumRange) (void* this);

  /** Assign float* value to initializeOnly MFFloat field named "range". */
  void (*setRange) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for initializeOnly field named "range" */
  void (*setRange2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Material defines a node interface that extends interface X3DOneSidedMaterialNode. */

struct Material
{
  struct X3DOneSidedMaterialNode*  extNode;

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "ambientTextureMapping". */
  string (*getAmbientTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "ambientTextureMapping". */
  void (*setAmbientTextureMapping) (void* this, string value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "diffuseColor". */
  void (*getDiffuseColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "diffuseColor". */
  void (*setDiffuseColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "diffuseTextureMapping". */
  string (*getDiffuseTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "diffuseTextureMapping". */
  void (*setDiffuseTextureMapping) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "occlusionStrength". */
  float (*getOcclusionStrength) (void* this);

  /** Assign float value to inputOutput SFFloat field named "occlusionStrength". */
  void (*setOcclusionStrength) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "occlusionTextureMapping". */
  string (*getOcclusionTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "occlusionTextureMapping". */
  void (*setOcclusionTextureMapping) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "shininess". */
  float (*getShininess) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shininess". */
  void (*setShininess) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "shininessTextureMapping". */
  string (*getShininessTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "shininessTextureMapping". */
  void (*setShininessTextureMapping) (void* this, string value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "specularColor". */
  void (*getSpecularColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "specularColor". */
  void (*setSpecularColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "specularTextureMapping". */
  string (*getSpecularTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "specularTextureMapping". */
  void (*setSpecularTextureMapping) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float (*getTransparency) (void* this);

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void (*setTransparency) (void* this, float value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "ambientTexture". */
  void (*getAmbientTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "ambientTexture". */
  void (*setAmbientTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setAmbientTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "diffuseTexture". */
  void (*getDiffuseTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "diffuseTexture". */
  void (*setDiffuseTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setDiffuseTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void (*getEmissiveTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void (*setEmissiveTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setEmissiveTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void (*getNormalTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void (*setNormalTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setNormalTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  void (*getOcclusionTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  void (*setOcclusionTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setOcclusionTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "shininessTexture". */
  void (*getShininessTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "shininessTexture". */
  void (*setShininessTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setShininessTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "specularTexture". */
  void (*getSpecularTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "specularTexture". */
  void (*setSpecularTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setSpecularTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  void (*getEmissiveColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void (*setEmissiveColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "emissiveTextureMapping". */
  string (*getEmissiveTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "emissiveTextureMapping". */
  void (*setEmissiveTextureMapping) (void* this, string value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "normalScale". */
  float (*getNormalScale) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "normalScale". */
  void (*setNormalScale) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "normalTextureMapping". */
  string (*getNormalTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "normalTextureMapping". */
  void (*setNormalTextureMapping) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Matrix3VertexAttribute defines a node interface that extends interface X3DVertexAttributeNode. */

struct Matrix3VertexAttribute
{
  struct X3DVertexAttributeNode*  extNode;

  /** Provide float* value from inputOutput MFMatrix3f field named "value". */
  float* (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign float* value to inputOutput MFMatrix3f field named "value". */
  void (*setValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Matrix4VertexAttribute defines a node interface that extends interface X3DVertexAttributeNode. */

struct Matrix4VertexAttribute
{
  struct X3DVertexAttributeNode*  extNode;

  /** Provide float* value from inputOutput MFMatrix4f field named "value". */
  float* (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign float* value to inputOutput MFMatrix4f field named "value". */
  void (*setValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** meta defines a node interface that extends interface X3DStatement.
  * Functional summary: the meta statement provides metadata information about a scene, where name and content attributes provide attribute=value metadata pairs. */

struct meta
{
  struct X3DStatement*  extNode;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "content". */
  string (*getContent) (void* this);

  /** Assign string value to inputOutput SFString field named "content". */
  void (*setContent) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "dir". */
  string (*getDir) (void* this);

  /** Assign string value to inputOutput SFString field named "dir". */
  void (*setDir) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "http-equiv". */
  string (*getHttp-equiv) (void* this);

  /** Assign string value to inputOutput SFString field named "http-equiv". */
  void (*setHttp-equiv) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "lang". */
  string (*getLang) (void* this);

  /** Assign string value to inputOutput SFString field named "lang". */
  void (*setLang) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "scheme". */
  string (*getScheme) (void* this);

  /** Assign string value to inputOutput SFString field named "scheme". */
  void (*setScheme) (void* this, string value);
}
;/** MetadataBoolean defines a node interface that extends interfaces X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the Boolean values of the value field. */

struct MetadataBoolean
{
  struct X3DNode*  extNode;
  struct X3DMetadataObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "reference". */
  string (*getReference) (void* this);

  /** Assign string value to inputOutput SFString field named "reference". */
  void (*setReference) (void* this, string value);

  /** Provide SFBool* value from inputOutput MFBool field named "value". */
  SFBool* (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign SFBool* value to inputOutput MFBool field named "value". */
  void (*setValue) (void* this, SFBool* values);

  /** Assign single SFBool* value as the MFBool array for inputOutput field named "value" */
  void (*setValue2) (void* this, SFBool* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MetadataDouble defines a node interface that extends interfaces X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the double-precision floating point numbers of the value field. */

struct MetadataDouble
{
  struct X3DNode*  extNode;
  struct X3DMetadataObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "reference". */
  string (*getReference) (void* this);

  /** Assign string value to inputOutput SFString field named "reference". */
  void (*setReference) (void* this, string value);

  /** Provide double* value from inputOutput MFDouble field named "value". */
  double* (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign double* value to inputOutput MFDouble field named "value". */
  void (*setValue) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "value" */
  void (*setValue2) (void* this, double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MetadataFloat defines a node interface that extends interfaces X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the single-precision floating point numbers of the value field. */

struct MetadataFloat
{
  struct X3DNode*  extNode;
  struct X3DMetadataObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "reference". */
  string (*getReference) (void* this);

  /** Assign string value to inputOutput SFString field named "reference". */
  void (*setReference) (void* this, string value);

  /** Provide float* value from inputOutput MFFloat field named "value". */
  float* (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "value". */
  void (*setValue) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "value" */
  void (*setValue2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MetadataInteger defines a node interface that extends interfaces X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the integer numbers of the value field. */

struct MetadataInteger
{
  struct X3DNode*  extNode;
  struct X3DMetadataObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "reference". */
  string (*getReference) (void* this);

  /** Assign string value to inputOutput SFString field named "reference". */
  void (*setReference) (void* this, string value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "value". */
  MFInt32 (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "value". */
  void (*setValue) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "value" */
  void (*setValue2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MetadataSet defines a node interface that extends interfaces , X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the metadata nodes of the value field. */

struct MetadataSet
{
  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "reference". */
  string (*getReference) (void* this);

  /** Assign string value to inputOutput SFString field named "reference". */
  void (*setReference) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "reference". */
  string (*getReference) (void* this);

  /** Assign string value to inputOutput SFString field named "reference". */
  void (*setReference) (void* this, string value);

  /** Provide X3DMetadataObject* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DMetadataObject type field named "value". */
  void (*getValue) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "value" array */
  int (*getNumValue) (void* this);

  /** Assign X3DMetadataObject* value (using a properly typed node array) to inputOutput X3DMetadataObject type field named "value". */
  void (*setValue) (void* this, X3DMetadataObject* nodes);

  /** Assign single X3DMetadataObject* value (using a properly typed node) as the MFNode array for inputOutput field named "value" */
  void (*setValue2) (void* this, X3DMetadataObject* node);

  /** Assign X3DMetadataObject* value (using a properly typed protoInstance array) to inputOutput X3DMetadataObject type field named "value". */
  void (*setValue3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DMetadataObject* value (using a properly typed node array) to inputOutput X3DMetadataObject type field named "value". */
  void (*setValue4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MetadataString defines a node interface that extends interfaces X3DNode, X3DMetadataObject.
  * The metadata provided by this node is contained in the strings of the value field. */

struct MetadataString
{
  struct X3DNode*  extNode;
  struct X3DMetadataObject*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "reference". */
  string (*getReference) (void* this);

  /** Assign string value to inputOutput SFString field named "reference". */
  void (*setReference) (void* this, string value);

  /** Provide string* value from inputOutput MFString field named "value". */
  string* (*getValue) (void* this);

  /** Provide number of primitive values in "value" array */
  int (*getNumValue) (void* this);

  /** Assign string* value to inputOutput MFString field named "value". */
  void (*setValue) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "value" */
  void (*setValue2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MicrophoneSource defines a node interface that extends interface X3DSoundSourceNode. */

struct MicrophoneSource
{
  struct X3DSoundSourceNode*  extNode;

  /** Provide string value from inputOutput SFString field named "mediaDeviceID". */
  string (*getMediaDeviceID) (void* this);

  /** Assign string value to inputOutput SFString field named "mediaDeviceID". */
  void (*setMediaDeviceID) (void* this, string value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MotorJoint defines a node interface that extends interface X3DRigidJointNode.
  * MotorJoint drives relative angular velocities between body1 and body2 within a common reference frame. */

struct MotorJoint
{
  struct X3DRigidJointNode*  extNode;

  /** Provide float value in radians from outputOnly SFFloat field named "motor1Angle". */
  float (*getMotor1Angle) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "motor1AngleRate". */
  float (*getMotor1AngleRate) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "motor2Angle". */
  float (*getMotor2Angle) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "motor2AngleRate". */
  float (*getMotor2AngleRate) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "motor3Angle". */
  float (*getMotor3Angle) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "motor3AngleRate". */
  float (*getMotor3AngleRate) (void* this);

  /** Provide SFBool value from initializeOnly SFBool field named "autoCalc". */
  SFBool (*getAutoCalc) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "autoCalc". */
  void (*setAutoCalc) (void* this, SFBool value);

  /** Provide float value in radians from inputOutput SFFloat field named "axis1Angle". */
  float (*getAxis1Angle) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "axis1Angle". */
  void (*setAxis1Angle) (void* this, float angle);

  /** Provide float value from inputOutput SFFloat field named "axis1Torque". */
  float (*getAxis1Torque) (void* this);

  /** Assign float value to inputOutput SFFloat field named "axis1Torque". */
  void (*setAxis1Torque) (void* this, float value);

  /** Provide float value in radians from inputOutput SFFloat field named "axis2Angle". */
  float (*getAxis2Angle) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "axis2Angle". */
  void (*setAxis2Angle) (void* this, float angle);

  /** Provide float value from inputOutput SFFloat field named "axis2Torque". */
  float (*getAxis2Torque) (void* this);

  /** Assign float value to inputOutput SFFloat field named "axis2Torque". */
  void (*setAxis2Torque) (void* this, float value);

  /** Provide float value in radians from inputOutput SFFloat field named "axis3Angle". */
  float (*getAxis3Angle) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "axis3Angle". */
  void (*setAxis3Angle) (void* this, float angle);

  /** Provide float value from inputOutput SFFloat field named "axis3Torque". */
  float (*getAxis3Torque) (void* this);

  /** Assign float value to inputOutput SFFloat field named "axis3Torque". */
  void (*setAxis3Torque) (void* this, float value);

  /** Provide int value [0,3) from inputOutput SFInt32 field named "enabledAxes". */
  int (*getEnabledAxes) (void* this);

  /** Assign int value [0,3) to inputOutput SFInt32 field named "enabledAxes". */
  void (*setEnabledAxes) (void* this, int value)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "motor1Axis". */
  void (*getMotor1Axis) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "motor1Axis". */
  void (*setMotor1Axis) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "motor2Axis". */
  void (*getMotor2Axis) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "motor2Axis". */
  void (*setMotor2Axis) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "motor3Axis". */
  void (*getMotor3Axis) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "motor3Axis". */
  void (*setMotor3Axis) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "stop1Bounce". */
  float (*getStop1Bounce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop1Bounce". */
  void (*setStop1Bounce) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stop1ErrorCorrection". */
  float (*getStop1ErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop1ErrorCorrection". */
  void (*setStop1ErrorCorrection) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stop2Bounce". */
  float (*getStop2Bounce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop2Bounce". */
  void (*setStop2Bounce) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stop2ErrorCorrection". */
  float (*getStop2ErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop2ErrorCorrection". */
  void (*setStop2ErrorCorrection) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stop3Bounce". */
  float (*getStop3Bounce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop3Bounce". */
  void (*setStop3Bounce) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stop3ErrorCorrection". */
  float (*getStop3ErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stop3ErrorCorrection". */
  void (*setStop3ErrorCorrection) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "forceOutput" */
  void (*setForceOutput2) (void* this, string* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  void (*getBody1) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void (*setBody1) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  void (*getBody2) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void (*setBody2) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody22) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MovieTexture defines a node interface that extends interfaces X3DSoundSourceNode, X3DTexture2DNode, X3DUrlObject. */

struct MovieTexture
{
  struct X3DSoundSourceNode*  extNode;
  struct X3DTexture2DNode*  extNode1;
  struct X3DUrlObject*  extNode2;

  /** Provide double value in seconds [-1,∞) from outputOnly SFTime field named "duration_changed". */
  double (*getDuration) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "loop". */
  SFBool (*getLoop) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "loop". */
  void (*setLoop) (void* this, SFBool value);

  /** Provide float value (0,∞) from inputOutput SFFloat field named "pitch". */
  float (*getPitch) (void* this);

  /** Assign float value (0,∞) to inputOutput SFFloat field named "pitch". */
  void (*setPitch) (void* this, float value)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatS". */
  SFBool (*getRepeatS) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatS". */
  void (*setRepeatS) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatT". */
  SFBool (*getRepeatT) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatT". */
  void (*setRepeatT) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MultiTexture defines a node interface that extends interface X3DTextureNode. */

struct MultiTexture
{
  struct X3DTextureNode*  extNode;

  /** Provide string* value from inputOutput MFString field named "function". */
  string* (*getFunction) (void* this);

  /** Provide number of primitive values in "function" array */
  int (*getNumFunction) (void* this);

  /** Assign string* value to inputOutput MFString field named "function". */
  void (*setFunction) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "mode". */
  string* (*getMode) (void* this);

  /** Provide number of primitive values in "mode" array */
  int (*getNumMode) (void* this);

  /** Assign string* value to inputOutput MFString field named "mode". */
  void (*setMode) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "source". */
  string* (*getSource) (void* this);

  /** Provide number of primitive values in "source" array */
  int (*getNumSource) (void* this);

  /** Assign string* value to inputOutput MFString field named "source". */
  void (*setSource) (void* this, string* values);

  /** Provide float value [0,1) from inputOutput SFFloat field named "alpha". */
  float (*getAlpha) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "alpha". */
  void (*setAlpha) (void* this, float value)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide string* value from inputOutput MFString field named "function". */
  string* (*getFunction) (void* this);

  /** Provide number of primitive values in "function" array */
  int (*getNumFunction) (void* this);

  /** Assign string* value to inputOutput MFString field named "function". */
  void (*setFunction) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "function" */
  void (*setFunction2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "mode". */
  string* (*getMode) (void* this);

  /** Provide number of primitive values in "mode" array */
  int (*getNumMode) (void* this);

  /** Assign string* value to inputOutput MFString field named "mode". */
  void (*setMode) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "mode" */
  void (*setMode2) (void* this, string* value);

  /** Provide string* value from inputOutput MFString field named "source". */
  string* (*getSource) (void* this);

  /** Provide number of primitive values in "source" array */
  int (*getNumSource) (void* this);

  /** Assign string* value to inputOutput MFString field named "source". */
  void (*setSource) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "source" */
  void (*setSource2) (void* this, string* value);

  /** Provide X3DSingleTextureNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSingleTextureNode type field named "texture". */
  void (*getTexture) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "texture" array */
  int (*getNumTexture) (void* this);

  /** Assign X3DSingleTextureNode* value (using a properly typed node array) to inputOutput X3DSingleTextureNode type field named "texture". */
  void (*setTexture) (void* this, X3DSingleTextureNode* nodes);

  /** Assign single X3DSingleTextureNode* value (using a properly typed node) as the MFNode array for inputOutput field named "texture" */
  void (*setTexture2) (void* this, X3DSingleTextureNode* node);

  /** Assign X3DSingleTextureNode* value (using a properly typed protoInstance array) to inputOutput X3DSingleTextureNode type field named "texture". */
  void (*setTexture3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DSingleTextureNode* value (using a properly typed node array) to inputOutput X3DSingleTextureNode type field named "texture". */
  void (*setTexture4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MultiTextureCoordinate defines a node interface that extends interface X3DTextureCoordinateNode. */

struct MultiTextureCoordinate
{
  struct X3DTextureCoordinateNode*  extNode;

  /** Provide X3DSingleTextureCoordinateNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "texCoord" array */
  int (*getNumTexCoord) (void* this);

  /** Assign X3DSingleTextureCoordinateNode* value (using a properly typed node array) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*setTexCoord) (void* this, X3DSingleTextureCoordinateNode* nodes);

  /** Assign single X3DSingleTextureCoordinateNode* value (using a properly typed node) as the MFNode array for inputOutput field named "texCoord" */
  void (*setTexCoord2) (void* this, X3DSingleTextureCoordinateNode* node);

  /** Assign X3DSingleTextureCoordinateNode* value (using a properly typed protoInstance array) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*setTexCoord3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DSingleTextureCoordinateNode* value (using a properly typed node array) to inputOutput X3DSingleTextureCoordinateNode type field named "texCoord". */
  void (*setTexCoord4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** MultiTextureTransform defines a node interface that extends interface X3DTextureTransformNode. */

struct MultiTextureTransform
{
  struct X3DTextureTransformNode*  extNode;

  /** Provide X3DSingleTextureTransformNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  void (*getTextureTransform) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "textureTransform" array */
  int (*getNumTextureTransform) (void* this);

  /** Assign X3DSingleTextureTransformNode* value (using a properly typed node array) to inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  void (*setTextureTransform) (void* this, X3DSingleTextureTransformNode* nodes);

  /** Assign single X3DSingleTextureTransformNode* value (using a properly typed node) as the MFNode array for inputOutput field named "textureTransform" */
  void (*setTextureTransform2) (void* this, X3DSingleTextureTransformNode* node);

  /** Assign X3DSingleTextureTransformNode* value (using a properly typed protoInstance array) to inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  void (*setTextureTransform3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DSingleTextureTransformNode* value (using a properly typed node array) to inputOutput X3DSingleTextureTransformNode type field named "textureTransform". */
  void (*setTextureTransform4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NavigationInfo defines a node interface that extends interface X3DBindableNode. */

struct NavigationInfo
{
  struct X3DBindableNode*  extNode;

  /** Provide string* value ["TELEPORT","LINEAR","ANIMATE",...] from inputOutput MFString field named "transitionType". */
  string* (*getTransitionType) (void* this);

  /** Provide number of primitive values in "transitionType" array */
  int (*getNumTransitionType) (void* this);

  /** Assign string* value ["TELEPORT","LINEAR","ANIMATE",...] to inputOutput MFString field named "transitionType". */
  void (*setTransitionType) (void* this, string* values)

  /** Provide string* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] from inputOutput MFString field named "type". */
  string* (*getType) (void* this);

  /** Provide number of primitive values in "type" array */
  int (*getNumType) (void* this);

  /** Assign string* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] to inputOutput MFString field named "type". */
  void (*setType) (void* this, string* values)

  /** Provide SFBool value from outputOnly SFBool field named "transitionComplete". */
  SFBool (*getTransitionComplete) (void* this);

  /** Provide float* value (-∞,∞) from inputOutput MFFloat field named "avatarSize". */
  float* (*getAvatarSize) (void* this);

  /** Provide number of primitive values in "avatarSize" array */
  int (*getNumAvatarSize) (void* this);

  /** Assign float* value (-∞,∞) to inputOutput MFFloat field named "avatarSize". */
  void (*setAvatarSize) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for inputOutput field named "avatarSize" */
  void (*setAvatarSize2) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "headlight". */
  SFBool (*getHeadlight) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "headlight". */
  void (*setHeadlight) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "transitionTime". */
  double (*getTransitionTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "transitionTime". */
  void (*setTransitionTime) (void* this, double timestamp)

  /** Provide string* value ["TELEPORT","LINEAR","ANIMATE",...] from inputOutput MFString field named "transitionType". */
  string* (*getTransitionType) (void* this);

  /** Provide number of primitive values in "transitionType" array */
  int (*getNumTransitionType) (void* this);

  /** Assign string* value ["TELEPORT","LINEAR","ANIMATE",...] to inputOutput MFString field named "transitionType". */
  void (*setTransitionType) (void* this, string* values);

  /** Assign single string* value ["TELEPORT","LINEAR","ANIMATE",...] as the MFString array for inputOutput field named "transitionType" */
  void (*setTransitionType2) (void* this, string* value);

  /** Provide string* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] from inputOutput MFString field named "type". */
  string* (*getType) (void* this);

  /** Provide number of primitive values in "type" array */
  int (*getNumType) (void* this);

  /** Assign string* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] to inputOutput MFString field named "type". */
  void (*setType) (void* this, string* values);

  /** Assign single string* value ["ANY","WALK","EXAMINE","FLY","LOOKAT","NONE","EXPLORE",...] as the MFString array for inputOutput field named "type" */
  void (*setType2) (void* this, string* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "visibilityLimit". */
  float (*getVisibilityLimit) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "visibilityLimit". */
  void (*setVisibilityLimit) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign SFBool value to inputOnly SFBool field named "set_bind". */
  void (*setBind) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double (*getBindTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isBound". */
  SFBool (*getIsBound) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Normal defines a node interface that extends interface X3DNormalNode. */

struct Normal
{
  struct X3DNormalNode*  extNode;

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput MFVec3f field named "vector". */
  void (*getVector) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "vector" array */
  int (*getNumVector) (void* this);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput MFVec3f field named "vector". */
  void (*setVector) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NormalInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct NormalInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "value_changed" array */
  int (*getNumValue) (void* this);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsCurve defines a node interface that extends interface X3DParametricGeometryNode. */

struct NurbsCurve
{
  struct X3DParametricGeometryNode*  extNode;

  /** Provide SFBool value from initializeOnly SFBool field named "closed". */
  SFBool (*getClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "closed". */
  void (*setClosed) (void* this, SFBool value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* (*getKnot) (void* this);

  /** Provide number of primitive values in "knot" array */
  int (*getNumKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void (*setKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void (*setKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide int value from inputOutput SFInt32 field named "tessellation". */
  int (*getTessellation) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "tessellation". */
  void (*setTessellation) (void* this, int value);

  /** Provide double* value (-∞,∞) from inputOutput MFDouble field named "weight". */
  double* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign double* value (-∞,∞) to inputOutput MFDouble field named "weight". */
  void (*setWeight) (void* this, double* values);

  /** Assign single double* value (-∞,∞) as the MFDouble array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, double* value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*getControlPoint) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*setControlPoint) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setControlPoint2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsCurve2D defines a node interface that extends interface X3DNurbsControlCurveNode. */

struct NurbsCurve2D
{
  struct X3DNurbsControlCurveNode*  extNode;

  /** Provide SFBool value from initializeOnly SFBool field named "closed". */
  SFBool (*getClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "closed". */
  void (*setClosed) (void* this, SFBool value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* (*getKnot) (void* this);

  /** Provide number of primitive values in "knot" array */
  int (*getNumKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void (*setKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void (*setKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide int value from inputOutput SFInt32 field named "tessellation". */
  int (*getTessellation) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "tessellation". */
  void (*setTessellation) (void* this, int value);

  /** Provide double* value (-∞,∞) from inputOutput MFDouble field named "weight". */
  double* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign double* value (-∞,∞) to inputOutput MFDouble field named "weight". */
  void (*setWeight) (void* this, double* values);

  /** Assign single double* value (-∞,∞) as the MFDouble array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 2-tuple double* value from inputOutput MFVec2d field named "controlPoint". */
  void (*getControlPoint) (void* this, double* result);

  /** Provide number of 2-tuple primitive values in "controlPoint" array */
  int (*getNumControlPoint) (void* this);

  /** Assign 2-tuple double* value to inputOutput MFVec2d field named "controlPoint". */
  void (*setControlPoint) (void* this, double* values);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsOrientationInterpolator defines a node interface that extends interface X3DChildNode. */

struct NurbsOrientationInterpolator
{
  struct X3DChildNode*  extNode;

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* (*getValue) (void* this);

  /** Provide int value from inputOutput SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "order". */
  void (*setOrder) (void* this, int value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* (*getKnot) (void* this);

  /** Provide number of primitive values in "knot" array */
  int (*getNumKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void (*setKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void (*setKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide double* value from inputOutput MFDouble field named "weight". */
  double* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign double* value to inputOutput MFDouble field named "weight". */
  void (*setWeight) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, double* value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*getControlPoint) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*setControlPoint) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setControlPoint2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsPatchSurface defines a node interface that extends interface X3DNurbsSurfaceGeometryNode. */

struct NurbsPatchSurface
{
  struct X3DNurbsSurfaceGeometryNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "uClosed". */
  SFBool (*getUClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "uClosed". */
  void (*setUClosed) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "vClosed". */
  SFBool (*getVClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "vClosed". */
  void (*setVClosed) (void* this, SFBool value);

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "uDimension". */
  int (*getUDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "uDimension". */
  void (*setUDimension) (void* this, int value)

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "vDimension". */
  int (*getVDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "vDimension". */
  void (*setVDimension) (void* this, int value)

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* (*getUKnot) (void* this);

  /** Provide number of primitive values in "uKnot" array */
  int (*getNumUKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void (*setUKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void (*setUKnot2) (void* this, double* value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* (*getVKnot) (void* this);

  /** Provide number of primitive values in "vKnot" array */
  int (*getNumVKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void (*setVKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void (*setVKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "uOrder". */
  int (*getUOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "uOrder". */
  void (*setUOrder) (void* this, int value)

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "vOrder". */
  int (*getVOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "vOrder". */
  void (*setVOrder) (void* this, int value)

  /** Provide int value from inputOutput SFInt32 field named "uTessellation". */
  int (*getUTessellation) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "uTessellation". */
  void (*setUTessellation) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "vTessellation". */
  int (*getVTessellation) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "vTessellation". */
  void (*setVTessellation) (void* this, int value);

  /** Provide double* value (-∞,∞) from inputOutput MFDouble field named "weight". */
  double* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign double* value (-∞,∞) to inputOutput MFDouble field named "weight". */
  void (*setWeight) (void* this, double* values);

  /** Assign single double* value (-∞,∞) as the MFDouble array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, double* value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*getControlPoint) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*setControlPoint) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setControlPoint2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsPositionInterpolator defines a node interface that extends interface X3DChildNode. */

struct NurbsPositionInterpolator
{
  struct X3DChildNode*  extNode;

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide int value from inputOutput SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "order". */
  void (*setOrder) (void* this, int value);

  /** Provide double* value from initializeOnly MFDouble field named "knot". */
  double* (*getKnot) (void* this);

  /** Provide number of primitive values in "knot" array */
  int (*getNumKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "knot". */
  void (*setKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "knot" */
  void (*setKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from inputOutput SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [2,∞) to inputOutput SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide double* value from inputOutput MFDouble field named "weight". */
  double* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign double* value to inputOutput MFDouble field named "weight". */
  void (*setWeight) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, double* value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*getControlPoint) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*setControlPoint) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setControlPoint2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsSet defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject. */

struct NurbsSet
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide float value (0,∞) from inputOutput SFFloat field named "tessellationScale". */
  float (*getTessellationScale) (void* this);

  /** Assign float value (0,∞) to inputOutput SFFloat field named "tessellationScale". */
  void (*setTessellationScale) (void* this, float value)

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "addGeometry". */
  void (*setAddGeometry) (void* this, X3DNurbsSurfaceGeometryNode* nodes);

  /** Assign single X3DNurbsSurfaceGeometryNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addGeometry" */
  void (*setAddGeometry2) (void* this, X3DNurbsSurfaceGeometryNode* node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed protoInstance array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "addGeometry". */
  void (*setAddGeometry3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "addGeometry". */
  void (*setAddGeometry4) (void* this, struct X3DNode* nodes);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "removeGeometry". */
  void (*setRemoveGeometry) (void* this, X3DNurbsSurfaceGeometryNode* nodes);

  /** Assign single X3DNurbsSurfaceGeometryNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeGeometry" */
  void (*setRemoveGeometry2) (void* this, X3DNurbsSurfaceGeometryNode* node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed protoInstance array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "removeGeometry". */
  void (*setRemoveGeometry3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOnly X3DNurbsSurfaceGeometryNode type field named "removeGeometry". */
  void (*setRemoveGeometry4) (void* this, struct X3DNode* nodes);

  /** Provide X3DNurbsSurfaceGeometryNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  void (*getGeometry) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "geometry" array */
  int (*getNumGeometry) (void* this);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  void (*setGeometry) (void* this, X3DNurbsSurfaceGeometryNode* nodes);

  /** Assign single X3DNurbsSurfaceGeometryNode* value (using a properly typed node) as the MFNode array for inputOutput field named "geometry" */
  void (*setGeometry2) (void* this, X3DNurbsSurfaceGeometryNode* node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed protoInstance array) to inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  void (*setGeometry3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNurbsSurfaceGeometryNode* value (using a properly typed node array) to inputOutput X3DNurbsSurfaceGeometryNode type field named "geometry". */
  void (*setGeometry4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsSurfaceInterpolator defines a node interface that extends interface X3DChildNode. */

struct NurbsSurfaceInterpolator
{
  struct X3DChildNode*  extNode;

  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_fraction". */
  void (*setFraction) (void* this, float* value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  void (*getPosition) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "normal_changed". */
  void (*getNormal) (void* this, float* result);

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "uDimension". */
  int (*getUDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "uDimension". */
  void (*setUDimension) (void* this, int value)

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "vDimension". */
  int (*getVDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "vDimension". */
  void (*setVDimension) (void* this, int value)

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* (*getUKnot) (void* this);

  /** Provide number of primitive values in "uKnot" array */
  int (*getNumUKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void (*setUKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void (*setUKnot2) (void* this, double* value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* (*getVKnot) (void* this);

  /** Provide number of primitive values in "vKnot" array */
  int (*getNumVKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void (*setVKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void (*setVKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "uOrder". */
  int (*getUOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "uOrder". */
  void (*setUOrder) (void* this, int value)

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "vOrder". */
  int (*getVOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "vOrder". */
  void (*setVOrder) (void* this, int value)

  /** Provide double* value from inputOutput MFDouble field named "weight". */
  double* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign double* value to inputOutput MFDouble field named "weight". */
  void (*setWeight) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, double* value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*getControlPoint) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*setControlPoint) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setControlPoint2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsSweptSurface defines a node interface that extends interface X3DParametricGeometryNode. */

struct NurbsSweptSurface
{
  struct X3DParametricGeometryNode*  extNode;

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DNurbsControlCurveNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNurbsControlCurveNode type field named "crossSectionCurve". */
  void (*getCrossSectionCurve) (void* this, struct X3DNode result);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed node) to inputOutput X3DNurbsControlCurveNode type field named "crossSectionCurve". */
  void (*setCrossSectionCurve) (void* this, X3DNurbsControlCurveNode node);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed protoInstance) */
  void (*setCrossSectionCurve2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide NurbsCurve value (using a properly typed node or X3DPrototypeInstance) from inputOutput NurbsCurve type field named "trajectoryCurve". */
  void (*getTrajectoryCurve) (void* this, struct X3DNode result);

  /** Assign NurbsCurve value (using a properly typed node) to inputOutput NurbsCurve type field named "trajectoryCurve". */
  void (*setTrajectoryCurve) (void* this, NurbsCurve node);

  /** Assign NurbsCurve value (using a properly typed protoInstance) */
  void (*setTrajectoryCurve2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsSwungSurface defines a node interface that extends interface X3DParametricGeometryNode. */

struct NurbsSwungSurface
{
  struct X3DParametricGeometryNode*  extNode;

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DNurbsControlCurveNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNurbsControlCurveNode type field named "profileCurve". */
  void (*getProfileCurve) (void* this, struct X3DNode result);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed node) to inputOutput X3DNurbsControlCurveNode type field named "profileCurve". */
  void (*setProfileCurve) (void* this, X3DNurbsControlCurveNode node);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed protoInstance) */
  void (*setProfileCurve2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNurbsControlCurveNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNurbsControlCurveNode type field named "trajectoryCurve". */
  void (*getTrajectoryCurve) (void* this, struct X3DNode result);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed node) to inputOutput X3DNurbsControlCurveNode type field named "trajectoryCurve". */
  void (*setTrajectoryCurve) (void* this, X3DNurbsControlCurveNode node);

  /** Assign X3DNurbsControlCurveNode value (using a properly typed protoInstance) */
  void (*setTrajectoryCurve2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsTextureCoordinate defines a node interface that extends interface X3DNode. */

struct NurbsTextureCoordinate
{
  struct X3DNode*  extNode;

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "controlPoint". */
  void (*getControlPoint) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "controlPoint" array */
  int (*getNumControlPoint) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "controlPoint". */
  void (*setControlPoint) (void* this, float* values);

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "uDimension". */
  int (*getUDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "uDimension". */
  void (*setUDimension) (void* this, int value)

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "vDimension". */
  int (*getVDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "vDimension". */
  void (*setVDimension) (void* this, int value)

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* (*getUKnot) (void* this);

  /** Provide number of primitive values in "uKnot" array */
  int (*getNumUKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void (*setUKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void (*setUKnot2) (void* this, double* value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* (*getVKnot) (void* this);

  /** Provide number of primitive values in "vKnot" array */
  int (*getNumVKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void (*setVKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void (*setVKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "uOrder". */
  int (*getUOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "uOrder". */
  void (*setUOrder) (void* this, int value)

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "vOrder". */
  int (*getVOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "vOrder". */
  void (*setVOrder) (void* this, int value)

  /** Provide float* value (-∞,∞) from inputOutput MFFloat field named "weight". */
  float* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign float* value (-∞,∞) to inputOutput MFFloat field named "weight". */
  void (*setWeight) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** NurbsTrimmedSurface defines a node interface that extends interface X3DNurbsSurfaceGeometryNode. */

struct NurbsTrimmedSurface
{
  struct X3DNurbsSurfaceGeometryNode*  extNode;

  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "addTrimmingContour". */
  void (*setAddTrimmingContour) (void* this, Contour2D* nodes);

  /** Assign single Contour2D* value (using a properly typed node) as the MFNode array for inputOnly field named "addTrimmingContour" */
  void (*setAddTrimmingContour2) (void* this, Contour2D* node);

  /** Assign Contour2D* value (using a properly typed protoInstance array) to inputOnly Contour2D type field named "addTrimmingContour". */
  void (*setAddTrimmingContour3) (void* this, struct X3DPrototypeInstance node);

  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "addTrimmingContour". */
  void (*setAddTrimmingContour4) (void* this, struct X3DNode* nodes);

  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "removeTrimmingContour". */
  void (*setRemoveTrimmingContour) (void* this, Contour2D* nodes);

  /** Assign single Contour2D* value (using a properly typed node) as the MFNode array for inputOnly field named "removeTrimmingContour" */
  void (*setRemoveTrimmingContour2) (void* this, Contour2D* node);

  /** Assign Contour2D* value (using a properly typed protoInstance array) to inputOnly Contour2D type field named "removeTrimmingContour". */
  void (*setRemoveTrimmingContour3) (void* this, struct X3DPrototypeInstance node);

  /** Assign Contour2D* value (using a properly typed node array) to inputOnly Contour2D type field named "removeTrimmingContour". */
  void (*setRemoveTrimmingContour4) (void* this, struct X3DNode* nodes);

  /** Provide Contour2D* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Contour2D type field named "trimmingContour". */
  void (*getTrimmingContour) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "trimmingContour" array */
  int (*getNumTrimmingContour) (void* this);

  /** Assign Contour2D* value (using a properly typed node array) to inputOutput Contour2D type field named "trimmingContour". */
  void (*setTrimmingContour) (void* this, Contour2D* nodes);

  /** Assign single Contour2D* value (using a properly typed node) as the MFNode array for inputOutput field named "trimmingContour" */
  void (*setTrimmingContour2) (void* this, Contour2D* node);

  /** Assign Contour2D* value (using a properly typed protoInstance array) to inputOutput Contour2D type field named "trimmingContour". */
  void (*setTrimmingContour3) (void* this, struct X3DPrototypeInstance node);

  /** Assign Contour2D* value (using a properly typed node array) to inputOutput Contour2D type field named "trimmingContour". */
  void (*setTrimmingContour4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "uClosed". */
  SFBool (*getUClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "uClosed". */
  void (*setUClosed) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "vClosed". */
  SFBool (*getVClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "vClosed". */
  void (*setVClosed) (void* this, SFBool value);

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "uDimension". */
  int (*getUDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "uDimension". */
  void (*setUDimension) (void* this, int value)

  /** Provide int value [0,∞) from initializeOnly SFInt32 field named "vDimension". */
  int (*getVDimension) (void* this);

  /** Assign int value [0,∞) to initializeOnly SFInt32 field named "vDimension". */
  void (*setVDimension) (void* this, int value)

  /** Provide double* value from initializeOnly MFDouble field named "uKnot". */
  double* (*getUKnot) (void* this);

  /** Provide number of primitive values in "uKnot" array */
  int (*getNumUKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "uKnot". */
  void (*setUKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "uKnot" */
  void (*setUKnot2) (void* this, double* value);

  /** Provide double* value from initializeOnly MFDouble field named "vKnot". */
  double* (*getVKnot) (void* this);

  /** Provide number of primitive values in "vKnot" array */
  int (*getNumVKnot) (void* this);

  /** Assign double* value to initializeOnly MFDouble field named "vKnot". */
  void (*setVKnot) (void* this, double* values);

  /** Assign single double* value as the MFDouble array for initializeOnly field named "vKnot" */
  void (*setVKnot2) (void* this, double* value);

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "uOrder". */
  int (*getUOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "uOrder". */
  void (*setUOrder) (void* this, int value)

  /** Provide int value [2,∞) from initializeOnly SFInt32 field named "vOrder". */
  int (*getVOrder) (void* this);

  /** Assign int value [2,∞) to initializeOnly SFInt32 field named "vOrder". */
  void (*setVOrder) (void* this, int value)

  /** Provide int value from inputOutput SFInt32 field named "uTessellation". */
  int (*getUTessellation) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "uTessellation". */
  void (*setUTessellation) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "vTessellation". */
  int (*getVTessellation) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "vTessellation". */
  void (*setVTessellation) (void* this, int value);

  /** Provide double* value (-∞,∞) from inputOutput MFDouble field named "weight". */
  double* (*getWeight) (void* this);

  /** Provide number of primitive values in "weight" array */
  int (*getNumWeight) (void* this);

  /** Assign double* value (-∞,∞) to inputOutput MFDouble field named "weight". */
  void (*setWeight) (void* this, double* values);

  /** Assign single double* value (-∞,∞) as the MFDouble array for inputOutput field named "weight" */
  void (*setWeight2) (void* this, double* value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*getControlPoint) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "controlPoint". */
  void (*setControlPoint) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setControlPoint2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|NurbsTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|NurbsTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** OpacityMapVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct OpacityMapVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide X3DTexture2DNode|X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|X3DTexture3DNode type field named "transferFunction". */
  void (*getTransferFunction) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode|X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture2DNode|X3DTexture3DNode type field named "transferFunction". */
  void (*setTransferFunction) (void* this, struct X3DNode node);

  /** Assign X3DTexture2DNode|X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setTransferFunction2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** OrientationChaser defines a node interface that extends interface X3DChaserNode. */

struct OrientationChaser
{
  struct X3DChaserNode*  extNode;

  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_destination". */
  void (*setDestination) (void* this, float* value);

  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_value". */
  void (*setValue) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* (*getValue) (void* this);

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialDestination". */
  float* (*getInitialDestination) (void* this);

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialValue". */
  float* (*getInitialValue) (void* this);

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialValue". */
  void (*setInitialValue) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from initializeOnly SFTime field named "duration". */
  double (*getDuration) (void* this);

  /** Assign double value in seconds [0,∞) to initializeOnly SFTime field named "duration". */
  void (*setDuration) (void* this, double timestamp)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** OrientationDamper defines a node interface that extends interface X3DDamperNode. */

struct OrientationDamper
{
  struct X3DDamperNode*  extNode;

  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_destination". */
  void (*setDestination) (void* this, float* value);

  /** Assign 4-tuple float* value in radians to inputOnly SFRotation field named "set_value". */
  void (*setValue) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* (*getValue) (void* this);

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialDestination". */
  float* (*getInitialDestination) (void* this);

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from initializeOnly SFRotation field named "initialValue". */
  float* (*getInitialValue) (void* this);

  /** Assign 4-tuple float* value in radians to initializeOnly SFRotation field named "initialValue". */
  void (*setInitialValue) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tau". */
  double (*getTau) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tau". */
  void (*setTau) (void* this, double timestamp)

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float (*getTolerance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void (*setTolerance) (void* this, float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** OrientationInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct OrientationInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* (*getValue) (void* this);

  /** Provide 4-tuple float* value in radians from inputOutput MFRotation field named "keyValue". */
  float* (*getKeyValue) (void* this);

  /** Provide number of 4-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput MFRotation field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** OrthoViewpoint defines a node interface that extends interface X3DViewpointNode. */

struct OrthoViewpoint
{
  struct X3DViewpointNode*  extNode;

  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "centerOfRotation". */
  void (*getCenterOfRotation) (void* this, float* result);

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "centerOfRotation". */
  void (*setCenterOfRotation) (void* this, float* value);

  /** Provide float* value from inputOutput MFFloat field named "fieldOfView". */
  float* (*getFieldOfView) (void* this);

  /** Provide number of primitive values in "fieldOfView" array */
  int (*getNumFieldOfView) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "fieldOfView". */
  void (*setFieldOfView) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "fieldOfView" */
  void (*setFieldOfView2) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign SFBool value to inputOnly SFBool field named "set_bind". */
  void (*setBind) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double (*getBindTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isBound". */
  SFBool (*getIsBound) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "jump". */
  SFBool (*getJump) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "jump". */
  void (*setJump) (void* this, SFBool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* (*getOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void (*setOrientation) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "retainUserOffsets". */
  SFBool (*getRetainUserOffsets) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "retainUserOffsets". */
  void (*setRetainUserOffsets) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "farDistance". */
  float (*getFarDistance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "farDistance". */
  void (*setFarDistance) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "nearDistance". */
  float (*getNearDistance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "nearDistance". */
  void (*setNearDistance) (void* this, float value);

  /** Provide SFBool value from inputOutput SFBool field named "viewAll". */
  SFBool (*getViewAll) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "viewAll". */
  void (*setViewAll) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide NavigationInfo value (using a properly typed node or X3DPrototypeInstance) from inputOutput NavigationInfo type field named "navigationInfo". */
  void (*getNavigationInfo) (void* this, struct X3DNode result);

  /** Assign NavigationInfo value (using a properly typed node) to inputOutput NavigationInfo type field named "navigationInfo". */
  void (*setNavigationInfo) (void* this, NavigationInfo node);

  /** Assign NavigationInfo value (using a properly typed protoInstance) */
  void (*setNavigationInfo2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** OscillatorSource defines a node interface that extends interface X3DSoundSourceNode. */

struct OscillatorSource
{
  struct X3DSoundSourceNode*  extNode;

  /** Provide float value [0,∞) from inputOutput SFFloat field named "detune". */
  float (*getDetune) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "detune". */
  void (*setDetune) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "frequency". */
  float (*getFrequency) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "frequency". */
  void (*setFrequency) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PackagedShader defines a node interface that extends interfaces , X3DUrlObject, X3DShaderNode, X3DProgrammableShaderObject.
  * PackagedShader can contain field declarations, but no CDATA section of plain-text source code. */

struct PackagedShader
{
  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Assign SFBool value to inputOnly SFBool field named "activate". */
  void (*setActivate) (void* this, SFBool value);

  /** Provide SFBool value from outputOnly SFBool field named "isSelected". */
  SFBool (*getIsSelected) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isValid". */
  SFBool (*getIsValid) (void* this);

  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  void (*getField) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "field" array */
  int (*getNumField) (void* this);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField) (void* this, field* nodes);

  /** Assign single field* value (using a properly typed node) as the MFNode array for inputOutput field named "field" */
  void (*setField2) (void* this, field* node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void (*setField3) (void* this, struct X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ParticleSystem defines a node interface that extends interface X3DShapeNode. */

struct ParticleSystem
{
  struct X3DShapeNode*  extNode;

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "createParticles". */
  SFBool (*getCreateParticles) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "createParticles". */
  void (*setCreateParticles) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "lifetimeVariation". */
  float (*getLifetimeVariation) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "lifetimeVariation". */
  void (*setLifetimeVariation) (void* this, float value)

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "maxParticles". */
  int (*getMaxParticles) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "maxParticles". */
  void (*setMaxParticles) (void* this, int value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "particleLifetime". */
  float (*getParticleLifetime) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "particleLifetime". */
  void (*setParticleLifetime) (void* this, float value)

  /** Provide 2-tuple float* value (-∞,∞) from inputOutput SFVec2f field named "particleSize". */
  void (*getParticleSize) (void* this, float* result);

  /** Assign 2-tuple float* value (-∞,∞) to inputOutput SFVec2f field named "particleSize". */
  void (*setParticleSize) (void* this, float* value);

  /** Provide float* value using RGB values [0..1] from initializeOnly MFFloat field named "colorKey". */
  float* (*getColorKey) (void* this);

  /** Provide number of primitive values in "colorKey" array */
  int (*getNumColorKey) (void* this);

  /** Assign float* value using RGB values [0..1] to initializeOnly MFFloat field named "colorKey". */
  void (*setColorKey) (void* this, float* colors)

  /** Assign single float* value using RGB values [0..1] as the MFFloat array for initializeOnly field named "colorKey" */
  void (*setColorKey2) (void* this, float* color)

  /** Provide string value from initializeOnly SFString field named "geometryType". */
  string (*getGeometryType) (void* this);

  /** Assign string value to initializeOnly SFString field named "geometryType". */
  void (*setGeometryType) (void* this, string value);

  /** Provide float* value (-∞,∞) from initializeOnly MFFloat field named "texCoordKey". */
  float* (*getTexCoordKey) (void* this);

  /** Provide number of primitive values in "texCoordKey" array */
  int (*getNumTexCoordKey) (void* this);

  /** Assign float* value (-∞,∞) to initializeOnly MFFloat field named "texCoordKey". */
  void (*setTexCoordKey) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for initializeOnly field named "texCoordKey" */
  void (*setTexCoordKey2) (void* this, float* value);

  /** Provide X3DColorNode* value (using a properly typed node array or X3DPrototypeInstance array) using RGB values [0..1] from initializeOnly X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "color" array */
  int (*getNumColor) (void* this);

  /** Assign X3DColorNode* value (using a properly typed node array) using RGB values [0..1] to initializeOnly X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode* colors)

  /** Assign single X3DColorNode* value (using a properly typed node) using RGB values [0..1] as the MFNode array for initializeOnly field named "color" */
  void (*setColor2) (void* this, X3DColorNode* color)

  /** Assign X3DColorNode* value (using a properly typed protoInstance array) using RGB values [0..1] to initializeOnly X3DColorNode type field named "color". */
  void (*setColor3) (void* this, struct X3DPrototypeInstance color)

  /** Assign X3DColorNode* value (using a properly typed node array) using RGB values [0..1] to initializeOnly X3DColorNode type field named "color". */
  void (*setColor4) (void* this, struct X3DNode* colors)

  /** Provide X3DParticlePhysicsModelNode* value (using a properly typed node array or X3DPrototypeInstance array) from initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  void (*getPhysics) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "physics" array */
  int (*getNumPhysics) (void* this);

  /** Assign X3DParticlePhysicsModelNode* value (using a properly typed node array) to initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  void (*setPhysics) (void* this, X3DParticlePhysicsModelNode* nodes);

  /** Assign single X3DParticlePhysicsModelNode* value (using a properly typed node) as the MFNode array for initializeOnly field named "physics" */
  void (*setPhysics2) (void* this, X3DParticlePhysicsModelNode* node);

  /** Assign X3DParticlePhysicsModelNode* value (using a properly typed protoInstance array) to initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  void (*setPhysics3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DParticlePhysicsModelNode* value (using a properly typed node array) to initializeOnly X3DParticlePhysicsModelNode type field named "physics". */
  void (*setPhysics4) (void* this, struct X3DNode* nodes);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  void (*getGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void (*setGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DParticleEmitterNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DParticleEmitterNode type field named "emitter". */
  void (*getEmitter) (void* this, struct X3DNode result);

  /** Assign X3DParticleEmitterNode value (using a properly typed node) to initializeOnly X3DParticleEmitterNode type field named "emitter". */
  void (*setEmitter) (void* this, X3DParticleEmitterNode node);

  /** Assign X3DParticleEmitterNode value (using a properly typed protoInstance) */
  void (*setEmitter2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide TextureCoordinate|TextureCoordinateGenerator value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureCoordinate|TextureCoordinateGenerator type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign TextureCoordinate|TextureCoordinateGenerator value (using a properly typed node) to initializeOnly TextureCoordinate|TextureCoordinateGenerator type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign TextureCoordinate|TextureCoordinateGenerator value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "castShadow". */
  SFBool (*getCastShadow) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "castShadow". */
  void (*setCastShadow) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DAppearanceNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DAppearanceNode type field named "appearance". */
  void (*getAppearance) (void* this, struct X3DNode result);

  /** Assign X3DAppearanceNode value (using a properly typed node) to inputOutput X3DAppearanceNode type field named "appearance". */
  void (*setAppearance) (void* this, X3DAppearanceNode node);

  /** Assign X3DAppearanceNode value (using a properly typed protoInstance) */
  void (*setAppearance2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  void (*getGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void (*setGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PeriodicWave defines a node interface that extends interface X3DSoundNode. */

struct PeriodicWave
{
  struct X3DSoundNode*  extNode;

  /** Provide float* value from inputOutput MFFloat field named "optionsReal". */
  float* (*getOptionsReal) (void* this);

  /** Provide number of primitive values in "optionsReal" array */
  int (*getNumOptionsReal) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "optionsReal". */
  void (*setOptionsReal) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "optionsReal" */
  void (*setOptionsReal2) (void* this, float* value);

  /** Provide float* value from inputOutput MFFloat field named "optionsImag". */
  float* (*getOptionsImag) (void* this);

  /** Provide number of primitive values in "optionsImag" array */
  int (*getNumOptionsImag) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "optionsImag". */
  void (*setOptionsImag) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "optionsImag" */
  void (*setOptionsImag2) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to inputOutput SFString field named "type". */
  void (*setType) (void* this, string value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PhysicalMaterial defines a node interface that extends interface X3DOneSidedMaterialNode. */

struct PhysicalMaterial
{
  struct X3DOneSidedMaterialNode*  extNode;

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "baseColor". */
  void (*getBaseColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "baseColor". */
  void (*setBaseColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "baseTextureMapping". */
  string (*getBaseTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "baseTextureMapping". */
  void (*setBaseTextureMapping) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "metallic". */
  float (*getMetallic) (void* this);

  /** Assign float value to inputOutput SFFloat field named "metallic". */
  void (*setMetallic) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "metallicRoughnessTextureMapping". */
  string (*getMetallicRoughnessTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "metallicRoughnessTextureMapping". */
  void (*setMetallicRoughnessTextureMapping) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "occlusionStrength". */
  float (*getOcclusionStrength) (void* this);

  /** Assign float value to inputOutput SFFloat field named "occlusionStrength". */
  void (*setOcclusionStrength) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "occlusionTextureMapping". */
  string (*getOcclusionTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "occlusionTextureMapping". */
  void (*setOcclusionTextureMapping) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "roughness". */
  float (*getRoughness) (void* this);

  /** Assign float value to inputOutput SFFloat field named "roughness". */
  void (*setRoughness) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float (*getTransparency) (void* this);

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void (*setTransparency) (void* this, float value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "baseTexture". */
  void (*getBaseTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "baseTexture". */
  void (*setBaseTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setBaseTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void (*getEmissiveTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void (*setEmissiveTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setEmissiveTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "metallicRoughnessTexture". */
  void (*getMetallicRoughnessTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "metallicRoughnessTexture". */
  void (*setMetallicRoughnessTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setMetallicRoughnessTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void (*getNormalTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void (*setNormalTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setNormalTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  void (*getOcclusionTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "occlusionTexture". */
  void (*setOcclusionTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setOcclusionTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  void (*getEmissiveColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void (*setEmissiveColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "emissiveTextureMapping". */
  string (*getEmissiveTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "emissiveTextureMapping". */
  void (*setEmissiveTextureMapping) (void* this, string value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "normalScale". */
  float (*getNormalScale) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "normalScale". */
  void (*setNormalScale) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "normalTextureMapping". */
  string (*getNormalTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "normalTextureMapping". */
  void (*setNormalTextureMapping) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PickableGroup defines a node interface that extends interfaces X3DGroupingNode, X3DPickableObject. */

struct PickableGroup
{
  struct X3DGroupingNode*  extNode;
  struct X3DPickableObject*  extNode1;

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values)

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values);

  /** Assign single string* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void (*setObjectType2) (void* this, string* value);

  /** Provide SFBool value from inputOutput SFBool field named "pickable". */
  SFBool (*getPickable) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "pickable". */
  void (*setPickable) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PixelTexture defines a node interface that extends interface X3DTexture2DNode. */

struct PixelTexture
{
  struct X3DTexture2DNode*  extNode;

  /** Provide SFImage value from inputOutput SFImage field named "image". */
  SFImage (*getImage) (void* this);

  /** Assign SFImage value to inputOutput SFImage field named "image". */
  void (*setImage) (void* this, SFImage value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatS". */
  SFBool (*getRepeatS) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatS". */
  void (*setRepeatS) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatT". */
  SFBool (*getRepeatT) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatT". */
  void (*setRepeatT) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PixelTexture3D defines a node interface that extends interface X3DTexture3DNode. */

struct PixelTexture3D
{
  struct X3DTexture3DNode*  extNode;

  /** Provide MFInt32 value from inputOutput MFInt32 field named "image". */
  MFInt32 (*getImage) (void* this);

  /** Provide number of primitive values in "image" array */
  int (*getNumImage) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "image". */
  void (*setImage) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "image" */
  void (*setImage2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatS". */
  SFBool (*getRepeatS) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatS". */
  void (*setRepeatS) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatT". */
  SFBool (*getRepeatT) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatT". */
  void (*setRepeatT) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "repeatR". */
  SFBool (*getRepeatR) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "repeatR". */
  void (*setRepeatR) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide TextureProperties value (using a properly typed node or X3DPrototypeInstance) from initializeOnly TextureProperties type field named "textureProperties". */
  void (*getTextureProperties) (void* this, struct X3DNode result);

  /** Assign TextureProperties value (using a properly typed node) to initializeOnly TextureProperties type field named "textureProperties". */
  void (*setTextureProperties) (void* this, TextureProperties node);

  /** Assign TextureProperties value (using a properly typed protoInstance) */
  void (*setTextureProperties2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PlaneSensor defines a node interface that extends interface X3DDragSensorNode. */

struct PlaneSensor
{
  struct X3DDragSensorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "translation_changed". */
  void (*getTranslation) (void* this, float* result);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "axisRotation". */
  float* (*getAxisRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "axisRotation". */
  void (*setAxisRotation) (void* this, float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "maxPosition". */
  void (*getMaxPosition) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "maxPosition". */
  void (*setMaxPosition) (void* this, float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "minPosition". */
  void (*getMinPosition) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "minPosition". */
  void (*setMinPosition) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "offset". */
  void (*getOffset) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "offset". */
  void (*setOffset) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "trackPoint_changed". */
  void (*getTrackPoint) (void* this, float* result);

  /** Provide SFBool value from inputOutput SFBool field named "autoOffset". */
  SFBool (*getAutoOffset) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "autoOffset". */
  void (*setAutoOffset) (void* this, SFBool value);

  /** Provide SFBool value from outputOnly SFBool field named "isOver". */
  SFBool (*getIsOver) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PointEmitter defines a node interface that extends interface X3DParticleEmitterNode. */

struct PointEmitter
{
  struct X3DParticleEmitterNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "variation". */
  float (*getVariation) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "variation". */
  void (*setVariation) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "surfaceArea". */
  float (*getSurfaceArea) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "surfaceArea". */
  void (*setSurfaceArea) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PointLight defines a node interface that extends interface X3DLightNode.
  * Linear attenuation may occur at level 2, full support at level 3. */

struct PointLight
{
  struct X3DLightNode*  extNode;

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "attenuation". */
  void (*getAttenuation) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "attenuation". */
  void (*setAttenuation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  void (*getLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void (*setLocation) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "radius". */
  float (*getRadius) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "radius". */
  void (*setRadius) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "global". */
  SFBool (*getGlobal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "global". */
  void (*setGlobal) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "shadows". */
  SFBool (*getShadows) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "shadows". */
  void (*setShadows) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float (*getShadowIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void (*setShadowIntensity) (void* this, float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PointPickSensor defines a node interface that extends interface X3DPickSensorNode. */

struct PointPickSensor
{
  struct X3DPickSensorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly MFVec3f field named "pickedPoint". */
  void (*getPickedPoint) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "pickedPoint" array */
  int (*getNumPickedPoint) (void* this);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values)

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values);

  /** Assign single string* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void (*setObjectType2) (void* this, string* value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*getPickTarget) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickTarget" array */
  int (*getNumPickTarget) (void* this);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "pickTarget" */
  void (*setPickTarget2) (void* this, struct X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget3) (void* this, struct X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  void (*getPickedGeometry) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickedGeometry" array */
  int (*getNumPickedGeometry) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*getPickingGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*setPickingGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setPickingGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PointProperties defines a node interface that extends interface X3DAppearanceChildNode. */

struct PointProperties
{
  struct X3DAppearanceChildNode*  extNode;

  /** Provide float value [1,∞) from inputOutput SFFloat field named "pointSizeScaleFactor". */
  float (*getPointSizeScaleFactor) (void* this);

  /** Assign float value [1,∞) to inputOutput SFFloat field named "pointSizeScaleFactor". */
  void (*setPointSizeScaleFactor) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "pointSizeMinValue". */
  float (*getPointSizeMinValue) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "pointSizeMinValue". */
  void (*setPointSizeMinValue) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "pointSizeMaxValue". */
  float (*getPointSizeMaxValue) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "pointSizeMaxValue". */
  void (*setPointSizeMaxValue) (void* this, float value)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "attenuation". */
  void (*getAttenuation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "attenuation". */
  void (*setAttenuation) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PointSet defines a node interface that extends interface X3DGeometryNode. */

struct PointSet
{
  struct X3DGeometryNode*  extNode;

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Polyline2D defines a node interface that extends interface X3DGeometryNode. */

struct Polyline2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "lineSegments". */
  void (*getLineSegments) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "lineSegments" array */
  int (*getNumLineSegments) (void* this);

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "lineSegments". */
  void (*setLineSegments) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PolylineEmitter defines a node interface that extends interface X3DParticleEmitterNode. */

struct PolylineEmitter
{
  struct X3DParticleEmitterNode*  extNode;

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 (*getCoordIndex) (void* this);

  /** Provide number of primitive values in "coordIndex" array */
  int (*getNumCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "variation". */
  float (*getVariation) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "variation". */
  void (*setVariation) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "surfaceArea". */
  float (*getSurfaceArea) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "surfaceArea". */
  void (*setSurfaceArea) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Polypoint2D defines a node interface that extends interface X3DGeometryNode. */

struct Polypoint2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "point". */
  void (*getPoint) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "point" array */
  int (*getNumPoint) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "point". */
  void (*setPoint) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PositionChaser defines a node interface that extends interface X3DChaserNode. */

struct PositionChaser
{
  struct X3DChaserNode*  extNode;

  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_destination". */
  void (*setDestination) (void* this, float* value);

  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_value". */
  void (*setValue) (void* this, float* value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialValue". */
  void (*setInitialValue) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from initializeOnly SFTime field named "duration". */
  double (*getDuration) (void* this);

  /** Assign double value in seconds [0,∞) to initializeOnly SFTime field named "duration". */
  void (*setDuration) (void* this, double timestamp)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PositionChaser2D defines a node interface that extends interface X3DChaserNode. */

struct PositionChaser2D
{
  struct X3DChaserNode*  extNode;

  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_destination". */
  void (*setDestination) (void* this, float* value);

  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_value". */
  void (*setValue) (void* this, float* value);

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value);

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialValue". */
  void (*setInitialValue) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from initializeOnly SFTime field named "duration". */
  double (*getDuration) (void* this);

  /** Assign double value in seconds [0,∞) to initializeOnly SFTime field named "duration". */
  void (*setDuration) (void* this, double timestamp)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PositionDamper defines a node interface that extends interface X3DDamperNode. */

struct PositionDamper
{
  struct X3DDamperNode*  extNode;

  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_destination". */
  void (*setDestination) (void* this, float* value);

  /** Assign 3-tuple float* value to inputOnly SFVec3f field named "set_value". */
  void (*setValue) (void* this, float* value);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "initialValue". */
  void (*setInitialValue) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tau". */
  double (*getTau) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tau". */
  void (*setTau) (void* this, double timestamp)

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float (*getTolerance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void (*setTolerance) (void* this, float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PositionDamper2D defines a node interface that extends interface X3DDamperNode. */

struct PositionDamper2D
{
  struct X3DDamperNode*  extNode;

  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_destination". */
  void (*setDestination) (void* this, float* value);

  /** Assign 2-tuple float* value to inputOnly SFVec2f field named "set_value". */
  void (*setValue) (void* this, float* value);

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* value);

  /** Provide 2-tuple float* value from initializeOnly SFVec2f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Assign 2-tuple float* value to initializeOnly SFVec2f field named "initialValue". */
  void (*setInitialValue) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tau". */
  double (*getTau) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tau". */
  void (*setTau) (void* this, double timestamp)

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float (*getTolerance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void (*setTolerance) (void* this, float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PositionInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct PositionInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PositionInterpolator2D defines a node interface that extends interface X3DInterpolatorNode. */

struct PositionInterpolator2D
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** PrimitivePickSensor defines a node interface that extends interface X3DPickSensorNode.
  * If a non-uniform scale is applied to the pick sensor, correct results may require level 3 support. */

struct PrimitivePickSensor
{
  struct X3DPickSensorNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values)

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values);

  /** Assign single string* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void (*setObjectType2) (void* this, string* value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*getPickTarget) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickTarget" array */
  int (*getNumPickTarget) (void* this);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "pickTarget" */
  void (*setPickTarget2) (void* this, struct X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget3) (void* this, struct X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  void (*getPickedGeometry) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickedGeometry" array */
  int (*getNumPickedGeometry) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*getPickingGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*setPickingGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setPickingGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ProgramShader defines a node interface that extends interface X3DShaderNode.
  * ProgramShader contains no field declarations and no plain-text source code. */

struct ProgramShader
{
  struct X3DShaderNode*  extNode;

  /** Provide ShaderProgram* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput ShaderProgram type field named "programs". */
  void (*getPrograms) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "programs" array */
  int (*getNumPrograms) (void* this);

  /** Assign ShaderProgram* value (using a properly typed node array) to inputOutput ShaderProgram type field named "programs". */
  void (*setPrograms) (void* this, ShaderProgram* nodes);

  /** Assign single ShaderProgram* value (using a properly typed node) as the MFNode array for inputOutput field named "programs" */
  void (*setPrograms2) (void* this, ShaderProgram* node);

  /** Assign ShaderProgram* value (using a properly typed protoInstance array) to inputOutput ShaderProgram type field named "programs". */
  void (*setPrograms3) (void* this, struct X3DPrototypeInstance node);

  /** Assign ShaderProgram* value (using a properly typed node array) to inputOutput ShaderProgram type field named "programs". */
  void (*setPrograms4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Assign SFBool value to inputOnly SFBool field named "activate". */
  void (*setActivate) (void* this, SFBool value);

  /** Provide SFBool value from outputOnly SFBool field named "isSelected". */
  SFBool (*getIsSelected) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isValid". */
  SFBool (*getIsValid) (void* this);

  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ProjectionVolumeStyle defines a node interface that extends interface X3DVolumeRenderStyleNode. */

struct ProjectionVolumeStyle
{
  struct X3DVolumeRenderStyleNode*  extNode;

  /** Provide string value from inputOutput SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to inputOutput SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "intensityThreshold". */
  float (*getIntensityThreshold) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "intensityThreshold". */
  void (*setIntensityThreshold) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to inputOutput SFString field named "type". */
  void (*setType) (void* this, string value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ProtoBody defines a node interface that extends interface X3DStatement.
  * ProtoBody contains the definition nodes for new Prototype nodes. */

struct ProtoBody
{
  struct X3DStatement*  extNode;

  /** Provide X3DNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void (*setChildren) (void* this, X3DNode* nodes);

  /** Assign single X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DNode* node);

  /** Assign X3DNode* value (using a properly typed protoInstance array) to inputOutput X3DNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNode* value (using a properly typed node array) to inputOutput X3DNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);
}
;/** ProtoDeclare defines a node interface that extends interfaces X3DStatement, X3DChildNode.
  * ProtoDeclare defines new Prototype nodes. Nested ProtoDeclares and ProtoInstances are allowed by the specification. */

struct ProtoDeclare
{
  struct X3DStatement*  extNode;
  struct X3DChildNode*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "appinfo". */
  string (*getAppinfo) (void* this);

  /** Assign string value to inputOutput SFString field named "appinfo". */
  void (*setAppinfo) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "documentation". */
  string (*getDocumentation) (void* this);

  /** Assign string value to inputOutput SFString field named "documentation". */
  void (*setDocumentation) (void* this, string value);

  /** Provide ProtoInterface value (using a properly typed node or X3DPrototypeInstance) from inputOutput ProtoInterface type field named "ProtoInterface". */
  void (*getProtoInterface) (void* this, struct X3DNode result);

  /** Assign ProtoInterface value (using a properly typed node) to inputOutput ProtoInterface type field named "ProtoInterface". */
  void (*setProtoInterface) (void* this, ProtoInterface node);

  /** Assign ProtoInterface value (using a properly typed protoInstance) */
  void (*setProtoInterface2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide ProtoBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput ProtoBody type field named "ProtoBody". */
  void (*getProtoBody) (void* this, struct X3DNode result);

  /** Assign ProtoBody value (using a properly typed node) to inputOutput ProtoBody type field named "ProtoBody". */
  void (*setProtoBody) (void* this, ProtoBody node);

  /** Assign ProtoBody value (using a properly typed protoInstance) */
  void (*setProtoBody2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ProtoInstance defines a node interface that extends interfaces X3DPrototypeInstance, X3DChildNode.
  * ProtoInstance can override field default values via fieldValue initializations. Non-recursive nested ProtoInstance and ProtoDeclare statements are allowed within a ProtoDeclare. */

struct ProtoInstance
{
  struct X3DPrototypeInstance*  extNode;
  struct X3DChildNode*  extNode1;

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide fieldValue* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput fieldValue type field named "fieldValue". */
  void (*getFieldValue) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "fieldValue" array */
  int (*getNumFieldValue) (void* this);

  /** Assign fieldValue* value (using a properly typed node array) to inputOutput fieldValue type field named "fieldValue". */
  void (*setFieldValue) (void* this, fieldValue* nodes);

  /** Assign single fieldValue* value (using a properly typed node) as the MFNode array for inputOutput field named "fieldValue" */
  void (*setFieldValue2) (void* this, fieldValue* node);

  /** Assign fieldValue* value (using a properly typed protoInstance array) to inputOutput fieldValue type field named "fieldValue". */
  void (*setFieldValue3) (void* this, struct X3DPrototypeInstance node);

  /** Assign fieldValue* value (using a properly typed node array) to inputOutput fieldValue type field named "fieldValue". */
  void (*setFieldValue4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ProtoInterface defines a node interface that extends interface X3DStatement.
  * ProtoInterface defines fields for new Prototype nodes. */

struct ProtoInterface
{
  struct X3DStatement*  extNode;

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  void (*getField) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "field" array */
  int (*getNumField) (void* this);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField) (void* this, field* nodes);

  /** Assign single field* value (using a properly typed node) as the MFNode array for inputOutput field named "field" */
  void (*setField2) (void* this, field* node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void (*setField3) (void* this, struct X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField4) (void* this, struct X3DNode* nodes);
}
;/** ProximitySensor defines a node interface that extends interface X3DEnvironmentalSensorNode. */

struct ProximitySensor
{
  struct X3DEnvironmentalSensorNode*  extNode;

  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double (*getEnterTime) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double (*getExitTime) (void* this);

  /** Provide 3-tuple float* value in radians from outputOnly SFVec3f field named "centerOfRotation_changed". */
  void (*getCenterOfRotation) (void* this, float* result);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "orientation_changed". */
  float* (*getOrientation) (void* this);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  void (*getPosition) (void* this, float* result);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-∞,∞) from initializeOnly SFVec3f field named "size". */
  void (*getSize) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to initializeOnly SFVec3f field named "size". */
  void (*setSize) (void* this, float* value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** QuadSet defines a node interface that extends interface X3DComposedGeometryNode.
  * QuadSet is a geometry node that defines quadrilaterals. */

struct QuadSet
{
  struct X3DComposedGeometryNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ReceiverPdu defines a node interface that extends interfaces X3DNetworkSensorNode, X3DBoundedObject. */

struct ReceiverPdu
{
  struct X3DNetworkSensorNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkReader". */
  SFBool (*getIsNetworkReader) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkWriter". */
  SFBool (*getIsNetworkWriter) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  SFBool (*getIsRtpHeaderHeard) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isStandAlone". */
  SFBool (*getIsStandAlone) (void* this);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "timestamp". */
  double (*getTimestamp) (void* this);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "whichGeometry". */
  int (*getWhichGeometry) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "whichGeometry". */
  void (*setWhichGeometry) (void* this, int value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "readInterval". */
  double (*getReadInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "readInterval". */
  void (*setReadInterval) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "writeInterval". */
  double (*getWriteInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "writeInterval". */
  void (*setWriteInterval) (void* this, double timestamp)

  /** Provide string value from inputOutput SFString field named "networkMode". */
  string (*getNetworkMode) (void* this);

  /** Assign string value to inputOutput SFString field named "networkMode". */
  void (*setNetworkMode) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int (*getSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void (*setSiteID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int (*getApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void (*setApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int (*getEntityID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void (*setEntityID) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "address". */
  string (*getAddress) (void* this);

  /** Assign string value to inputOutput SFString field named "address". */
  void (*setAddress) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int (*getPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void (*setPort) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "multicastRelayHost". */
  string (*getMulticastRelayHost) (void* this);

  /** Assign string value to inputOutput SFString field named "multicastRelayHost". */
  void (*setMulticastRelayHost) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int (*getMulticastRelayPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void (*setMulticastRelayPort) (void* this, int value);

  /** Provide SFBool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  SFBool (*getRtpHeaderExpected) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void (*setRtpHeaderExpected) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "radioID". */
  int (*getRadioID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioID". */
  void (*setRadioID) (void* this, int value);

  /** Provide float value from inputOutput SFFloat field named "receivedPower". */
  float (*getReceivedPower) (void* this);

  /** Assign float value to inputOutput SFFloat field named "receivedPower". */
  void (*setReceivedPower) (void* this, float value);

  /** Provide int value from inputOutput SFInt32 field named "receiverState". */
  int (*getReceiverState) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "receiverState". */
  void (*setReceiverState) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterSiteID". */
  int (*getTransmitterSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "transmitterSiteID". */
  void (*setTransmitterSiteID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterApplicationID". */
  int (*getTransmitterApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "transmitterApplicationID". */
  void (*setTransmitterApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterEntityID". */
  int (*getTransmitterEntityID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "transmitterEntityID". */
  void (*setTransmitterEntityID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "transmitterRadioID". */
  int (*getTransmitterRadioID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "transmitterRadioID". */
  void (*setTransmitterRadioID) (void* this, int value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  void (*getGeoCoords) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void (*setGeoCoords) (void* this, double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Rectangle2D defines a node interface that extends interface X3DGeometryNode. */

struct Rectangle2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide 2-tuple float* value (-∞,∞) from initializeOnly SFVec2f field named "size". */
  void (*getSize) (void* this, float* result);

  /** Assign 2-tuple float* value (-∞,∞) to initializeOnly SFVec2f field named "size". */
  void (*setSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** RigidBody defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject.
  * RigidBody describes a collection of shapes with a mass distribution that is affected by the physics model. */

struct RigidBody
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide float value from inputOutput SFFloat field named "angularDampingFactor". */
  float (*getAngularDampingFactor) (void* this);

  /** Assign float value to inputOutput SFFloat field named "angularDampingFactor". */
  void (*setAngularDampingFactor) (void* this, float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "angularVelocity". */
  void (*getAngularVelocity) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "angularVelocity". */
  void (*setAngularVelocity) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "autoDamp". */
  SFBool (*getAutoDamp) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "autoDamp". */
  void (*setAutoDamp) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "autoDisable". */
  SFBool (*getAutoDisable) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "autoDisable". */
  void (*setAutoDisable) (void* this, SFBool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "centerOfMass". */
  void (*getCenterOfMass) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "centerOfMass". */
  void (*setCenterOfMass) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "disableAngularSpeed". */
  float (*getDisableAngularSpeed) (void* this);

  /** Assign float value to inputOutput SFFloat field named "disableAngularSpeed". */
  void (*setDisableAngularSpeed) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "disableLinearSpeed". */
  float (*getDisableLinearSpeed) (void* this);

  /** Assign float value to inputOutput SFFloat field named "disableLinearSpeed". */
  void (*setDisableLinearSpeed) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "disableTime". */
  double (*getDisableTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "disableTime". */
  void (*setDisableTime) (void* this, double timestamp)

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "finiteRotationAxis". */
  void (*getFiniteRotationAxis) (void* this, float* result);

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "finiteRotationAxis". */
  void (*setFiniteRotationAxis) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "fixed". */
  SFBool (*getFixed) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "fixed". */
  void (*setFixed) (void* this, SFBool value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "forces". */
  void (*getForces) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "forces" array */
  int (*getNumForces) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "forces". */
  void (*setForces) (void* this, float* values);

  /** Provide float* value from inputOutput SFMatrix3f field named "inertia". */
  float* (*getInertia) (void* this);

  /** Assign float* value to inputOutput SFMatrix3f field named "inertia". */
  void (*setInertia) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "linearDampingFactor". */
  float (*getLinearDampingFactor) (void* this);

  /** Assign float value to inputOutput SFFloat field named "linearDampingFactor". */
  void (*setLinearDampingFactor) (void* this, float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "linearVelocity". */
  void (*getLinearVelocity) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "linearVelocity". */
  void (*setLinearVelocity) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* (*getOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void (*setOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "torques". */
  void (*getTorques) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "torques" array */
  int (*getNumTorques) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "torques". */
  void (*setTorques) (void* this, float* values);

  /** Provide SFBool value in radians from inputOutput SFBool field named "useFiniteRotation". */
  SFBool (*getUseFiniteRotation) (void* this);

  /** Assign SFBool value in radians to inputOutput SFBool field named "useFiniteRotation". */
  void (*setUseFiniteRotation) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "useGlobalGravity". */
  SFBool (*getUseGlobalGravity) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "useGlobalGravity". */
  void (*setUseGlobalGravity) (void* this, SFBool value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide X3DNBodyCollidableNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DNBodyCollidableNode type field named "geometry". */
  void (*getGeometry) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "geometry" array */
  int (*getNumGeometry) (void* this);

  /** Assign X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollidableNode type field named "geometry". */
  void (*setGeometry) (void* this, X3DNBodyCollidableNode* nodes);

  /** Assign single X3DNBodyCollidableNode* value (using a properly typed node) as the MFNode array for inputOutput field named "geometry" */
  void (*setGeometry2) (void* this, X3DNBodyCollidableNode* node);

  /** Assign X3DNBodyCollidableNode* value (using a properly typed protoInstance array) to inputOutput X3DNBodyCollidableNode type field named "geometry". */
  void (*setGeometry3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DNBodyCollidableNode* value (using a properly typed node array) to inputOutput X3DNBodyCollidableNode type field named "geometry". */
  void (*setGeometry4) (void* this, struct X3DNode* nodes);

  /** Provide Sphere|Box|Cone value (using a properly typed node or X3DPrototypeInstance) from inputOutput Sphere|Box|Cone type field named "massDensityModel". */
  void (*getMassDensityModel) (void* this, struct X3DNode result);

  /** Assign Sphere|Box|Cone value (using a properly typed node) to inputOutput Sphere|Box|Cone type field named "massDensityModel". */
  void (*setMassDensityModel) (void* this, struct X3DNode node);

  /** Assign Sphere|Box|Cone value (using a properly typed protoInstance) */
  void (*setMassDensityModel2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** RigidBodyCollection defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject.
  * RigidBodyCollection represents a system of bodies that interact within a single physics model. */

struct RigidBodyCollection
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide SFBool value from inputOutput SFBool field named "autoDisable". */
  SFBool (*getAutoDisable) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "autoDisable". */
  void (*setAutoDisable) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "constantForceMix". */
  float (*getConstantForceMix) (void* this);

  /** Assign float value to inputOutput SFFloat field named "constantForceMix". */
  void (*setConstantForceMix) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "contactSurfaceThickness". */
  float (*getContactSurfaceThickness) (void* this);

  /** Assign float value to inputOutput SFFloat field named "contactSurfaceThickness". */
  void (*setContactSurfaceThickness) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "disableAngularSpeed". */
  float (*getDisableAngularSpeed) (void* this);

  /** Assign float value to inputOutput SFFloat field named "disableAngularSpeed". */
  void (*setDisableAngularSpeed) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "disableLinearSpeed". */
  float (*getDisableLinearSpeed) (void* this);

  /** Assign float value to inputOutput SFFloat field named "disableLinearSpeed". */
  void (*setDisableLinearSpeed) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "disableTime". */
  double (*getDisableTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "disableTime". */
  void (*setDisableTime) (void* this, double timestamp)

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "errorCorrection". */
  float (*getErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "errorCorrection". */
  void (*setErrorCorrection) (void* this, float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "gravity". */
  void (*getGravity) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "gravity". */
  void (*setGravity) (void* this, float* value);

  /** Provide int value from inputOutput SFInt32 field named "iterations". */
  int (*getIterations) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "iterations". */
  void (*setIterations) (void* this, int value);

  /** Provide float value from inputOutput SFFloat field named "maxCorrectionSpeed". */
  float (*getMaxCorrectionSpeed) (void* this);

  /** Assign float value to inputOutput SFFloat field named "maxCorrectionSpeed". */
  void (*setMaxCorrectionSpeed) (void* this, float value);

  /** Provide SFBool value from inputOutput SFBool field named "preferAccuracy". */
  SFBool (*getPreferAccuracy) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "preferAccuracy". */
  void (*setPreferAccuracy) (void* this, SFBool value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign Contact* value (using a properly typed node array) to inputOnly Contact type field named "set_contacts". */
  void (*setContacts) (void* this, Contact* nodes);

  /** Assign single Contact* value (using a properly typed node) as the MFNode array for inputOnly field named "set_contacts" */
  void (*setContacts2) (void* this, Contact* node);

  /** Assign Contact* value (using a properly typed protoInstance array) to inputOnly Contact type field named "set_contacts". */
  void (*setContacts3) (void* this, struct X3DPrototypeInstance node);

  /** Assign Contact* value (using a properly typed node array) to inputOnly Contact type field named "set_contacts". */
  void (*setContacts4) (void* this, struct X3DNode* nodes);

  /** Provide RigidBody* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput RigidBody type field named "bodies". */
  void (*getBodies) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "bodies" array */
  int (*getNumBodies) (void* this);

  /** Assign RigidBody* value (using a properly typed node array) to inputOutput RigidBody type field named "bodies". */
  void (*setBodies) (void* this, RigidBody* nodes);

  /** Assign single RigidBody* value (using a properly typed node) as the MFNode array for inputOutput field named "bodies" */
  void (*setBodies2) (void* this, RigidBody* node);

  /** Assign RigidBody* value (using a properly typed protoInstance array) to inputOutput RigidBody type field named "bodies". */
  void (*setBodies3) (void* this, struct X3DPrototypeInstance node);

  /** Assign RigidBody* value (using a properly typed node array) to inputOutput RigidBody type field named "bodies". */
  void (*setBodies4) (void* this, struct X3DNode* nodes);

  /** Provide X3DRigidJointNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DRigidJointNode type field named "joints". */
  void (*getJoints) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "joints" array */
  int (*getNumJoints) (void* this);

  /** Assign X3DRigidJointNode* value (using a properly typed node array) to inputOutput X3DRigidJointNode type field named "joints". */
  void (*setJoints) (void* this, X3DRigidJointNode* nodes);

  /** Assign single X3DRigidJointNode* value (using a properly typed node) as the MFNode array for inputOutput field named "joints" */
  void (*setJoints2) (void* this, X3DRigidJointNode* node);

  /** Assign X3DRigidJointNode* value (using a properly typed protoInstance array) to inputOutput X3DRigidJointNode type field named "joints". */
  void (*setJoints3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DRigidJointNode* value (using a properly typed node array) to inputOutput X3DRigidJointNode type field named "joints". */
  void (*setJoints4) (void* this, struct X3DNode* nodes);

  /** Provide CollisionCollection value (using a properly typed node or X3DPrototypeInstance) from initializeOnly CollisionCollection type field named "collider". */
  void (*getCollider) (void* this, struct X3DNode result);

  /** Assign CollisionCollection value (using a properly typed node) to initializeOnly CollisionCollection type field named "collider". */
  void (*setCollider) (void* this, CollisionCollection node);

  /** Assign CollisionCollection value (using a properly typed protoInstance) */
  void (*setCollider2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ROUTE defines a node interface that extends interfaces X3DStatement, X3DChildNode.
  * ROUTE connects output fields of event-producing nodes to input fields of event-consuming nodes. */

struct ROUTE
{
  struct X3DStatement*  extNode;
  struct X3DChildNode*  extNode1;

  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "fromNode". */
  xs:IDREF (*getFromNode) (void* this);

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "fromNode". */
  void (*setFromNode) (void* this, xs:IDREF value);

  /** Provide string value from inputOutput SFString field named "fromField". */
  string (*getFromField) (void* this);

  /** Assign string value to inputOutput SFString field named "fromField". */
  void (*setFromField) (void* this, string value);

  /** Provide xs:IDREF value from inputOutput xs:IDREF type field named "toNode". */
  xs:IDREF (*getToNode) (void* this);

  /** Assign xs:IDREF value to inputOutput xs:IDREF type field named "toNode". */
  void (*setToNode) (void* this, xs:IDREF value);

  /** Provide string value from inputOutput SFString field named "toField". */
  string (*getToField) (void* this);

  /** Assign string value to inputOutput SFString field named "toField". */
  void (*setToField) (void* this, string value);
}
;/** ScalarChaser defines a node interface that extends interface X3DChaserNode. */

struct ScalarChaser
{
  struct X3DChaserNode*  extNode;

  /** Assign float value to inputOnly SFFloat field named "set_destination". */
  void (*setDestination) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_value". */
  void (*setValue) (void* this, float value);

  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float (*getValue) (void* this);

  /** Provide float value from initializeOnly SFFloat field named "initialDestination". */
  float (*getInitialDestination) (void* this);

  /** Assign float value to initializeOnly SFFloat field named "initialDestination". */
  void (*setInitialDestination) (void* this, float value);

  /** Provide float value from initializeOnly SFFloat field named "initialValue". */
  float (*getInitialValue) (void* this);

  /** Assign float value to initializeOnly SFFloat field named "initialValue". */
  void (*setInitialValue) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from initializeOnly SFTime field named "duration". */
  double (*getDuration) (void* this);

  /** Assign double value in seconds [0,∞) to initializeOnly SFTime field named "duration". */
  void (*setDuration) (void* this, double timestamp)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ScalarDamper defines a node interface that extends interface X3DDamperNode. */

struct ScalarDamper
{
  struct X3DDamperNode*  extNode;

  /** Assign float value to inputOnly SFFloat field named "set_destination". */
  void (*setDestination) (void* this, float value);

  /** Assign float value to inputOnly SFFloat field named "set_value". */
  void (*setValue) (void* this, float value);

  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float (*getValue) (void* this);

  /** Provide float value from initializeOnly SFFloat field named "initialDestination". */
  float (*getInitialDestination) (void* this);

  /** Assign float value to initializeOnly SFFloat field named "initialDestination". */
  void (*setInitialDestination) (void* this, float value);

  /** Provide float value from initializeOnly SFFloat field named "initialValue". */
  float (*getInitialValue) (void* this);

  /** Assign float value to initializeOnly SFFloat field named "initialValue". */
  void (*setInitialValue) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tau". */
  double (*getTau) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tau". */
  void (*setTau) (void* this, double timestamp)

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float (*getTolerance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void (*setTolerance) (void* this, float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ScalarInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct ScalarInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float (*getValue) (void* this);

  /** Provide float* value from inputOutput MFFloat field named "keyValue". */
  float* (*getKeyValue) (void* this);

  /** Provide number of primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "keyValue" */
  void (*setKeyValue2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Scene defines a node interface that extends interface X3DStatement.
  * Scene is the implicit root node of the X3D scene graph. */

struct Scene
{
  struct X3DStatement*  extNode;

  /** Provide X3DChildNode|X3DMetadataObject|LayerSet* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode|X3DMetadataObject|LayerSet type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode|X3DMetadataObject|LayerSet* value (using a properly typed node array) to inputOutput X3DChildNode|X3DMetadataObject|LayerSet type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign X3DChildNode|X3DMetadataObject|LayerSet* value (using a properly typed protoInstance array) to inputOutput X3DChildNode|X3DMetadataObject|LayerSet type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);
}
;/** ScreenFontStyle defines a node interface that extends interface X3DFontStyleNode. */

struct ScreenFontStyle
{
  struct X3DFontStyleNode*  extNode;

  /** Provide string value from inputOutput SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to inputOutput SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide string* value from inputOutput MFString field named "family". */
  string* (*getFamily) (void* this);

  /** Provide number of primitive values in "family" array */
  int (*getNumFamily) (void* this);

  /** Assign string* value to inputOutput MFString field named "family". */
  void (*setFamily) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "family". */
  string* (*getFamily) (void* this);

  /** Provide number of primitive values in "family" array */
  int (*getNumFamily) (void* this);

  /** Assign string* value to inputOutput MFString field named "family". */
  void (*setFamily) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "family" */
  void (*setFamily2) (void* this, string* value);

  /** Provide SFBool value from inputOutput SFBool field named "horizontal". */
  SFBool (*getHorizontal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "horizontal". */
  void (*setHorizontal) (void* this, SFBool value);

  /** Provide string* value from inputOutput MFString field named "justify". */
  string* (*getJustify) (void* this);

  /** Provide number of primitive values in "justify" array */
  int (*getNumJustify) (void* this);

  /** Assign string* value to inputOutput MFString field named "justify". */
  void (*setJustify) (void* this, string* values);

  /** Provide string value from initializeOnly SFString field named "language". */
  string (*getLanguage) (void* this);

  /** Assign string value to initializeOnly SFString field named "language". */
  void (*setLanguage) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "leftToRight". */
  SFBool (*getLeftToRight) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "leftToRight". */
  void (*setLeftToRight) (void* this, SFBool value);

  /** Provide float value (0,∞) from inputOutput SFFloat field named "pointSize". */
  float (*getPointSize) (void* this);

  /** Assign float value (0,∞) to inputOutput SFFloat field named "pointSize". */
  void (*setPointSize) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "spacing". */
  float (*getSpacing) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "spacing". */
  void (*setSpacing) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "style". */
  string (*getStyle) (void* this);

  /** Assign string value to inputOutput SFString field named "style". */
  void (*setStyle) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "topToBottom". */
  SFBool (*getTopToBottom) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "topToBottom". */
  void (*setTopToBottom) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ScreenGroup defines a node interface that extends interface X3DGroupingNode. */

struct ScreenGroup
{
  struct X3DGroupingNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Script defines a node interface that extends interface X3DScriptNode. */

struct Script
{
  struct X3DScriptNode*  extNode;

  /** Provide string value from inputOutput SFString field named "sourceCode". */
  string (*getSourceCode) (void* this);

  /** Assign string value to inputOutput SFString field named "sourceCode". */
  void (*setSourceCode) (void* this, string value);

  /** Provide SFBool value from initializeOnly SFBool field named "directOutput". */
  SFBool (*getDirectOutput) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "directOutput". */
  void (*setDirectOutput) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "mustEvaluate". */
  SFBool (*getMustEvaluate) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "mustEvaluate". */
  void (*setMustEvaluate) (void* this, SFBool value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  void (*getField) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "field" array */
  int (*getNumField) (void* this);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField) (void* this, field* nodes);

  /** Assign single field* value (using a properly typed node) as the MFNode array for inputOutput field named "field" */
  void (*setField2) (void* this, field* node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void (*setField3) (void* this, struct X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SegmentedVolumeData defines a node interface that extends interface X3DVolumeDataNode. */

struct SegmentedVolumeData
{
  struct X3DVolumeDataNode*  extNode;

  /** Provide SFBool* value from inputOutput MFBool field named "segmentEnabled". */
  SFBool* (*getSegmentEnabled) (void* this);

  /** Provide number of primitive values in "segmentEnabled" array */
  int (*getNumSegmentEnabled) (void* this);

  /** Assign SFBool* value to inputOutput MFBool field named "segmentEnabled". */
  void (*setSegmentEnabled) (void* this, SFBool* values);

  /** Assign single SFBool* value as the MFBool array for inputOutput field named "segmentEnabled" */
  void (*setSegmentEnabled2) (void* this, SFBool* value);

  /** Provide X3DVolumeRenderStyleNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*getRenderStyle) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "renderStyle" array */
  int (*getNumRenderStyle) (void* this);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle) (void* this, X3DVolumeRenderStyleNode* nodes);

  /** Assign single X3DVolumeRenderStyleNode* value (using a properly typed node) as the MFNode array for inputOutput field named "renderStyle" */
  void (*setRenderStyle2) (void* this, X3DVolumeRenderStyleNode* node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed protoInstance array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVolumeRenderStyleNode* value (using a properly typed node array) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle4) (void* this, struct X3DNode* nodes);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "segmentIdentifiers". */
  void (*getSegmentIdentifiers) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "segmentIdentifiers". */
  void (*setSegmentIdentifiers) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setSegmentIdentifiers2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  void (*getVoxels) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void (*setVoxels) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setVoxels2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "dimensions". */
  void (*getDimensions) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "dimensions". */
  void (*setDimensions) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ShadedVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode.
  * All fields fully supported except shadows supported with at least Phong shading at level 3. All fields fully supported with at least Phong shading and Henyey-Greenstein phase function, shadows fully supported at level 4. */

struct ShadedVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide string value from initializeOnly SFString field named "phaseFunction". */
  string (*getPhaseFunction) (void* this);

  /** Assign string value to initializeOnly SFString field named "phaseFunction". */
  void (*setPhaseFunction) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "lighting". */
  SFBool (*getLighting) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "lighting". */
  void (*setLighting) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "shadows". */
  SFBool (*getShadows) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "shadows". */
  void (*setShadows) (void* this, SFBool value);

  /** Provide string value from initializeOnly SFString field named "phaseFunction". */
  string (*getPhaseFunction) (void* this);

  /** Assign string value to initializeOnly SFString field named "phaseFunction". */
  void (*setPhaseFunction) (void* this, string value);

  /** Provide X3DMaterialNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMaterialNode type field named "material". */
  void (*getMaterial) (void* this, struct X3DNode result);

  /** Assign X3DMaterialNode value (using a properly typed node) to inputOutput X3DMaterialNode type field named "material". */
  void (*setMaterial) (void* this, X3DMaterialNode node);

  /** Assign X3DMaterialNode value (using a properly typed protoInstance) */
  void (*setMaterial2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*getSurfaceNormals) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*setSurfaceNormals) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setSurfaceNormals2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ShaderPart defines a node interface that extends interfaces X3DNodeMixedContent, X3DUrlObject.
  * ShaderPart can contain a CDATA section of plain-text source code. */

struct ShaderPart
{
  struct X3DNodeMixedContent*  extNode;
  struct X3DUrlObject*  extNode1;

  /** Provide string value from initializeOnly SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to initializeOnly SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "sourceCode". */
  string (*getSourceCode) (void* this);

  /** Assign string value to inputOutput SFString field named "sourceCode". */
  void (*setSourceCode) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to initializeOnly SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ShaderProgram defines a node interface that extends interfaces X3DNodeMixedContent, X3DUrlObject, X3DProgrammableShaderObject.
  * ShaderProgram can contain field declarations and a CDATA section of plain-text source code. */

struct ShaderProgram
{
  struct X3DNodeMixedContent*  extNode;
  struct X3DUrlObject*  extNode1;
  struct X3DProgrammableShaderObject*  extNode2;

  /** Provide string value from initializeOnly SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to initializeOnly SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "sourceCode". */
  string (*getSourceCode) (void* this);

  /** Assign string value to inputOutput SFString field named "sourceCode". */
  void (*setSourceCode) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "type". */
  string (*getType) (void* this);

  /** Assign string value to initializeOnly SFString field named "type". */
  void (*setType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "load". */
  SFBool (*getLoad) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "load". */
  void (*setLoad) (void* this, SFBool value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefresh". */
  double (*getAutoRefresh) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefresh". */
  void (*setAutoRefresh) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "autoRefreshTimeLimit". */
  double (*getAutoRefreshTimeLimit) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "autoRefreshTimeLimit". */
  void (*setAutoRefreshTimeLimit) (void* this, double timestamp)

  /** Provide string* value from inputOutput MFString field named "url". */
  string* (*getUrl) (void* this);

  /** Provide number of primitive values in "url" array */
  int (*getNumUrl) (void* this);

  /** Assign string* value to inputOutput MFString field named "url". */
  void (*setUrl) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "url" */
  void (*setUrl2) (void* this, string* value);

  /** Provide field* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput field type field named "field". */
  void (*getField) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "field" array */
  int (*getNumField) (void* this);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField) (void* this, field* nodes);

  /** Assign single field* value (using a properly typed node) as the MFNode array for inputOutput field named "field" */
  void (*setField2) (void* this, field* node);

  /** Assign field* value (using a properly typed protoInstance array) to inputOutput field type field named "field". */
  void (*setField3) (void* this, struct X3DPrototypeInstance node);

  /** Assign field* value (using a properly typed node array) to inputOutput field type field named "field". */
  void (*setField4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Shape defines a node interface that extends interface X3DShapeNode. */

struct Shape
{
  struct X3DShapeNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "castShadow". */
  SFBool (*getCastShadow) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "castShadow". */
  void (*setCastShadow) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DAppearanceNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DAppearanceNode type field named "appearance". */
  void (*getAppearance) (void* this, struct X3DNode result);

  /** Assign X3DAppearanceNode value (using a properly typed node) to inputOutput X3DAppearanceNode type field named "appearance". */
  void (*setAppearance) (void* this, X3DAppearanceNode node);

  /** Assign X3DAppearanceNode value (using a properly typed protoInstance) */
  void (*setAppearance2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "geometry". */
  void (*getGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "geometry". */
  void (*setGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SignalPdu defines a node interface that extends interfaces X3DNetworkSensorNode, X3DBoundedObject. */

struct SignalPdu
{
  struct X3DNetworkSensorNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkReader". */
  SFBool (*getIsNetworkReader) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkWriter". */
  SFBool (*getIsNetworkWriter) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  SFBool (*getIsRtpHeaderHeard) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isStandAlone". */
  SFBool (*getIsStandAlone) (void* this);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "timestamp". */
  double (*getTimestamp) (void* this);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "whichGeometry". */
  int (*getWhichGeometry) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "whichGeometry". */
  void (*setWhichGeometry) (void* this, int value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "readInterval". */
  double (*getReadInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "readInterval". */
  void (*setReadInterval) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "writeInterval". */
  double (*getWriteInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "writeInterval". */
  void (*setWriteInterval) (void* this, double timestamp)

  /** Provide string value from inputOutput SFString field named "networkMode". */
  string (*getNetworkMode) (void* this);

  /** Assign string value to inputOutput SFString field named "networkMode". */
  void (*setNetworkMode) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int (*getSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void (*setSiteID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int (*getApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void (*setApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int (*getEntityID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void (*setEntityID) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "address". */
  string (*getAddress) (void* this);

  /** Assign string value to inputOutput SFString field named "address". */
  void (*setAddress) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int (*getPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void (*setPort) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "multicastRelayHost". */
  string (*getMulticastRelayHost) (void* this);

  /** Assign string value to inputOutput SFString field named "multicastRelayHost". */
  void (*setMulticastRelayHost) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int (*getMulticastRelayPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void (*setMulticastRelayPort) (void* this, int value);

  /** Provide SFBool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  SFBool (*getRtpHeaderExpected) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void (*setRtpHeaderExpected) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "radioID". */
  int (*getRadioID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioID". */
  void (*setRadioID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "encodingScheme". */
  int (*getEncodingScheme) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "encodingScheme". */
  void (*setEncodingScheme) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "tdlType". */
  int (*getTdlType) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "tdlType". */
  void (*setTdlType) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "sampleRate". */
  int (*getSampleRate) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "sampleRate". */
  void (*setSampleRate) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "samples". */
  int (*getSamples) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "samples". */
  void (*setSamples) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "dataLength". */
  int (*getDataLength) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "dataLength". */
  void (*setDataLength) (void* this, int value);

  /** Provide MFInt32 value from inputOutput MFInt32 field named "data". */
  MFInt32 (*getData) (void* this);

  /** Provide number of primitive values in "data" array */
  int (*getNumData) (void* this);

  /** Assign MFInt32 value to inputOutput MFInt32 field named "data". */
  void (*setData) (void* this, MFInt32 values);

  /** Assign single SFInt32 value as the MFInt32 array for inputOutput field named "data" */
  void (*setData2) (void* this, SFInt32 value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  void (*getGeoCoords) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void (*setGeoCoords) (void* this, double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SilhouetteEnhancementVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct SilhouetteEnhancementVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide float value [0,1) from inputOutput SFFloat field named "silhouetteBoundaryOpacity". */
  float (*getSilhouetteBoundaryOpacity) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "silhouetteBoundaryOpacity". */
  void (*setSilhouetteBoundaryOpacity) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "silhouetteRetainedOpacity". */
  float (*getSilhouetteRetainedOpacity) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "silhouetteRetainedOpacity". */
  void (*setSilhouetteRetainedOpacity) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "silhouetteSharpness". */
  float (*getSilhouetteSharpness) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "silhouetteSharpness". */
  void (*setSilhouetteSharpness) (void* this, float value)

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*getSurfaceNormals) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*setSurfaceNormals) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setSurfaceNormals2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SingleAxisHingeJoint defines a node interface that extends interface X3DRigidJointNode.
  * SingleAxisHingeJoint has single axis about which to rotate, similar to a traditional door hinge. Contains two RigidBody nodes (containerField values body1, body2). */

struct SingleAxisHingeJoint
{
  struct X3DRigidJointNode*  extNode;

  /** Provide float value in radians from outputOnly SFFloat field named "angle". */
  float (*getAngle) (void* this);

  /** Provide float value in radians from outputOnly SFFloat field named "angleRate". */
  float (*getAngleRate) (void* this);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  void (*getBody1AnchorPoint) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  void (*getBody2AnchorPoint) (void* this, float* result);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  void (*getAnchorPoint) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void (*setAnchorPoint) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis". */
  void (*getAxis) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis". */
  void (*setAxis) (void* this, float* value);

  /** Provide float value in radians from inputOutput SFFloat field named "maxAngle". */
  float (*getMaxAngle) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "maxAngle". */
  void (*setMaxAngle) (void* this, float angle);

  /** Provide float value in radians from inputOutput SFFloat field named "minAngle". */
  float (*getMinAngle) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "minAngle". */
  void (*setMinAngle) (void* this, float angle);

  /** Provide float value from inputOutput SFFloat field named "stopBounce". */
  float (*getStopBounce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stopBounce". */
  void (*setStopBounce) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stopErrorCorrection". */
  float (*getStopErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stopErrorCorrection". */
  void (*setStopErrorCorrection) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "forceOutput" */
  void (*setForceOutput2) (void* this, string* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  void (*getBody1) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void (*setBody1) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  void (*getBody2) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void (*setBody2) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody22) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SliderJoint defines a node interface that extends interface X3DRigidJointNode.
  * SliderJoint constrains all movement between body1 and body2 along a single axis. Contains two RigidBody nodes (containerField values body1, body2). */

struct SliderJoint
{
  struct X3DRigidJointNode*  extNode;

  /** Provide float value from outputOnly SFFloat field named "separation". */
  float (*getSeparation) (void* this);

  /** Provide float value from outputOnly SFFloat field named "separationRate". */
  float (*getSeparationRate) (void* this);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis". */
  void (*getAxis) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis". */
  void (*setAxis) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "maxSeparation". */
  float (*getMaxSeparation) (void* this);

  /** Assign float value to inputOutput SFFloat field named "maxSeparation". */
  void (*setMaxSeparation) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "minSeparation". */
  float (*getMinSeparation) (void* this);

  /** Assign float value to inputOutput SFFloat field named "minSeparation". */
  void (*setMinSeparation) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "sliderForce". */
  float (*getSliderForce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "sliderForce". */
  void (*setSliderForce) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stopBounce". */
  float (*getStopBounce) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stopBounce". */
  void (*setStopBounce) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "stopErrorCorrection". */
  float (*getStopErrorCorrection) (void* this);

  /** Assign float value to inputOutput SFFloat field named "stopErrorCorrection". */
  void (*setStopErrorCorrection) (void* this, float value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "forceOutput" */
  void (*setForceOutput2) (void* this, string* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  void (*getBody1) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void (*setBody1) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  void (*getBody2) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void (*setBody2) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody22) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Sound defines a node interface that extends interface X3DSoundNode. */

struct Sound
{
  struct X3DSoundNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  void (*getLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void (*setLocation) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "maxBack". */
  float (*getMaxBack) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "maxBack". */
  void (*setMaxBack) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "maxFront". */
  float (*getMaxFront) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "maxFront". */
  void (*setMaxFront) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "minBack". */
  float (*getMinBack) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "minBack". */
  void (*setMinBack) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "minFront". */
  float (*getMinFront) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "minFront". */
  void (*setMinFront) (void* this, float value)

  /** Provide float value from inputOutput SFFloat field named "priority". */
  float (*getPriority) (void* this);

  /** Assign float value to inputOutput SFFloat field named "priority". */
  void (*setPriority) (void* this, float value);

  /** Provide SFBool value from initializeOnly SFBool field named "spatialize". */
  SFBool (*getSpatialize) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "spatialize". */
  void (*setSpatialize) (void* this, SFBool value);

  /** Provide X3DSoundSourceNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSoundSourceNode type field named "source". */
  void (*getSource) (void* this, struct X3DNode result);

  /** Assign X3DSoundSourceNode value (using a properly typed node) to inputOutput X3DSoundSourceNode type field named "source". */
  void (*setSource) (void* this, X3DSoundSourceNode node);

  /** Assign X3DSoundSourceNode value (using a properly typed protoInstance) */
  void (*setSource2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SpatialSound defines a node interface that extends interface X3DSoundNode. */

struct SpatialSound
{
  struct X3DSoundNode*  extNode;

  /** Provide float value in radians [0,6.2832) from inputOutput SFFloat field named "coneInnerAngle". */
  float (*getConeInnerAngle) (void* this);

  /** Assign float value in radians [0,6.2832) to inputOutput SFFloat field named "coneInnerAngle". */
  void (*setConeInnerAngle) (void* this, float angle)

  /** Provide float value in radians [0,6.2832) from inputOutput SFFloat field named "coneOuterAngle". */
  float (*getConeOuterAngle) (void* this);

  /** Assign float value in radians [0,6.2832) to inputOutput SFFloat field named "coneOuterAngle". */
  void (*setConeOuterAngle) (void* this, float angle)

  /** Provide float value from inputOutput SFFloat field named "coneOuterGain". */
  float (*getConeOuterGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "coneOuterGain". */
  void (*setConeOuterGain) (void* this, float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "distanceModel". */
  string (*getDistanceModel) (void* this);

  /** Assign string value to inputOutput SFString field named "distanceModel". */
  void (*setDistanceModel) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "dopplerEnabled". */
  SFBool (*getDopplerEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "dopplerEnabled". */
  void (*setDopplerEnabled) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "enableHRTF". */
  SFBool (*getEnableHRTF) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enableHRTF". */
  void (*setEnableHRTF) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  void (*getLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void (*setLocation) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "maxDistance". */
  float (*getMaxDistance) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "maxDistance". */
  void (*setMaxDistance) (void* this, float value)

  /** Provide float value from inputOutput SFFloat field named "priority". */
  float (*getPriority) (void* this);

  /** Assign float value to inputOutput SFFloat field named "priority". */
  void (*setPriority) (void* this, float value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "referenceDistance". */
  float (*getReferenceDistance) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "referenceDistance". */
  void (*setReferenceDistance) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "rolloffFactor". */
  float (*getRolloffFactor) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "rolloffFactor". */
  void (*setRolloffFactor) (void* this, float value)

  /** Provide SFBool value from initializeOnly SFBool field named "spatialize". */
  SFBool (*getSpatialize) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "spatialize". */
  void (*setSpatialize) (void* this, SFBool value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Sphere defines a node interface that extends interface X3DGeometryNode. */

struct Sphere
{
  struct X3DGeometryNode*  extNode;

  /** Provide float value (0,∞) from initializeOnly SFFloat field named "radius". */
  float (*getRadius) (void* this);

  /** Assign float value (0,∞) to initializeOnly SFFloat field named "radius". */
  void (*setRadius) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SphereSensor defines a node interface that extends interface X3DDragSensorNode. */

struct SphereSensor
{
  struct X3DDragSensorNode*  extNode;

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "rotation_changed". */
  float* (*getRotation) (void* this);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "offset". */
  float* (*getOffset) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "offset". */
  void (*setOffset) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "trackPoint_changed". */
  void (*getTrackPoint) (void* this, float* result);

  /** Provide SFBool value from inputOutput SFBool field named "autoOffset". */
  SFBool (*getAutoOffset) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "autoOffset". */
  void (*setAutoOffset) (void* this, SFBool value);

  /** Provide SFBool value from outputOnly SFBool field named "isOver". */
  SFBool (*getIsOver) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SplinePositionInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct SplinePositionInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide SFBool value from initializeOnly SFBool field named "closed". */
  SFBool (*getClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "closed". */
  void (*setClosed) (void* this, SFBool value);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "keyVelocity". */
  void (*getKeyVelocity) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "keyVelocity" array */
  int (*getNumKeyVelocity) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "keyVelocity". */
  void (*setKeyVelocity) (void* this, float* values);

  /** Provide SFBool value from inputOutput SFBool field named "normalizeVelocity". */
  SFBool (*getNormalizeVelocity) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "normalizeVelocity". */
  void (*setNormalizeVelocity) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SplinePositionInterpolator2D defines a node interface that extends interface X3DInterpolatorNode. */

struct SplinePositionInterpolator2D
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide SFBool value from initializeOnly SFBool field named "closed". */
  SFBool (*getClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "closed". */
  void (*setClosed) (void* this, SFBool value);

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyValue". */
  void (*getKeyValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "keyVelocity". */
  void (*getKeyVelocity) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "keyVelocity" array */
  int (*getNumKeyVelocity) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "keyVelocity". */
  void (*setKeyVelocity) (void* this, float* values);

  /** Provide SFBool value from inputOutput SFBool field named "normalizeVelocity". */
  SFBool (*getNormalizeVelocity) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "normalizeVelocity". */
  void (*setNormalizeVelocity) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SplineScalarInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct SplineScalarInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide float value from outputOnly SFFloat field named "value_changed". */
  float (*getValue) (void* this);

  /** Provide SFBool value from initializeOnly SFBool field named "closed". */
  SFBool (*getClosed) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "closed". */
  void (*setClosed) (void* this, SFBool value);

  /** Provide float* value from inputOutput MFFloat field named "keyValue". */
  float* (*getKeyValue) (void* this);

  /** Provide number of primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "keyValue" */
  void (*setKeyValue2) (void* this, float* value);

  /** Provide float* value from inputOutput MFFloat field named "keyVelocity". */
  float* (*getKeyVelocity) (void* this);

  /** Provide number of primitive values in "keyVelocity" array */
  int (*getNumKeyVelocity) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "keyVelocity". */
  void (*setKeyVelocity) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "keyVelocity" */
  void (*setKeyVelocity2) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "normalizeVelocity". */
  SFBool (*getNormalizeVelocity) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "normalizeVelocity". */
  void (*setNormalizeVelocity) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SpotLight defines a node interface that extends interface X3DLightNode.
  * Linear attenuation may occur at level 2, full support at level 3. */

struct SpotLight
{
  struct X3DLightNode*  extNode;

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "attenuation". */
  void (*getAttenuation) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "attenuation". */
  void (*setAttenuation) (void* this, float* value);

  /** Provide float value (0,1.570796) from inputOutput SFFloat field named "beamWidth". */
  float (*getBeamWidth) (void* this);

  /** Assign float value (0,1.570796) to inputOutput SFFloat field named "beamWidth". */
  void (*setBeamWidth) (void* this, float value)

  /** Provide float value in radians (0,1.570796) from inputOutput SFFloat field named "cutOffAngle". */
  float (*getCutOffAngle) (void* this);

  /** Assign float value in radians (0,1.570796) to inputOutput SFFloat field named "cutOffAngle". */
  void (*setCutOffAngle) (void* this, float angle)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  void (*getLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void (*setLocation) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "radius". */
  float (*getRadius) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "radius". */
  void (*setRadius) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "global". */
  SFBool (*getGlobal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "global". */
  void (*setGlobal) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "shadows". */
  SFBool (*getShadows) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "shadows". */
  void (*setShadows) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float (*getShadowIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void (*setShadowIntensity) (void* this, float value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SquadOrientationInterpolator defines a node interface that extends interface X3DInterpolatorNode. */

struct SquadOrientationInterpolator
{
  struct X3DInterpolatorNode*  extNode;

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "value_changed". */
  float* (*getValue) (void* this);

  /** Provide 4-tuple float* value in radians from inputOutput MFRotation field named "keyValue". */
  float* (*getKeyValue) (void* this);

  /** Provide number of 4-tuple primitive values in "keyValue" array */
  int (*getNumKeyValue) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput MFRotation field named "keyValue". */
  void (*setKeyValue) (void* this, float* values);

  /** Provide SFBool value from inputOutput SFBool field named "normalizeVelocity". */
  SFBool (*getNormalizeVelocity) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "normalizeVelocity". */
  void (*setNormalizeVelocity) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign float value to inputOnly SFFloat field named "set_fraction". */
  void (*setFraction) (void* this, float value);

  /** Provide float* value from inputOutput MFFloat field named "key". */
  float* (*getKey) (void* this);

  /** Provide number of primitive values in "key" array */
  int (*getNumKey) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "key". */
  void (*setKey) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "key" */
  void (*setKey2) (void* this, float* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** StaticGroup defines a node interface that extends interfaces X3DChildNode, X3DBoundedObject.
  * StaticGroup is similar to Group node but does not allow access to children after creation time. */

struct StaticGroup
{
  struct X3DChildNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from initializeOnly X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for initializeOnly field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to initializeOnly X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to initializeOnly X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** StreamAudioDestination defines a node interface that extends interface X3DSoundDestinationNode. */

struct StreamAudioDestination
{
  struct X3DSoundDestinationNode*  extNode;

  /** Provide string value from inputOutput SFString field named "streamIdentifier". */
  string (*getStreamIdentifier) (void* this);

  /** Assign string value to inputOutput SFString field named "streamIdentifier". */
  void (*setStreamIdentifier) (void* this, string value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide string value from inputOutput SFString field named "mediaDeviceID". */
  string (*getMediaDeviceID) (void* this);

  /** Assign string value to inputOutput SFString field named "mediaDeviceID". */
  void (*setMediaDeviceID) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** StreamAudioSource defines a node interface that extends interface X3DSoundSourceNode. */

struct StreamAudioSource
{
  struct X3DSoundSourceNode*  extNode;

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "streamIdentifier". */
  string (*getStreamIdentifier) (void* this);

  /** Assign string value to inputOutput SFString field named "streamIdentifier". */
  void (*setStreamIdentifier) (void* this, string value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** StringSensor defines a node interface that extends interface X3DKeyDeviceSensorNode. */

struct StringSensor
{
  struct X3DKeyDeviceSensorNode*  extNode;

  /** Provide string value from outputOnly SFString field named "enteredText". */
  string (*getEnteredText) (void* this);

  /** Provide string value from outputOnly SFString field named "finalText". */
  string (*getFinalText) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "deletionAllowed". */
  SFBool (*getDeletionAllowed) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "deletionAllowed". */
  void (*setDeletionAllowed) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** SurfaceEmitter defines a node interface that extends interface X3DParticleEmitterNode. */

struct SurfaceEmitter
{
  struct X3DParticleEmitterNode*  extNode;

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 (*getCoordIndex) (void* this);

  /** Provide number of primitive values in "coordIndex" array */
  int (*getNumCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from initializeOnly X3DGeometryNode type field named "surface". */
  void (*getSurface) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to initializeOnly X3DGeometryNode type field named "surface". */
  void (*setSurface) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setSurface2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "variation". */
  float (*getVariation) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "variation". */
  void (*setVariation) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "surfaceArea". */
  float (*getSurfaceArea) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "surfaceArea". */
  void (*setSurfaceArea) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Switch defines a node interface that extends interface X3DGroupingNode. */

struct Switch
{
  struct X3DGroupingNode*  extNode;

  /** Provide int value [-1,∞) from inputOutput SFInt32 field named "whichChoice". */
  int (*getWhichChoice) (void* this);

  /** Assign int value [-1,∞) to inputOutput SFInt32 field named "whichChoice". */
  void (*setWhichChoice) (void* this, int value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TexCoordChaser2D defines a node interface that extends interface X3DChaserNode. */

struct TexCoordChaser2D
{
  struct X3DChaserNode*  extNode;

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_destination". */
  void (*setDestination) (void* this, float* values);

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_value". */
  void (*setValue) (void* this, float* values);

  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "value_changed" array */
  int (*getNumValue) (void* this);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "initialDestination" array */
  int (*getNumInitialDestination) (void* this);

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* values);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "initialValue" array */
  int (*getNumInitialValue) (void* this);

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialValue". */
  void (*setInitialValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from initializeOnly SFTime field named "duration". */
  double (*getDuration) (void* this);

  /** Assign double value in seconds [0,∞) to initializeOnly SFTime field named "duration". */
  void (*setDuration) (void* this, double timestamp)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TexCoordDamper2D defines a node interface that extends interface X3DDamperNode. */

struct TexCoordDamper2D
{
  struct X3DDamperNode*  extNode;

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_destination". */
  void (*setDestination) (void* this, float* values);

  /** Assign 2-tuple float* value to inputOnly MFVec2f field named "set_value". */
  void (*setValue) (void* this, float* values);

  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "value_changed". */
  void (*getValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "value_changed" array */
  int (*getNumValue) (void* this);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialDestination". */
  void (*getInitialDestination) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "initialDestination" array */
  int (*getNumInitialDestination) (void* this);

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialDestination". */
  void (*setInitialDestination) (void* this, float* values);

  /** Provide 2-tuple float* value from initializeOnly MFVec2f field named "initialValue". */
  void (*getInitialValue) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "initialValue" array */
  int (*getNumInitialValue) (void* this);

  /** Assign 2-tuple float* value to initializeOnly MFVec2f field named "initialValue". */
  void (*setInitialValue) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tau". */
  double (*getTau) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tau". */
  void (*setTau) (void* this, double timestamp)

  /** Provide float value from inputOutput SFFloat field named "tolerance". */
  float (*getTolerance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "tolerance". */
  void (*setTolerance) (void* this, float value);

  /** Provide int value [0,5) from initializeOnly SFInt32 field named "order". */
  int (*getOrder) (void* this);

  /** Assign int value [0,5) to initializeOnly SFInt32 field named "order". */
  void (*setOrder) (void* this, int value)

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Text defines a node interface that extends interface X3DGeometryNode. */

struct Text
{
  struct X3DGeometryNode*  extNode;

  /** Provide 2-tuple float* value from outputOnly MFVec2f field named "lineBounds". */
  void (*getLineBounds) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "lineBounds" array */
  int (*getNumLineBounds) (void* this);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "origin". */
  void (*getOrigin) (void* this, float* result);

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "textBounds". */
  void (*getTextBounds) (void* this, float* result);

  /** Provide string* value from inputOutput MFString field named "string". */
  string* (*getString) (void* this);

  /** Provide number of primitive values in "string" array */
  int (*getNumString) (void* this);

  /** Assign string* value to inputOutput MFString field named "string". */
  void (*setString) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "string" */
  void (*setString2) (void* this, string* value);

  /** Provide float* value (-∞,∞) from inputOutput MFFloat field named "length". */
  float* (*getLength) (void* this);

  /** Provide number of primitive values in "length" array */
  int (*getNumLength) (void* this);

  /** Assign float* value (-∞,∞) to inputOutput MFFloat field named "length". */
  void (*setLength) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for inputOutput field named "length" */
  void (*setLength2) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "maxExtent". */
  float (*getMaxExtent) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "maxExtent". */
  void (*setMaxExtent) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DFontStyleNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DFontStyleNode type field named "fontStyle". */
  void (*getFontStyle) (void* this, struct X3DNode result);

  /** Assign X3DFontStyleNode value (using a properly typed node) to inputOutput X3DFontStyleNode type field named "fontStyle". */
  void (*setFontStyle) (void* this, X3DFontStyleNode node);

  /** Assign X3DFontStyleNode value (using a properly typed protoInstance) */
  void (*setFontStyle2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureBackground defines a node interface that extends interface X3DBackgroundNode. */

struct TextureBackground
{
  struct X3DBackgroundNode*  extNode;

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "backTexture". */
  void (*getBackTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "backTexture". */
  void (*setBackTexture) (void* this, struct X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void (*setBackTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "bottomTexture". */
  void (*getBottomTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "bottomTexture". */
  void (*setBottomTexture) (void* this, struct X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void (*setBottomTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "frontTexture". */
  void (*getFrontTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "frontTexture". */
  void (*setFrontTexture) (void* this, struct X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void (*setFrontTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "leftTexture". */
  void (*getLeftTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "leftTexture". */
  void (*setLeftTexture) (void* this, struct X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void (*setLeftTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "rightTexture". */
  void (*getRightTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "rightTexture". */
  void (*setRightTexture) (void* this, struct X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void (*setRightTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode|MultiTexture value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode|MultiTexture type field named "topTexture". */
  void (*getTopTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed node) to inputOutput X3DTexture2DNode|MultiTexture type field named "topTexture". */
  void (*setTopTexture) (void* this, struct X3DNode node);

  /** Assign X3DTexture2DNode|MultiTexture value (using a properly typed protoInstance) */
  void (*setTopTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float* value in radians (-∞,∞) from inputOutput MFFloat field named "groundAngle". */
  float* (*getGroundAngle) (void* this);

  /** Provide number of primitive values in "groundAngle" array */
  int (*getNumGroundAngle) (void* this);

  /** Assign float* value in radians (-∞,∞) to inputOutput MFFloat field named "groundAngle". */
  void (*setGroundAngle) (void* this, float* angles);

  /** Assign single float* value in radians (-∞,∞) as the MFFloat array for inputOutput field named "groundAngle" */
  void (*setGroundAngle2) (void* this, float* angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "groundColor". */
  void (*getGroundColor) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "groundColor" array */
  int (*getNumGroundColor) (void* this);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "groundColor". */
  void (*setGroundColor) (void* this, float* colors)

  /** Provide float* value in radians (-∞,∞) from inputOutput MFFloat field named "skyAngle". */
  float* (*getSkyAngle) (void* this);

  /** Provide number of primitive values in "skyAngle" array */
  int (*getNumSkyAngle) (void* this);

  /** Assign float* value in radians (-∞,∞) to inputOutput MFFloat field named "skyAngle". */
  void (*setSkyAngle) (void* this, float* angles);

  /** Assign single float* value in radians (-∞,∞) as the MFFloat array for inputOutput field named "skyAngle" */
  void (*setSkyAngle2) (void* this, float* angle);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput MFColor field named "skyColor". */
  void (*getSkyColor) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "skyColor" array */
  int (*getNumSkyColor) (void* this);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput MFColor field named "skyColor". */
  void (*setSkyColor) (void* this, float* colors)

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float (*getTransparency) (void* this);

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void (*setTransparency) (void* this, float value);

  /** Assign SFBool value to inputOnly SFBool field named "set_bind". */
  void (*setBind) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double (*getBindTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isBound". */
  SFBool (*getIsBound) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureCoordinate defines a node interface that extends interface X3DSingleTextureCoordinateNode. */

struct TextureCoordinate
{
  struct X3DSingleTextureCoordinateNode*  extNode;

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "point". */
  void (*getPoint) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "point" array */
  int (*getNumPoint) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "point". */
  void (*setPoint) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "mapping". */
  string (*getMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "mapping". */
  void (*setMapping) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureCoordinate3D defines a node interface that extends interface X3DSingleTextureCoordinateNode. */

struct TextureCoordinate3D
{
  struct X3DSingleTextureCoordinateNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput MFVec3f field named "point". */
  void (*getPoint) (void* this, float* result);

  /** Provide number of 3-tuple primitive values in "point" array */
  int (*getNumPoint) (void* this);

  /** Assign 3-tuple float* value to inputOutput MFVec3f field named "point". */
  void (*setPoint) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "mapping". */
  string (*getMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "mapping". */
  void (*setMapping) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureCoordinate4D defines a node interface that extends interface X3DSingleTextureCoordinateNode. */

struct TextureCoordinate4D
{
  struct X3DSingleTextureCoordinateNode*  extNode;

  /** Provide 4-tuple float* value from inputOutput MFVec4f field named "point". */
  void (*getPoint) (void* this, float* result);

  /** Provide number of 4-tuple primitive values in "point" array */
  int (*getNumPoint) (void* this);

  /** Assign 4-tuple float* value to inputOutput MFVec4f field named "point". */
  void (*setPoint) (void* this, float* values);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "mapping". */
  string (*getMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "mapping". */
  void (*setMapping) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureCoordinateGenerator defines a node interface that extends interface X3DSingleTextureCoordinateNode. */

struct TextureCoordinateGenerator
{
  struct X3DSingleTextureCoordinateNode*  extNode;

  /** Provide string value from inputOutput SFString field named "mode". */
  string (*getMode) (void* this);

  /** Assign string value to inputOutput SFString field named "mode". */
  void (*setMode) (void* this, string value);

  /** Provide float* value from inputOutput MFFloat field named "parameter". */
  float* (*getParameter) (void* this);

  /** Provide number of primitive values in "parameter" array */
  int (*getNumParameter) (void* this);

  /** Assign float* value to inputOutput MFFloat field named "parameter". */
  void (*setParameter) (void* this, float* values);

  /** Assign single float* value as the MFFloat array for inputOutput field named "parameter" */
  void (*setParameter2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string value from inputOutput SFString field named "mapping". */
  string (*getMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "mapping". */
  void (*setMapping) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureProjector defines a node interface that extends interface X3DTextureProjectorNode. */

struct TextureProjector
{
  struct X3DTextureProjectorNode*  extNode;

  /** Provide float value [0,3.1416) from inputOutput SFFloat field named "fieldOfView". */
  float (*getFieldOfView) (void* this);

  /** Assign float value [0,3.1416) to inputOutput SFFloat field named "fieldOfView". */
  void (*setFieldOfView) (void* this, float value)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "upVector". */
  void (*getUpVector) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "upVector". */
  void (*setUpVector) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "shadows". */
  SFBool (*getShadows) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "shadows". */
  void (*setShadows) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float (*getShadowIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void (*setShadowIntensity) (void* this, float value);

  /** Provide float value (0,∞) from outputOnly SFFloat field named "aspectRatio". */
  float (*getAspectRatio) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide float value [-1,∞) from inputOutput SFFloat field named "farDistance". */
  float (*getFarDistance) (void* this);

  /** Assign float value [-1,∞) to inputOutput SFFloat field named "farDistance". */
  void (*setFarDistance) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "global". */
  SFBool (*getGlobal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "global". */
  void (*setGlobal) (void* this, SFBool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  void (*getLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void (*setLocation) (void* this, float* value);

  /** Provide float value [-1,∞) from inputOutput SFFloat field named "nearDistance". */
  float (*getNearDistance) (void* this);

  /** Assign float value [-1,∞) to inputOutput SFFloat field named "nearDistance". */
  void (*setNearDistance) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "texture". */
  void (*getTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "texture". */
  void (*setTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setTexture2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureProjectorParallel defines a node interface that extends interface X3DTextureProjectorNode. */

struct TextureProjectorParallel
{
  struct X3DTextureProjectorNode*  extNode;

  /** Provide 4-tuple float* value from inputOutput SFVec4f field named "fieldOfView". */
  void (*getFieldOfView) (void* this, float* result);

  /** Assign 4-tuple float* value to inputOutput SFVec4f field named "fieldOfView". */
  void (*setFieldOfView) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "color". */
  void (*getColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "color". */
  void (*setColor) (void* this, float* color)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "intensity". */
  float (*getIntensity) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "intensity". */
  void (*setIntensity) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "shadows". */
  SFBool (*getShadows) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "shadows". */
  void (*setShadows) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "shadowIntensity". */
  float (*getShadowIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shadowIntensity". */
  void (*setShadowIntensity) (void* this, float value);

  /** Provide float value (0,∞) from outputOnly SFFloat field named "aspectRatio". */
  float (*getAspectRatio) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide float value [-1,∞) from inputOutput SFFloat field named "farDistance". */
  float (*getFarDistance) (void* this);

  /** Assign float value [-1,∞) to inputOutput SFFloat field named "farDistance". */
  void (*setFarDistance) (void* this, float value)

  /** Provide SFBool value from inputOutput SFBool field named "global". */
  SFBool (*getGlobal) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "global". */
  void (*setGlobal) (void* this, SFBool value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "location". */
  void (*getLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "location". */
  void (*setLocation) (void* this, float* value);

  /** Provide float value [-1,∞) from inputOutput SFFloat field named "nearDistance". */
  float (*getNearDistance) (void* this);

  /** Assign float value [-1,∞) to inputOutput SFFloat field named "nearDistance". */
  void (*setNearDistance) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture2DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture2DNode type field named "texture". */
  void (*getTexture) (void* this, struct X3DNode result);

  /** Assign X3DTexture2DNode value (using a properly typed node) to inputOutput X3DTexture2DNode type field named "texture". */
  void (*setTexture) (void* this, X3DTexture2DNode node);

  /** Assign X3DTexture2DNode value (using a properly typed protoInstance) */
  void (*setTexture2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureProperties defines a node interface that extends interface X3DNode. */

struct TextureProperties
{
  struct X3DNode*  extNode;

  /** Provide float value [1,∞) from inputOutput SFFloat field named "anisotropicDegree". */
  float (*getAnisotropicDegree) (void* this);

  /** Assign float value [1,∞) to inputOutput SFFloat field named "anisotropicDegree". */
  void (*setAnisotropicDegree) (void* this, float value)

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "borderColor". */
  void (*getBorderColor) (void* this, float* result);

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "borderColor". */
  void (*setBorderColor) (void* this, float* color)

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "borderWidth". */
  int (*getBorderWidth) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "borderWidth". */
  void (*setBorderWidth) (void* this, int value)

  /** Provide string value from inputOutput SFString field named "boundaryModeS". */
  string (*getBoundaryModeS) (void* this);

  /** Assign string value to inputOutput SFString field named "boundaryModeS". */
  void (*setBoundaryModeS) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "boundaryModeT". */
  string (*getBoundaryModeT) (void* this);

  /** Assign string value to inputOutput SFString field named "boundaryModeT". */
  void (*setBoundaryModeT) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "boundaryModeR". */
  string (*getBoundaryModeR) (void* this);

  /** Assign string value to inputOutput SFString field named "boundaryModeR". */
  void (*setBoundaryModeR) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "magnificationFilter". */
  string (*getMagnificationFilter) (void* this);

  /** Assign string value to inputOutput SFString field named "magnificationFilter". */
  void (*setMagnificationFilter) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "minificationFilter". */
  string (*getMinificationFilter) (void* this);

  /** Assign string value to inputOutput SFString field named "minificationFilter". */
  void (*setMinificationFilter) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "textureCompression". */
  string (*getTextureCompression) (void* this);

  /** Assign string value to inputOutput SFString field named "textureCompression". */
  void (*setTextureCompression) (void* this, string value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "texturePriority". */
  float (*getTexturePriority) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "texturePriority". */
  void (*setTexturePriority) (void* this, float value)

  /** Provide SFBool value from initializeOnly SFBool field named "generateMipMaps". */
  SFBool (*getGenerateMipMaps) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "generateMipMaps". */
  void (*setGenerateMipMaps) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureTransform defines a node interface that extends interface X3DTextureTransformNode. */

struct TextureTransform
{
  struct X3DTextureTransformNode*  extNode;

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide float value in radians from inputOutput SFFloat field named "rotation". */
  float (*getRotation) (void* this);

  /** Assign float value in radians to inputOutput SFFloat field named "rotation". */
  void (*setRotation) (void* this, float value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 2-tuple float* value from inputOutput SFVec2f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 2-tuple float* value to inputOutput SFVec2f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureTransform3D defines a node interface that extends interface X3DTextureTransformNode. */

struct TextureTransform3D
{
  struct X3DTextureTransformNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TextureTransformMatrix3D defines a node interface that extends interface X3DTextureTransformNode. */

struct TextureTransformMatrix3D
{
  struct X3DTextureTransformNode*  extNode;

  /** Provide float* value from inputOutput SFMatrix4f field named "matrix". */
  float* (*getMatrix) (void* this);

  /** Assign float* value to inputOutput SFMatrix4f field named "matrix". */
  void (*setMatrix) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TimeSensor defines a node interface that extends interfaces X3DTimeDependentNode, X3DSensorNode. */

struct TimeSensor
{
  struct X3DTimeDependentNode*  extNode;
  struct X3DSensorNode*  extNode1;

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "cycleTime". */
  double (*getCycleTime) (void* this);

  /** Provide float value from outputOnly SFFloat field named "fraction_changed". */
  float (*getFraction) (void* this);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "time". */
  double (*getTime) (void* this);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "cycleInterval". */
  double (*getCycleInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "cycleInterval". */
  void (*setCycleInterval) (void* this, double timestamp)

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "loop". */
  SFBool (*getLoop) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "loop". */
  void (*setLoop) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TimeTrigger defines a node interface that extends interface X3DTriggerNode. */

struct TimeTrigger
{
  struct X3DTriggerNode*  extNode;

  /** Assign SFBool value to inputOnly SFBool field named "set_boolean". */
  void (*setBoolean) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "triggerTime". */
  double (*getTriggerTime) (void* this);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ToneMappedVolumeStyle defines a node interface that extends interface X3DComposableVolumeRenderStyleNode. */

struct ToneMappedVolumeStyle
{
  struct X3DComposableVolumeRenderStyleNode*  extNode;

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "coolColor". */
  void (*getCoolColor) (void* this, float* result);

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "coolColor". */
  void (*setCoolColor) (void* this, float* color)

  /** Provide 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] from inputOutput SFColorRGBA field named "warmColor". */
  void (*getWarmColor) (void* this, float* result);

  /** Assign 4-tuple float* value using RGBA values [0..1] using RGBA values [0..1] to inputOutput SFColorRGBA field named "warmColor". */
  void (*setWarmColor) (void* this, float* color)

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*getSurfaceNormals) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "surfaceNormals". */
  void (*setSurfaceNormals) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setSurfaceNormals2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TouchSensor defines a node interface that extends interface X3DTouchSensorNode. */

struct TouchSensor
{
  struct X3DTouchSensorNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitNormal_changed". */
  void (*getHitNormal) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "hitPoint_changed". */
  void (*getHitPoint) (void* this, float* result);

  /** Provide 2-tuple float* value from outputOnly SFVec2f field named "hitTexCoord_changed". */
  void (*getHitTexCoord) (void* this, float* result);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isOver". */
  SFBool (*getIsOver) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "touchTime". */
  double (*getTouchTime) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Transform defines a node interface that extends interface X3DGroupingNode. */

struct Transform
{
  struct X3DGroupingNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "rotation". */
  float* (*getRotation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "rotation". */
  void (*setRotation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "scale". */
  void (*getScale) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "scale". */
  void (*setScale) (void* this, float* value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "scaleOrientation". */
  float* (*getScaleOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "scaleOrientation". */
  void (*setScaleOrientation) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "translation". */
  void (*getTranslation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "translation". */
  void (*setTranslation) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TransformSensor defines a node interface that extends interface X3DEnvironmentalSensorNode. */

struct TransformSensor
{
  struct X3DEnvironmentalSensorNode*  extNode;

  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double (*getEnterTime) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double (*getExitTime) (void* this);

  /** Provide 4-tuple float* value in radians from outputOnly SFRotation field named "orientation_changed". */
  float* (*getOrientation) (void* this);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "position_changed". */
  void (*getPosition) (void* this, float* result);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide X3DGroupingNode|X3DShapeNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGroupingNode|X3DShapeNode type field named "targetObject". */
  void (*getTargetObject) (void* this, struct X3DNode result);

  /** Assign X3DGroupingNode|X3DShapeNode value (using a properly typed node) to inputOutput X3DGroupingNode|X3DShapeNode type field named "targetObject". */
  void (*setTargetObject) (void* this, struct X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode value (using a properly typed protoInstance) */
  void (*setTargetObject2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-∞,∞) from initializeOnly SFVec3f field named "size". */
  void (*getSize) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to initializeOnly SFVec3f field named "size". */
  void (*setSize) (void* this, float* value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TransmitterPdu defines a node interface that extends interfaces X3DNetworkSensorNode, X3DBoundedObject. */

struct TransmitterPdu
{
  struct X3DNetworkSensorNode*  extNode;
  struct X3DBoundedObject*  extNode1;

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkReader". */
  SFBool (*getIsNetworkReader) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isNetworkWriter". */
  SFBool (*getIsNetworkWriter) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isRtpHeaderHeard". */
  SFBool (*getIsRtpHeaderHeard) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isStandAlone". */
  SFBool (*getIsStandAlone) (void* this);

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "timestamp". */
  double (*getTimestamp) (void* this);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "whichGeometry". */
  int (*getWhichGeometry) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "whichGeometry". */
  void (*setWhichGeometry) (void* this, int value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "readInterval". */
  double (*getReadInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "readInterval". */
  void (*setReadInterval) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "writeInterval". */
  double (*getWriteInterval) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "writeInterval". */
  void (*setWriteInterval) (void* this, double timestamp)

  /** Provide string value from inputOutput SFString field named "networkMode". */
  string (*getNetworkMode) (void* this);

  /** Assign string value to inputOutput SFString field named "networkMode". */
  void (*setNetworkMode) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "siteID". */
  int (*getSiteID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "siteID". */
  void (*setSiteID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "applicationID". */
  int (*getApplicationID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "applicationID". */
  void (*setApplicationID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "entityID". */
  int (*getEntityID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "entityID". */
  void (*setEntityID) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "address". */
  string (*getAddress) (void* this);

  /** Assign string value to inputOutput SFString field named "address". */
  void (*setAddress) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "port". */
  int (*getPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "port". */
  void (*setPort) (void* this, int value);

  /** Provide string value from inputOutput SFString field named "multicastRelayHost". */
  string (*getMulticastRelayHost) (void* this);

  /** Assign string value to inputOutput SFString field named "multicastRelayHost". */
  void (*setMulticastRelayHost) (void* this, string value);

  /** Provide int value from inputOutput SFInt32 field named "multicastRelayPort". */
  int (*getMulticastRelayPort) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "multicastRelayPort". */
  void (*setMulticastRelayPort) (void* this, int value);

  /** Provide SFBool value from initializeOnly SFBool field named "rtpHeaderExpected". */
  SFBool (*getRtpHeaderExpected) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "rtpHeaderExpected". */
  void (*setRtpHeaderExpected) (void* this, SFBool value);

  /** Provide int value from inputOutput SFInt32 field named "radioID". */
  int (*getRadioID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioID". */
  void (*setRadioID) (void* this, int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "antennaLocation". */
  void (*getAntennaLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "antennaLocation". */
  void (*setAntennaLocation) (void* this, float* value);

  /** Provide int value from inputOutput SFInt32 field named "antennaPatternLength". */
  int (*getAntennaPatternLength) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "antennaPatternLength". */
  void (*setAntennaPatternLength) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "antennaPatternType". */
  int (*getAntennaPatternType) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "antennaPatternType". */
  void (*setAntennaPatternType) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "cryptoKeyID". */
  int (*getCryptoKeyID) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "cryptoKeyID". */
  void (*setCryptoKeyID) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "cryptoSystem". */
  int (*getCryptoSystem) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "cryptoSystem". */
  void (*setCryptoSystem) (void* this, int value);

  /** Provide int value [0,∞) from inputOutput SFInt32 field named "frequency". */
  int (*getFrequency) (void* this);

  /** Assign int value [0,∞) to inputOutput SFInt32 field named "frequency". */
  void (*setFrequency) (void* this, int value)

  /** Provide int value from inputOutput SFInt32 field named "inputSource". */
  int (*getInputSource) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "inputSource". */
  void (*setInputSource) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "lengthOfModulationParameters". */
  int (*getLengthOfModulationParameters) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "lengthOfModulationParameters". */
  void (*setLengthOfModulationParameters) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeDetail". */
  int (*getModulationTypeDetail) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeDetail". */
  void (*setModulationTypeDetail) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeMajor". */
  int (*getModulationTypeMajor) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeMajor". */
  void (*setModulationTypeMajor) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeSpreadSpectrum". */
  int (*getModulationTypeSpreadSpectrum) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeSpreadSpectrum". */
  void (*setModulationTypeSpreadSpectrum) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "modulationTypeSystem". */
  int (*getModulationTypeSystem) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "modulationTypeSystem". */
  void (*setModulationTypeSystem) (void* this, int value);

  /** Provide float value from inputOutput SFFloat field named "power". */
  float (*getPower) (void* this);

  /** Assign float value to inputOutput SFFloat field named "power". */
  void (*setPower) (void* this, float value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeCategory". */
  int (*getRadioEntityTypeCategory) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeCategory". */
  void (*setRadioEntityTypeCategory) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeCountry". */
  int (*getRadioEntityTypeCountry) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeCountry". */
  void (*setRadioEntityTypeCountry) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeDomain". */
  int (*getRadioEntityTypeDomain) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeDomain". */
  void (*setRadioEntityTypeDomain) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeKind". */
  int (*getRadioEntityTypeKind) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeKind". */
  void (*setRadioEntityTypeKind) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeNomenclature". */
  int (*getRadioEntityTypeNomenclature) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeNomenclature". */
  void (*setRadioEntityTypeNomenclature) (void* this, int value);

  /** Provide int value from inputOutput SFInt32 field named "radioEntityTypeNomenclatureVersion". */
  int (*getRadioEntityTypeNomenclatureVersion) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "radioEntityTypeNomenclatureVersion". */
  void (*setRadioEntityTypeNomenclatureVersion) (void* this, int value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "relativeAntennaLocation". */
  void (*getRelativeAntennaLocation) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "relativeAntennaLocation". */
  void (*setRelativeAntennaLocation) (void* this, float* value);

  /** Provide float value from inputOutput SFFloat field named "transmitFrequencyBandwidth". */
  float (*getTransmitFrequencyBandwidth) (void* this);

  /** Assign float value to inputOutput SFFloat field named "transmitFrequencyBandwidth". */
  void (*setTransmitFrequencyBandwidth) (void* this, float value);

  /** Provide int value from inputOutput SFInt32 field named "transmitState". */
  int (*getTransmitState) (void* this);

  /** Assign int value to inputOutput SFInt32 field named "transmitState". */
  void (*setTransmitState) (void* this, int value);

  /** Provide string* value from initializeOnly MFString field named "geoSystem". */
  string* (*getGeoSystem) (void* this);

  /** Provide number of primitive values in "geoSystem" array */
  int (*getNumGeoSystem) (void* this);

  /** Assign string* value to initializeOnly MFString field named "geoSystem". */
  void (*setGeoSystem) (void* this, string* values);

  /** Provide 3-tuple double* value from inputOutput SFVec3d field named "geoCoords". */
  void (*getGeoCoords) (void* this, double* result);

  /** Assign 3-tuple double* value to inputOutput SFVec3d field named "geoCoords". */
  void (*setGeoCoords) (void* this, double* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TriangleFanSet defines a node interface that extends interface X3DComposedGeometryNode. */

struct TriangleFanSet
{
  struct X3DComposedGeometryNode*  extNode;

  /** Provide MFInt32 value (-∞,∞) from inputOutput MFInt32 field named "fanCount". */
  MFInt32 (*getFanCount) (void* this);

  /** Provide number of primitive values in "fanCount" array */
  int (*getNumFanCount) (void* this);

  /** Assign MFInt32 value (-∞,∞) to inputOutput MFInt32 field named "fanCount". */
  void (*setFanCount) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOutput field named "fanCount" */
  void (*setFanCount2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TriangleSet defines a node interface that extends interface X3DComposedGeometryNode. */

struct TriangleSet
{
  struct X3DComposedGeometryNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TriangleSet2D defines a node interface that extends interface X3DGeometryNode. */

struct TriangleSet2D
{
  struct X3DGeometryNode*  extNode;

  /** Provide 2-tuple float* value from inputOutput MFVec2f field named "vertices". */
  void (*getVertices) (void* this, float* result);

  /** Provide number of 2-tuple primitive values in "vertices" array */
  int (*getNumVertices) (void* this);

  /** Assign 2-tuple float* value to inputOutput MFVec2f field named "vertices". */
  void (*setVertices) (void* this, float* values);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TriangleStripSet defines a node interface that extends interface X3DComposedGeometryNode. */

struct TriangleStripSet
{
  struct X3DComposedGeometryNode*  extNode;

  /** Provide MFInt32 value (-∞,∞) from inputOutput MFInt32 field named "stripCount". */
  MFInt32 (*getStripCount) (void* this);

  /** Provide number of primitive values in "stripCount" array */
  int (*getNumStripCount) (void* this);

  /** Assign MFInt32 value (-∞,∞) to inputOutput MFInt32 field named "stripCount". */
  void (*setStripCount) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOutput field named "stripCount" */
  void (*setStripCount2) (void* this, SFInt32 value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from initializeOnly SFBool field named "ccw". */
  SFBool (*getCcw) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "ccw". */
  void (*setCcw) (void* this, SFBool value);

  /** Provide SFBool value from initializeOnly SFBool field named "colorPerVertex". */
  SFBool (*getColorPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "colorPerVertex". */
  void (*setColorPerVertex) (void* this, SFBool color);

  /** Provide SFBool value from initializeOnly SFBool field named "normalPerVertex". */
  SFBool (*getNormalPerVertex) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "normalPerVertex". */
  void (*setNormalPerVertex) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "solid". */
  SFBool (*getSolid) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "solid". */
  void (*setSolid) (void* this, SFBool value);

  /** Provide X3DVertexAttributeNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*getAttrib) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "attrib" array */
  int (*getNumAttrib) (void* this);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib) (void* this, X3DVertexAttributeNode* nodes);

  /** Assign single X3DVertexAttributeNode* value (using a properly typed node) as the MFNode array for inputOutput field named "attrib" */
  void (*setAttrib2) (void* this, X3DVertexAttributeNode* node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed protoInstance array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DVertexAttributeNode* value (using a properly typed node array) to inputOutput X3DVertexAttributeNode type field named "attrib". */
  void (*setAttrib4) (void* this, struct X3DNode* nodes);

  /** Provide X3DColorNode value (using a properly typed node or X3DPrototypeInstance) using RGB values [0..1] from inputOutput X3DColorNode type field named "color". */
  void (*getColor) (void* this, struct X3DNode result);

  /** Assign X3DColorNode value (using a properly typed node) using RGB values [0..1] to inputOutput X3DColorNode type field named "color". */
  void (*setColor) (void* this, X3DColorNode color)

  /** Assign X3DColorNode value (using a properly typed protoInstance) */
  void (*setColor2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide FogCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput FogCoordinate type field named "fogCoord". */
  void (*getFogCoord) (void* this, struct X3DNode result);

  /** Assign FogCoordinate value (using a properly typed node) to inputOutput FogCoordinate type field named "fogCoord". */
  void (*setFogCoord) (void* this, FogCoordinate node);

  /** Assign FogCoordinate value (using a properly typed protoInstance) */
  void (*setFogCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DNormalNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DNormalNode type field named "normal". */
  void (*getNormal) (void* this, struct X3DNode result);

  /** Assign X3DNormalNode value (using a properly typed node) to inputOutput X3DNormalNode type field named "normal". */
  void (*setNormal) (void* this, X3DNormalNode node);

  /** Assign X3DNormalNode value (using a properly typed protoInstance) */
  void (*setNormal2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*getTexCoord) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed node) to inputOutput X3DSingleTextureCoordinateNode|MultiTextureCoordinate type field named "texCoord". */
  void (*setTexCoord) (void* this, struct X3DNode node);

  /** Assign X3DSingleTextureCoordinateNode|MultiTextureCoordinate value (using a properly typed protoInstance) */
  void (*setTexCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** TwoSidedMaterial defines a node interface that extends interface X3DMaterialNode. */

struct TwoSidedMaterial
{
  struct X3DMaterialNode*  extNode;

  /** Provide float value from inputOutput SFFloat field named "ambientIntensity". */
  float (*getAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "ambientIntensity". */
  void (*setAmbientIntensity) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "backAmbientIntensity". */
  float (*getBackAmbientIntensity) (void* this);

  /** Assign float value to inputOutput SFFloat field named "backAmbientIntensity". */
  void (*setBackAmbientIntensity) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "diffuseColor". */
  void (*getDiffuseColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "diffuseColor". */
  void (*setDiffuseColor) (void* this, float* color)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "backDiffuseColor". */
  void (*getBackDiffuseColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "backDiffuseColor". */
  void (*setBackDiffuseColor) (void* this, float* color)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  void (*getEmissiveColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void (*setEmissiveColor) (void* this, float* color)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "backEmissiveColor". */
  void (*getBackEmissiveColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "backEmissiveColor". */
  void (*setBackEmissiveColor) (void* this, float* color)

  /** Provide float value from inputOutput SFFloat field named "shininess". */
  float (*getShininess) (void* this);

  /** Assign float value to inputOutput SFFloat field named "shininess". */
  void (*setShininess) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "backShininess". */
  float (*getBackShininess) (void* this);

  /** Assign float value to inputOutput SFFloat field named "backShininess". */
  void (*setBackShininess) (void* this, float value);

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "specularColor". */
  void (*getSpecularColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "specularColor". */
  void (*setSpecularColor) (void* this, float* color)

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "backSpecularColor". */
  void (*getBackSpecularColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "backSpecularColor". */
  void (*setBackSpecularColor) (void* this, float* color)

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float (*getTransparency) (void* this);

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void (*setTransparency) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "backTransparency". */
  float (*getBackTransparency) (void* this);

  /** Assign float value to inputOutput SFFloat field named "backTransparency". */
  void (*setBackTransparency) (void* this, float value);

  /** Provide SFBool value from inputOutput SFBool field named "separateBackColor". */
  SFBool (*getSeparateBackColor) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "separateBackColor". */
  void (*setSeparateBackColor) (void* this, SFBool color);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** unit defines a node interface that extends interface X3DStatement.
  * Functional summary: unit statement defines data-conversion factors for typed values defined in a scene. */

struct unit
{
  struct X3DStatement*  extNode;

  /** Provide double value from inputOutput SFDouble field named "conversionFactor". */
  double (*getConversionFactor) (void* this);

  /** Assign double value to inputOutput SFDouble field named "conversionFactor". */
  void (*setConversionFactor) (void* this, double value);

  /** Provide string value from initializeOnly SFString field named "category". */
  string (*getCategory) (void* this);

  /** Assign string value to initializeOnly SFString field named "category". */
  void (*setCategory) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "name". */
  string (*getName) (void* this);

  /** Assign string value to inputOutput SFString field named "name". */
  void (*setName) (void* this, string value);

  /** Provide double value (0,∞) from inputOutput SFDouble field named "conversionFactor". */
  double (*getConversionFactor) (void* this);

  /** Assign double value (0,∞) to inputOutput SFDouble field named "conversionFactor". */
  void (*setConversionFactor) (void* this, double value)
}
;/** UniversalJoint defines a node interface that extends interface X3DRigidJointNode.
  * UniversalJoint is like a BallJoint that constrains an extra degree of rotational freedom. */

struct UniversalJoint
{
  struct X3DRigidJointNode*  extNode;

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1AnchorPoint". */
  void (*getBody1AnchorPoint) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body1Axis". */
  void (*getBody1Axis) (void* this, float* result);

  /** Provide 3-tuple float* value from outputOnly SFVec3f field named "body2AnchorPoint". */
  void (*getBody2AnchorPoint) (void* this, float* result);

  /** Provide float value from outputOnly SFFloat field named "body2Axis". */
  float (*getBody2Axis) (void* this);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "anchorPoint". */
  void (*getAnchorPoint) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "anchorPoint". */
  void (*setAnchorPoint) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis1". */
  void (*getAxis1) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis1". */
  void (*setAxis1) (void* this, float* value);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "axis2". */
  void (*getAxis2) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "axis2". */
  void (*setAxis2) (void* this, float* value);

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop1Bounce". */
  float (*getStop1Bounce) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop1Bounce". */
  void (*setStop1Bounce) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop1ErrorCorrection". */
  float (*getStop1ErrorCorrection) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop1ErrorCorrection". */
  void (*setStop1ErrorCorrection) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop2Bounce". */
  float (*getStop2Bounce) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop2Bounce". */
  void (*setStop2Bounce) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "stop2ErrorCorrection". */
  float (*getStop2ErrorCorrection) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "stop2ErrorCorrection". */
  void (*setStop2ErrorCorrection) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Provide string* value from inputOutput MFString field named "forceOutput". */
  string* (*getForceOutput) (void* this);

  /** Provide number of primitive values in "forceOutput" array */
  int (*getNumForceOutput) (void* this);

  /** Assign string* value to inputOutput MFString field named "forceOutput". */
  void (*setForceOutput) (void* this, string* values);

  /** Assign single string* value as the MFString array for inputOutput field named "forceOutput" */
  void (*setForceOutput2) (void* this, string* value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body1". */
  void (*getBody1) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body1". */
  void (*setBody1) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody12) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide RigidBody value (using a properly typed node or X3DPrototypeInstance) from inputOutput RigidBody type field named "body2". */
  void (*getBody2) (void* this, struct X3DNode result);

  /** Assign RigidBody value (using a properly typed node) to inputOutput RigidBody type field named "body2". */
  void (*setBody2) (void* this, RigidBody node);

  /** Assign RigidBody value (using a properly typed protoInstance) */
  void (*setBody22) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** UnlitMaterial defines a node interface that extends interface X3DOneSidedMaterialNode. */

struct UnlitMaterial
{
  struct X3DOneSidedMaterialNode*  extNode;

  /** Provide float value from inputOutput SFFloat field named "transparency". */
  float (*getTransparency) (void* this);

  /** Assign float value to inputOutput SFFloat field named "transparency". */
  void (*setTransparency) (void* this, float value);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void (*getEmissiveTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "emissiveTexture". */
  void (*setEmissiveTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setEmissiveTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DSingleTextureNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void (*getNormalTexture) (void* this, struct X3DNode result);

  /** Assign X3DSingleTextureNode value (using a properly typed node) to inputOutput X3DSingleTextureNode type field named "normalTexture". */
  void (*setNormalTexture) (void* this, X3DSingleTextureNode node);

  /** Assign X3DSingleTextureNode value (using a properly typed protoInstance) */
  void (*setNormalTexture2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value using RGB values [0..1] using RGB values [0..1] from inputOutput SFColor field named "emissiveColor". */
  void (*getEmissiveColor) (void* this, float* result);

  /** Assign 3-tuple float* value using RGB values [0..1] using RGB values [0..1] to inputOutput SFColor field named "emissiveColor". */
  void (*setEmissiveColor) (void* this, float* color)

  /** Provide string value from inputOutput SFString field named "emissiveTextureMapping". */
  string (*getEmissiveTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "emissiveTextureMapping". */
  void (*setEmissiveTextureMapping) (void* this, string value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "normalScale". */
  float (*getNormalScale) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "normalScale". */
  void (*setNormalScale) (void* this, float value)

  /** Provide string value from inputOutput SFString field named "normalTextureMapping". */
  string (*getNormalTextureMapping) (void* this);

  /** Assign string value to inputOutput SFString field named "normalTextureMapping". */
  void (*setNormalTextureMapping) (void* this, string value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Viewpoint defines a node interface that extends interface X3DViewpointNode. */

struct Viewpoint
{
  struct X3DViewpointNode*  extNode;

  /** Provide 3-tuple float* value in radians from inputOutput SFVec3f field named "centerOfRotation". */
  void (*getCenterOfRotation) (void* this, float* result);

  /** Assign 3-tuple float* value in radians to inputOutput SFVec3f field named "centerOfRotation". */
  void (*setCenterOfRotation) (void* this, float* value);

  /** Provide float value (0,3.1416) from inputOutput SFFloat field named "fieldOfView". */
  float (*getFieldOfView) (void* this);

  /** Assign float value (0,3.1416) to inputOutput SFFloat field named "fieldOfView". */
  void (*setFieldOfView) (void* this, float value)

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "position". */
  void (*getPosition) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "position". */
  void (*setPosition) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Assign SFBool value to inputOnly SFBool field named "set_bind". */
  void (*setBind) (void* this, SFBool value);

  /** Provide double value in seconds from outputOnly SFTime field named "bindTime". */
  double (*getBindTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isBound". */
  SFBool (*getIsBound) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "jump". */
  SFBool (*getJump) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "jump". */
  void (*setJump) (void* this, SFBool value);

  /** Provide 4-tuple float* value in radians from inputOutput SFRotation field named "orientation". */
  float* (*getOrientation) (void* this);

  /** Assign 4-tuple float* value in radians to inputOutput SFRotation field named "orientation". */
  void (*setOrientation) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "retainUserOffsets". */
  SFBool (*getRetainUserOffsets) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "retainUserOffsets". */
  void (*setRetainUserOffsets) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "farDistance". */
  float (*getFarDistance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "farDistance". */
  void (*setFarDistance) (void* this, float value);

  /** Provide float value from inputOutput SFFloat field named "nearDistance". */
  float (*getNearDistance) (void* this);

  /** Assign float value to inputOutput SFFloat field named "nearDistance". */
  void (*setNearDistance) (void* this, float value);

  /** Provide SFBool value from inputOutput SFBool field named "viewAll". */
  SFBool (*getViewAll) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "viewAll". */
  void (*setViewAll) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide NavigationInfo value (using a properly typed node or X3DPrototypeInstance) from inputOutput NavigationInfo type field named "navigationInfo". */
  void (*getNavigationInfo) (void* this, struct X3DNode result);

  /** Assign NavigationInfo value (using a properly typed node) to inputOutput NavigationInfo type field named "navigationInfo". */
  void (*setNavigationInfo) (void* this, NavigationInfo node);

  /** Assign NavigationInfo value (using a properly typed protoInstance) */
  void (*setNavigationInfo2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** ViewpointGroup defines a node interface that extends interface X3DChildNode. */

struct ViewpointGroup
{
  struct X3DChildNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "displayed". */
  SFBool (*getDisplayed) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "displayed". */
  void (*setDisplayed) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "retainUserOffsets". */
  SFBool (*getRetainUserOffsets) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "retainUserOffsets". */
  void (*setRetainUserOffsets) (void* this, SFBool value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "size". */
  void (*getSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "size". */
  void (*setSize) (void* this, float* value);

  /** Provide X3DViewpointNode|ViewpointGroup* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DViewpointNode|ViewpointGroup type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DViewpointNode|ViewpointGroup* value (using a properly typed node array) to inputOutput X3DViewpointNode|ViewpointGroup type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign X3DViewpointNode|ViewpointGroup* value (using a properly typed protoInstance array) to inputOutput X3DViewpointNode|ViewpointGroup type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** Viewport defines a node interface that extends interface X3DViewportNode. */

struct Viewport
{
  struct X3DViewportNode*  extNode;

  /** Provide float* value (-∞,∞) from inputOutput MFFloat field named "clipBoundary". */
  float* (*getClipBoundary) (void* this);

  /** Provide number of primitive values in "clipBoundary" array */
  int (*getNumClipBoundary) (void* this);

  /** Assign float* value (-∞,∞) to inputOutput MFFloat field named "clipBoundary". */
  void (*setClipBoundary) (void* this, float* values);

  /** Assign single float* value (-∞,∞) as the MFFloat array for inputOutput field named "clipBoundary" */
  void (*setClipBoundary2) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "addChildren" */
  void addChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "addChildren". */
  void addChildren4 (void* this, struct X3DNode* nodes);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOnly field named "removeChildren" */
  void removeChildren2 (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren3 (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOnly X3DChildNode type field named "removeChildren". */
  void removeChildren4 (void* this, struct X3DNode* nodes);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DChildNode type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren) (void* this, X3DChildNode* nodes);

  /** Assign single X3DChildNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, X3DChildNode* node);

  /** Assign X3DChildNode* value (using a properly typed protoInstance array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  /** Assign X3DChildNode* value (using a properly typed node array) to inputOutput X3DChildNode type field named "children". */
  void (*setChildren4) (void* this, struct X3DNode* nodes);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** VisibilitySensor defines a node interface that extends interface X3DEnvironmentalSensorNode. */

struct VisibilitySensor
{
  struct X3DEnvironmentalSensorNode*  extNode;

  /** Provide double value in seconds from outputOnly SFTime field named "enterTime". */
  double (*getEnterTime) (void* this);

  /** Provide double value in seconds from outputOnly SFTime field named "exitTime". */
  double (*getExitTime) (void* this);

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "center". */
  void (*getCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "center". */
  void (*setCenter) (void* this, float* value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-∞,∞) from initializeOnly SFVec3f field named "size". */
  void (*getSize) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to initializeOnly SFVec3f field named "size". */
  void (*setSize) (void* this, float* value);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** VolumeData defines a node interface that extends interface X3DVolumeDataNode. */

struct VolumeData
{
  struct X3DVolumeDataNode*  extNode;

  /** Provide X3DVolumeRenderStyleNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*getRenderStyle) (void* this, struct X3DNode result);

  /** Assign X3DVolumeRenderStyleNode value (using a properly typed node) to inputOutput X3DVolumeRenderStyleNode type field named "renderStyle". */
  void (*setRenderStyle) (void* this, X3DVolumeRenderStyleNode node);

  /** Assign X3DVolumeRenderStyleNode value (using a properly typed protoInstance) */
  void (*setRenderStyle2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DTexture3DNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DTexture3DNode type field named "voxels". */
  void (*getVoxels) (void* this, struct X3DNode result);

  /** Assign X3DTexture3DNode value (using a properly typed node) to inputOutput X3DTexture3DNode type field named "voxels". */
  void (*setVoxels) (void* this, X3DTexture3DNode node);

  /** Assign X3DTexture3DNode value (using a properly typed protoInstance) */
  void (*setVoxels2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "dimensions". */
  void (*getDimensions) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "dimensions". */
  void (*setDimensions) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxCenter". */
  void (*getBboxCenter) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxCenter". */
  void (*setBboxCenter) (void* this, float* value);

  /** Provide 3-tuple float* value from initializeOnly SFVec3f field named "bboxSize". */
  void (*getBboxSize) (void* this, float* result);

  /** Assign 3-tuple float* value to initializeOnly SFVec3f field named "bboxSize". */
  void (*setBboxSize) (void* this, float* value);

  /** Provide SFBool value from inputOutput SFBool field named "bboxDisplay". */
  SFBool (*getBboxDisplay) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "bboxDisplay". */
  void (*setBboxDisplay) (void* this, SFBool value);

  /** Provide SFBool value from inputOutput SFBool field named "visible". */
  SFBool (*getVisible) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "visible". */
  void (*setVisible) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** VolumeEmitter defines a node interface that extends interface X3DParticleEmitterNode. */

struct VolumeEmitter
{
  struct X3DParticleEmitterNode*  extNode;

  /** Assign MFInt32 value (-∞,∞) to inputOnly MFInt32 field named "set_coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for inputOnly field named "set_coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide MFInt32 value (-∞,∞) from initializeOnly MFInt32 field named "coordIndex". */
  MFInt32 (*getCoordIndex) (void* this);

  /** Provide number of primitive values in "coordIndex" array */
  int (*getNumCoordIndex) (void* this);

  /** Assign MFInt32 value (-∞,∞) to initializeOnly MFInt32 field named "coordIndex". */
  void (*setCoordIndex) (void* this, MFInt32 values);

  /** Assign single SFInt32 value (-∞,∞) as the MFInt32 array for initializeOnly field named "coordIndex" */
  void (*setCoordIndex2) (void* this, SFInt32 value);

  /** Provide 3-tuple float* value (-∞,∞) from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value (-∞,∞) to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide SFBool value from initializeOnly SFBool field named "internal". */
  SFBool (*getInternal) (void* this);

  /** Assign SFBool value to initializeOnly SFBool field named "internal". */
  void (*setInternal) (void* this, SFBool value);

  /** Provide X3DCoordinateNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DCoordinateNode type field named "coord". */
  void (*getCoord) (void* this, struct X3DNode result);

  /** Assign X3DCoordinateNode value (using a properly typed node) to inputOutput X3DCoordinateNode type field named "coord". */
  void (*setCoord) (void* this, X3DCoordinateNode node);

  /** Assign X3DCoordinateNode value (using a properly typed protoInstance) */
  void (*setCoord2) (void* this, struct X3DPrototypeInstance protoInstance);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "on". */
  SFBool (*getOn) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "on". */
  void (*setOn) (void* this, SFBool value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "variation". */
  float (*getVariation) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "variation". */
  void (*setVariation) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "mass". */
  float (*getMass) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "mass". */
  void (*setMass) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "surfaceArea". */
  float (*getSurfaceArea) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "surfaceArea". */
  void (*setSurfaceArea) (void* this, float value)

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** VolumePickSensor defines a node interface that extends interface X3DPickSensorNode. */

struct VolumePickSensor
{
  struct X3DPickSensorNode*  extNode;

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values)

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide string value from initializeOnly SFString field named "intersectionType". */
  string (*getIntersectionType) (void* this);

  /** Assign string value to initializeOnly SFString field named "intersectionType". */
  void (*setIntersectionType) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "matchCriterion". */
  string (*getMatchCriterion) (void* this);

  /** Assign string value to inputOutput SFString field named "matchCriterion". */
  void (*setMatchCriterion) (void* this, string value);

  /** Provide string* value ["ALL","NONE","TERRAIN",...] from inputOutput MFString field named "objectType". */
  string* (*getObjectType) (void* this);

  /** Provide number of primitive values in "objectType" array */
  int (*getNumObjectType) (void* this);

  /** Assign string* value ["ALL","NONE","TERRAIN",...] to inputOutput MFString field named "objectType". */
  void (*setObjectType) (void* this, string* values);

  /** Assign single string* value ["ALL","NONE","TERRAIN",...] as the MFString array for inputOutput field named "objectType" */
  void (*setObjectType2) (void* this, string* value);

  /** Provide string value from initializeOnly SFString field named "sortOrder". */
  string (*getSortOrder) (void* this);

  /** Assign string value to initializeOnly SFString field named "sortOrder". */
  void (*setSortOrder) (void* this, string value);

  /** Provide X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*getPickTarget) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickTarget" array */
  int (*getNumPickTarget) (void* this);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed node array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "pickTarget" */
  void (*setPickTarget2) (void* this, struct X3DNode node);

  /** Assign X3DGroupingNode|X3DShapeNode|Inline* value (using a properly typed protoInstance array) to inputOutput X3DGroupingNode|X3DShapeNode|Inline type field named "pickTarget". */
  void (*setPickTarget3) (void* this, struct X3DPrototypeInstance node);

  /** Provide X3DChildNode* value (using a properly typed node array or X3DPrototypeInstance array) from outputOnly X3DChildNode type field named "pickedGeometry". */
  void (*getPickedGeometry) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "pickedGeometry" array */
  int (*getNumPickedGeometry) (void* this);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DGeometryNode value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*getPickingGeometry) (void* this, struct X3DNode result);

  /** Assign X3DGeometryNode value (using a properly typed node) to inputOutput X3DGeometryNode type field named "pickingGeometry". */
  void (*setPickingGeometry) (void* this, X3DGeometryNode node);

  /** Assign X3DGeometryNode value (using a properly typed protoInstance) */
  void (*setPickingGeometry2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** WaveShaper defines a node interface that extends interface X3DSoundProcessingNode. */

struct WaveShaper
{
  struct X3DSoundProcessingNode*  extNode;

  /** Provide string value from inputOutput SFString field named "oversample". */
  string (*getOversample) (void* this);

  /** Assign string value to inputOutput SFString field named "oversample". */
  void (*setOversample) (void* this, string value);

  /** Provide Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array or X3DPrototypeInstance array) from inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*getChildren) (void* this, struct X3DNode* result);

  /** Provide number of nodes in "children" array */
  int (*getNumChildren) (void* this);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed node array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren) (void* this, struct X3DNode* nodes);

  /** Assign single struct X3DNode* value (using a properly typed node) as the MFNode array for inputOutput field named "children" */
  void (*setChildren2) (void* this, struct X3DNode node);

  /** Assign Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper* value (using a properly typed protoInstance array) to inputOutput Analyser|AudioClip|AudioDestination|BiquadFilter|BufferAudioSource|ChannelMerger|ChannelSelector|ChannelSplitter|Convolver|Delay|DynamicsCompressor|Gain|ListenerPointSource|MicrophoneSource|MovieTexture|OscillatorSource|Sound|SpatialSound|StreamAudioDestination|StreamAudioSource|WaveShaper type field named "children". */
  void (*setChildren3) (void* this, struct X3DPrototypeInstance node);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide int value from outputOnly SFInt32 field named "channelCount". */
  int (*getChannelCount) (void* this);

  /** Provide string value from inputOutput SFString field named "channelCountMode". */
  string (*getChannelCountMode) (void* this);

  /** Assign string value to inputOutput SFString field named "channelCountMode". */
  void (*setChannelCountMode) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "channelInterpretation". */
  string (*getChannelInterpretation) (void* this);

  /** Assign string value to inputOutput SFString field named "channelInterpretation". */
  void (*setChannelInterpretation) (void* this, string value);

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide float value from inputOutput SFFloat field named "gain". */
  float (*getGain) (void* this);

  /** Assign float value to inputOutput SFFloat field named "gain". */
  void (*setGain) (void* this, float value);

  /** Provide double value in seconds [0,∞) from inputOutput SFTime field named "tailTime". */
  double (*getTailTime) (void* this);

  /** Assign double value in seconds [0,∞) to inputOutput SFTime field named "tailTime". */
  void (*setTailTime) (void* this, double timestamp)

  /** Provide double value in seconds [0,∞) from outputOnly SFTime field named "elapsedTime". */
  double (*getElapsedTime) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isActive". */
  SFBool (*getIsActive) (void* this);

  /** Provide SFBool value from outputOnly SFBool field named "isPaused". */
  SFBool (*getIsPaused) (void* this);

  /** Provide string value from inputOutput SFString field named "description". */
  string (*getDescription) (void* this);

  /** Assign string value to inputOutput SFString field named "description". */
  void (*setDescription) (void* this, string value);

  /** Provide double value in seconds from inputOutput SFTime field named "pauseTime". */
  double (*getPauseTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "pauseTime". */
  void (*setPauseTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "resumeTime". */
  double (*getResumeTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "resumeTime". */
  void (*setResumeTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "startTime". */
  double (*getStartTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "startTime". */
  void (*setStartTime) (void* this, double timestamp);

  /** Provide double value in seconds from inputOutput SFTime field named "stopTime". */
  double (*getStopTime) (void* this);

  /** Assign double value in seconds to inputOutput SFTime field named "stopTime". */
  void (*setStopTime) (void* this, double timestamp);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** WindPhysicsModel defines a node interface that extends interface X3DParticlePhysicsModelNode. */

struct WindPhysicsModel
{
  struct X3DParticlePhysicsModelNode*  extNode;

  /** Provide 3-tuple float* value from inputOutput SFVec3f field named "direction". */
  void (*getDirection) (void* this, float* result);

  /** Assign 3-tuple float* value to inputOutput SFVec3f field named "direction". */
  void (*setDirection) (void* this, float* value);

  /** Provide float value [0,∞) from inputOutput SFFloat field named "gustiness". */
  float (*getGustiness) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "gustiness". */
  void (*setGustiness) (void* this, float value)

  /** Provide float value [0,∞) from inputOutput SFFloat field named "speed". */
  float (*getSpeed) (void* this);

  /** Assign float value [0,∞) to inputOutput SFFloat field named "speed". */
  void (*setSpeed) (void* this, float value)

  /** Provide float value [0,1) from inputOutput SFFloat field named "turbulence". */
  float (*getTurbulence) (void* this);

  /** Assign float value [0,1) to inputOutput SFFloat field named "turbulence". */
  void (*setTurbulence) (void* this, float value)

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide SFBool value from inputOutput SFBool field named "enabled". */
  SFBool (*getEnabled) (void* this);

  /** Assign SFBool value to inputOutput SFBool field named "enabled". */
  void (*setEnabled) (void* this, SFBool value);

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** WorldInfo defines a node interface that extends interface X3DInfoNode.
  * WorldInfo contains a title and simple persistent metadata information about an X3D scene. This node is strictly for documentation purposes and has no effect on the visual appearance or behaviour of the world. */

struct WorldInfo
{
  struct X3DInfoNode*  extNode;

  /** Provide string* value from initializeOnly MFString field named "info". */
  string* (*getInfo) (void* this);

  /** Provide number of primitive values in "info" array */
  int (*getNumInfo) (void* this);

  /** Assign string* value to initializeOnly MFString field named "info". */
  void (*setInfo) (void* this, string* values);

  /** Assign single string* value as the MFString array for initializeOnly field named "info" */
  void (*setInfo2) (void* this, string* value);

  /** Provide string value from inputOutput SFString field named "title". */
  string (*getTitle) (void* this);

  /** Assign string value to inputOutput SFString field named "title". */
  void (*setTitle) (void* this, string value);

  // ===== methods for fields inherited from parent interfaces =====

  /** Provide IS value (using a properly typed node or X3DPrototypeInstance) from inputOutput IS type field named "IS". */
  void (*getIS) (void* this, struct X3DNode result);

  /** Assign IS value (using a properly typed node) to inputOutput IS type field named "IS". */
  void (*setIS) (void* this, IS node);

  /** Assign IS value (using a properly typed protoInstance) */
  void (*setIS2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide X3DMetadataObject value (using a properly typed node or X3DPrototypeInstance) from inputOutput X3DMetadataObject type field named "metadata". */
  void (*getMetadata) (void* this, struct X3DNode result);

  /** Assign X3DMetadataObject value (using a properly typed node) to inputOutput X3DMetadataObject type field named "metadata". */
  void (*setMetadata) (void* this, X3DMetadataObject node);

  /** Assign X3DMetadataObject value (using a properly typed protoInstance) */
  void (*setMetadata2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;/** X3D defines a node interface that extends interface X3DStatement.
  * X3D is the root node for an Extensible 3D (X3D) Graphics model. */

struct X3D
{
  struct X3DStatement*  extNode;

  /** Provide string value from inputOutput SFString field named "profile". */
  string (*getProfile) (void* this);

  /** Assign string value to inputOutput SFString field named "profile". */
  void (*setProfile) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "version". */
  string (*getVersion) (void* this);

  /** Assign string value to inputOutput SFString field named "version". */
  void (*setVersion) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "version". */
  string (*getVersion) (void* this);

  /** Assign string value to inputOutput SFString field named "version". */
  void (*setVersion) (void* this, string value);

  /** Provide string value from inputOutput SFString field named "profile". */
  string (*getProfile) (void* this);

  /** Assign string value to inputOutput SFString field named "profile". */
  void (*setProfile) (void* this, string value);

  /** Provide head value (using a properly typed node or X3DPrototypeInstance) from inputOutput head type field named "head". */
  void (*getHead) (void* this, struct X3DNode result);

  /** Assign head value (using a properly typed node) to inputOutput head type field named "head". */
  void (*setHead) (void* this, head node);

  /** Assign head value (using a properly typed protoInstance) */
  void (*setHead2) (void* this, struct X3DPrototypeInstance protoInstance);

  /** Provide Scene value (using a properly typed node or X3DPrototypeInstance) from inputOutput Scene type field named "Scene". */
  void (*getScene) (void* this, struct X3DNode result);

  /** Assign Scene value (using a properly typed node) to inputOutput Scene type field named "Scene". */
  void (*setScene) (void* this, Scene node);

  /** Assign Scene value (using a properly typed protoInstance) */
  void (*setScene2) (void* this, struct X3DPrototypeInstance protoInstance);
}
;